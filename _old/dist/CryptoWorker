/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 155);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(84)
var ieee754 = __webpack_require__(128)
var isArray = __webpack_require__(59)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    // Obfuscate that we require Buffer, to reduce size
    Buffer = __webpack_require__(0).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(152)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(119).version;
elliptic.utils = __webpack_require__(118);
elliptic.rand = __webpack_require__(43);
elliptic.curve = __webpack_require__(23);
elliptic.curves = __webpack_require__(110);

// Protocols
elliptic.ec = __webpack_require__(111);
elliptic.eddsa = __webpack_require__(114);


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(1);

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(37).Transform
var inherits = __webpack_require__(1)
var StringDecoder = __webpack_require__(38).StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(0)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var processNextTick = __webpack_require__(26);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(14);
util.inherits = __webpack_require__(1);
/*</replacement>*/

var Readable = __webpack_require__(69);
var Writable = __webpack_require__(33);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(2);

asn1.define = __webpack_require__(76).define;
asn1.base = __webpack_require__(12);
asn1.constants = __webpack_require__(40);
asn1.decoders = __webpack_require__(80);
asn1.encoders = __webpack_require__(82);


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(78).Reporter;
base.DecoderBuffer = __webpack_require__(39).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(39).EncoderBuffer;
base.Node = __webpack_require__(77);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var inherits = __webpack_require__(1)
var md5 = __webpack_require__(22)
var RIPEMD160 = __webpack_require__(35)
var sha = __webpack_require__(36)

var Base = __webpack_require__(7)

function HashNoConstructor (hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new HashNoConstructor(md5)
  if (alg === 'rmd160' || alg === 'ripemd160') return new Hash(new RIPEMD160())

  return new Hash(sha(alg))
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var assert = __webpack_require__(4);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var Buffer = __webpack_require__(8).Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }

  // XXX: phantomjs doesn't like a buffer being passed here
  var bytes = Buffer.from(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(6)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 20 */
/***/ (function(module, exports) {

exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(13)

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var makeHash = __webpack_require__(96)

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5 (x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32)
  x[(((len + 64) >>> 9) << 4) + 14] = len

  var a = 1732584193
  var b = -271733879
  var c = -1732584194
  var d = 271733878

  for (var i = 0; i < x.length; i += 16) {
    var olda = a
    var oldb = b
    var oldc = c
    var oldd = d

    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936)
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586)
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819)
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330)
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897)
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426)
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341)
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983)
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416)
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417)
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063)
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162)
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682)
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101)
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290)
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329)

    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510)
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632)
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713)
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302)
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691)
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083)
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335)
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848)
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438)
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690)
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961)
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501)
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467)
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784)
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473)
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734)

    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558)
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463)
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562)
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556)
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060)
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353)
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632)
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640)
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174)
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222)
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979)
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189)
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487)
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835)
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520)
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651)

    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844)
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415)
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905)
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055)
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571)
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606)
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523)
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799)
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359)
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744)
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380)
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649)
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070)
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379)
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259)
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551)

    a = safe_add(a, olda)
    b = safe_add(b, oldb)
    c = safe_add(c, oldc)
    d = safe_add(d, oldd)
  }

  return [a, b, c, d]
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn (q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)
}

function md5_ff (a, b, c, d, x, s, t) {
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)
}

function md5_gg (a, b, c, d, x, s, t) {
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)
}

function md5_hh (a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t)
}

function md5_ii (a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add (x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF)
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
  return (msw << 16) | (lsw & 0xFFFF)
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

module.exports = function md5 (buf) {
  return makeHash(buf, core_md5)
}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(106);
curve.short = __webpack_require__(109);
curve.mont = __webpack_require__(108);
curve.edwards = __webpack_require__(107);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var md5 = __webpack_require__(22)
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var asn1 = __webpack_require__(131)
var aesid = __webpack_require__(130)
var fixProc = __webpack_require__(133)
var ciphers = __webpack_require__(28)
var compat = __webpack_require__(62)
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(86)
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = __webpack_require__(85)
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = __webpack_require__(20)
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(2);
var randomBytes = __webpack_require__(17);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(102);
exports.Cipher = __webpack_require__(99);
exports.DES = __webpack_require__(100);
exports.CBC = __webpack_require__(98);
exports.EDE = __webpack_require__(101);


/***/ }),
/* 31 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(5);
hash.common = __webpack_require__(16);
hash.sha = __webpack_require__(123);
hash.ripemd = __webpack_require__(122);
hash.hmac = __webpack_require__(121);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var processNextTick = __webpack_require__(26);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(14);
util.inherits = __webpack_require__(1);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(150)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(72);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(8).Buffer;
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]' || Buffer.isBuffer(obj);
}
/*</replacement>*/

var destroyImpl = __webpack_require__(71);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(9);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(9);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(149).setImmediate))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(69);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(33);
exports.Duplex = __webpack_require__(9);
exports.Transform = __webpack_require__(70);
exports.PassThrough = __webpack_require__(139);


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var inherits = __webpack_require__(1)
var HashBase = __webpack_require__(120)

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var m = new Array(16)
  for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4)

  var al = this._a
  var bl = this._b
  var cl = this._c
  var dl = this._d
  var el = this._e

  // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
  // K = 0x00000000
  // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
  al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8); cl = rotl(cl, 10)

  // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
  // K = 0x5a827999
  // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
  el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12); bl = rotl(bl, 10)

  // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
  // K = 0x6ed9eba1
  // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
  dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5); al = rotl(al, 10)

  // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
  // K = 0x8f1bbcdc
  // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
  cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12); el = rotl(el, 10)

  // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  // K = 0xa953fd4e
  // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6); dl = rotl(dl, 10)

  var ar = this._a
  var br = this._b
  var cr = this._c
  var dr = this._d
  var er = this._e

  // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
  // K' = 0x50a28be6
  // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
  ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6); cr = rotl(cr, 10)

  // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
  // K' = 0x5c4dd124
  // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
  er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11); br = rotl(br, 10)

  // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
  // K' = 0x6d703ef3
  // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
  dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5); ar = rotl(ar, 10)

  // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
  // K' = 0x7a6d76e9
  // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
  cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8); er = rotl(er, 10)

  // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  // K' = 0x00000000
  // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11); dr = rotl(dr, 10)

  // change state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(145)
exports.sha1 = __webpack_require__(146)
exports.sha224 = __webpack_require__(147)
exports.sha256 = __webpack_require__(73)
exports.sha384 = __webpack_require__(148)
exports.sha512 = __webpack_require__(74)


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(31).EventEmitter;
var inherits = __webpack_require__(1);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(34);
Stream.Writable = __webpack_require__(143);
Stream.Duplex = __webpack_require__(138);
Stream.Transform = __webpack_require__(142);
Stream.PassThrough = __webpack_require__(141);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(0).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Reporter = __webpack_require__(12).Reporter;
var Buffer = __webpack_require__(0).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(79);


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

var asn1 = __webpack_require__(11);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Buffer = __webpack_require__(0).Buffer;

var asn1 = __webpack_require__(11);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(153);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(19)
var Transform = __webpack_require__(7)
var inherits = __webpack_require__(1)
var GHASH = __webpack_require__(87)
var xor = __webpack_require__(13)
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(13)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(13)

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(13)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(19)
var Transform = __webpack_require__(7)
var inherits = __webpack_require__(1)

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {
	"sha224WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha224",
		"id": "302d300d06096086480165030402040500041c"
	},
	"RSA-SHA224": {
		"sign": "ecdsa/rsa",
		"hash": "sha224",
		"id": "302d300d06096086480165030402040500041c"
	},
	"sha256WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha256",
		"id": "3031300d060960864801650304020105000420"
	},
	"RSA-SHA256": {
		"sign": "ecdsa/rsa",
		"hash": "sha256",
		"id": "3031300d060960864801650304020105000420"
	},
	"sha384WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha384",
		"id": "3041300d060960864801650304020205000430"
	},
	"RSA-SHA384": {
		"sign": "ecdsa/rsa",
		"hash": "sha384",
		"id": "3041300d060960864801650304020205000430"
	},
	"sha512WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha512",
		"id": "3051300d060960864801650304020305000440"
	},
	"RSA-SHA512": {
		"sign": "ecdsa/rsa",
		"hash": "sha512",
		"id": "3051300d060960864801650304020305000440"
	},
	"RSA-SHA1": {
		"sign": "rsa",
		"hash": "sha1",
		"id": "3021300906052b0e03021a05000414"
	},
	"ecdsa-with-SHA1": {
		"sign": "ecdsa",
		"hash": "sha1",
		"id": ""
	},
	"sha256": {
		"sign": "ecdsa",
		"hash": "sha256",
		"id": ""
	},
	"sha224": {
		"sign": "ecdsa",
		"hash": "sha224",
		"id": ""
	},
	"sha384": {
		"sign": "ecdsa",
		"hash": "sha384",
		"id": ""
	},
	"sha512": {
		"sign": "ecdsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-SHA": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA-SHA1": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA-WITH-SHA224": {
		"sign": "dsa",
		"hash": "sha224",
		"id": ""
	},
	"DSA-SHA224": {
		"sign": "dsa",
		"hash": "sha224",
		"id": ""
	},
	"DSA-WITH-SHA256": {
		"sign": "dsa",
		"hash": "sha256",
		"id": ""
	},
	"DSA-SHA256": {
		"sign": "dsa",
		"hash": "sha256",
		"id": ""
	},
	"DSA-WITH-SHA384": {
		"sign": "dsa",
		"hash": "sha384",
		"id": ""
	},
	"DSA-SHA384": {
		"sign": "dsa",
		"hash": "sha384",
		"id": ""
	},
	"DSA-WITH-SHA512": {
		"sign": "dsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-SHA512": {
		"sign": "dsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-RIPEMD160": {
		"sign": "dsa",
		"hash": "rmd160",
		"id": ""
	},
	"ripemd160WithRSA": {
		"sign": "rsa",
		"hash": "rmd160",
		"id": "3021300906052b2403020105000414"
	},
	"RSA-RIPEMD160": {
		"sign": "rsa",
		"hash": "rmd160",
		"id": "3021300906052b2403020105000414"
	},
	"md5WithRSAEncryption": {
		"sign": "rsa",
		"hash": "md5",
		"id": "3020300c06082a864886f70d020505000410"
	},
	"RSA-MD5": {
		"sign": "rsa",
		"hash": "md5",
		"id": "3020300c06082a864886f70d020505000410"
	}
};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = {
	"1.3.132.0.10": "secp256k1",
	"1.3.132.0.33": "p224",
	"1.2.840.10045.3.1.1": "p192",
	"1.2.840.10045.3.1.7": "p256",
	"1.3.132.0.34": "p384",
	"1.3.132.0.35": "p521"
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1)
var Legacy = __webpack_require__(97)
var Base = __webpack_require__(7)
var Buffer = __webpack_require__(8).Buffer
var md5 = __webpack_require__(22)
var RIPEMD160 = __webpack_require__(35)

var sha = __webpack_require__(36)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(17);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(2);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(60);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var common = __webpack_require__(16);
var shaCommon = __webpack_require__(58);
var assert = __webpack_require__(4);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var common = __webpack_require__(16);
var assert = __webpack_require__(4);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 59 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(2);
var brorand = __webpack_require__(43);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {


exports.pbkdf2 = __webpack_require__(134)

exports.pbkdf2Sync = __webpack_require__(65)


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 64 */
/***/ (function(module, exports) {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(22)
var rmd160 = __webpack_require__(35)
var sha = __webpack_require__(36)

var checkParameters = __webpack_require__(64)
var defaultEncoding = __webpack_require__(63)
var Buffer = __webpack_require__(8).Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}
function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
  if (alg === 'md5') return md5
  return shaFunc

  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
}

module.exports = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  checkParameters(iterations, keylen)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var U, j, destPos, len

  var hLen = hmac.size
  var T = Buffer.allocUnsafe(hLen)
  var l = Math.ceil(keylen / hLen)
  var r = keylen - (l - 1) * hLen

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    U = hmac.run(block1, hmac.ipad1)

    U.copy(T, 0, 0, hLen)

    for (j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    destPos = (i - 1) * hLen
    len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(15);
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(2);
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var processNextTick = __webpack_require__(26);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(59);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(31).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(72);
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = __webpack_require__(8).Buffer;
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]' || Buffer.isBuffer(obj);
}
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(14);
util.inherits = __webpack_require__(1);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(154);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(140);
var destroyImpl = __webpack_require__(71);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(9);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(38).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(9);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && Object.getPrototypeOf(chunk) !== Buffer.prototype && !state.objectMode) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(38).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(9);

/*<replacement>*/
var util = __webpack_require__(14);
util.inherits = __webpack_require__(1);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var processNextTick = __webpack_require__(26);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(31).EventEmitter;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(10)

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(1)
var Hash = __webpack_require__(10)

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(17)
exports.createHash = exports.Hash = __webpack_require__(15)
exports.createHmac = exports.Hmac = __webpack_require__(54)

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(__webpack_require__(91)))
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(62)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(88)
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = __webpack_require__(103)
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = __webpack_require__(92)
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = __webpack_require__(95)

var publicEncrypt = __webpack_require__(135)

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(11);
var inherits = __webpack_require__(1);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(151).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(12).Reporter;
var EncoderBuffer = __webpack_require__(12).EncoderBuffer;
var DecoderBuffer = __webpack_require__(12).DecoderBuffer;
var assert = __webpack_require__(4);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(40);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(41);
decoders.pem = __webpack_require__(81);


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Buffer = __webpack_require__(0).Buffer;

var DERDecoder = __webpack_require__(41);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(42);
encoders.pem = __webpack_require__(83);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

var DEREncoder = __webpack_require__(42);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(19)
var Transform = __webpack_require__(7)
var inherits = __webpack_require__(1)
var modes = __webpack_require__(20)
var StreamCipher = __webpack_require__(51)
var AuthCipher = __webpack_require__(44)
var ebtk = __webpack_require__(24)

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: __webpack_require__(49),
  CBC: __webpack_require__(45),
  CFB: __webpack_require__(46),
  CFB8: __webpack_require__(48),
  CFB1: __webpack_require__(47),
  OFB: __webpack_require__(50),
  CTR: __webpack_require__(21),
  GCM: __webpack_require__(21)
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(19)
var Transform = __webpack_require__(7)
var inherits = __webpack_require__(1)
var modes = __webpack_require__(20)
var ebtk = __webpack_require__(24)
var StreamCipher = __webpack_require__(51)
var AuthCipher = __webpack_require__(44)
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: __webpack_require__(49),
  CBC: __webpack_require__(45),
  CFB: __webpack_require__(46),
  CFB8: __webpack_require__(48),
  CFB1: __webpack_require__(47),
  OFB: __webpack_require__(50),
  CTR: __webpack_require__(21),
  GCM: __webpack_require__(21)
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var ebtk = __webpack_require__(24)
var aes = __webpack_require__(28)
var DES = __webpack_require__(89)
var desModes = __webpack_require__(90)
var aesModes = __webpack_require__(20)
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var CipherBase = __webpack_require__(7)
var des = __webpack_require__(30)
var inherits = __webpack_require__(1)

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 90 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(52)


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(15)
var stream = __webpack_require__(37)
var inherits = __webpack_require__(1)
var sign = __webpack_require__(93)
var verify = __webpack_require__(94)

var algorithms = __webpack_require__(52)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(54)
var crt = __webpack_require__(29)
var EC = __webpack_require__(3).ec
var BN = __webpack_require__(2)
var parseKeys = __webpack_require__(25)
var curves = __webpack_require__(53)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(2)
var EC = __webpack_require__(3).ec
var parseKeys = __webpack_require__(25)
var curves = __webpack_require__(53)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(3);
var BN = __webpack_require__(2);

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var intSize = 4
var zeroBuffer = new Buffer(intSize)
zeroBuffer.fill(0)

var charSize = 8
var hashSize = 16

function toArray (buf) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize))
    buf = Buffer.concat([buf, zeroBuffer], len)
  }

  var arr = new Array(buf.length >>> 2)
  for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
    arr[j] = buf.readInt32LE(i)
  }

  return arr
}

module.exports = function hash (buf, fn) {
  var arr = fn(toArray(buf), buf.length * charSize)
  buf = new Buffer(hashSize)
  for (var i = 0; i < arr.length; i++) {
    buf.writeInt32LE(arr[i], i << 2, true)
  }
  return buf
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(1)
var Buffer = __webpack_require__(8).Buffer

var Base = __webpack_require__(7)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(1);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(1);

var des = __webpack_require__(30);
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(4);
var inherits = __webpack_require__(1);

var des = __webpack_require__(30);
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(55)
var primes = __webpack_require__(105)

var DH = __webpack_require__(104)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(2);
var MillerRabin = __webpack_require__(60);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(55);
var randomBytes = __webpack_require__(17);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = {
	"modp1": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
	},
	"modp2": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
	},
	"modp5": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
	},
	"modp14": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
	},
	"modp15": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
	},
	"modp16": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
	},
	"modp17": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
	},
	"modp18": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
	}
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(23);
var elliptic = __webpack_require__(3);
var BN = __webpack_require__(2);
var inherits = __webpack_require__(1);
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(23);
var BN = __webpack_require__(2);
var inherits = __webpack_require__(1);
var Base = curve.base;

var elliptic = __webpack_require__(3);
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(23);
var elliptic = __webpack_require__(3);
var BN = __webpack_require__(2);
var inherits = __webpack_require__(1);
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(32);
var elliptic = __webpack_require__(3);

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(117);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var HmacDRBG = __webpack_require__(127);
var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(112);
var Signature = __webpack_require__(113);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);

var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(32);
var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(115);
var Signature = __webpack_require__(116);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(2);
var elliptic = __webpack_require__(3);
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(2);
var minAssert = __webpack_require__(4);
var minUtils = __webpack_require__(61);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = {
	"name": "elliptic",
	"version": "6.4.0",
	"description": "EC cryptography",
	"main": "lib/elliptic.js",
	"files": [
		"lib"
	],
	"scripts": {
		"jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"lint": "npm run jscs && npm run jshint",
		"unit": "istanbul test _mocha --reporter=spec test/index.js",
		"test": "npm run lint && npm run unit",
		"version": "grunt dist && git add dist/"
	},
	"repository": {
		"type": "git",
		"url": "git@github.com:indutny/elliptic"
	},
	"keywords": [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	],
	"author": "Fedor Indutny <fedor@indutny.com>",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/indutny/elliptic/issues"
	},
	"homepage": "https://github.com/indutny/elliptic",
	"devDependencies": {
		"brfs": "^1.4.3",
		"coveralls": "^2.11.3",
		"grunt": "^0.4.5",
		"grunt-browserify": "^5.0.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-connect": "^1.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^1.0.1",
		"grunt-mocha-istanbul": "^3.0.1",
		"grunt-saucelabs": "^8.6.2",
		"istanbul": "^0.4.2",
		"jscs": "^2.9.0",
		"jshint": "^2.6.0",
		"mocha": "^2.1.0"
	},
	"dependencies": {
		"bn.js": "^4.4.0",
		"brorand": "^1.0.1",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.0",
		"inherits": "^2.0.1",
		"minimalistic-assert": "^1.0.0",
		"minimalistic-crypto-utils": "^1.0.0"
	}
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var Transform = __webpack_require__(37).Transform
var inherits = __webpack_require__(1)

function HashBase (blockSize) {
  Transform.call(this)

  this._block = new Buffer(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)
    this.update(chunk)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this._digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function (data) {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)
  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var assert = __webpack_require__(4);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var common = __webpack_require__(16);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(124);
exports.sha224 = __webpack_require__(125);
exports.sha256 = __webpack_require__(56);
exports.sha384 = __webpack_require__(126);
exports.sha512 = __webpack_require__(57);


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var common = __webpack_require__(16);
var shaCommon = __webpack_require__(58);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);
var SHA256 = __webpack_require__(56);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(5);

var SHA512 = __webpack_require__(57);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(32);
var utils = __webpack_require__(61);
var assert = __webpack_require__(4);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 128 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 129 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = {
	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(11)

exports.certificate = __webpack_require__(132)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(11)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m
var evp = __webpack_require__(24)
var ciphers = __webpack_require__(28)
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(64)
var defaultEncoding = __webpack_require__(63)
var sync = __webpack_require__(65)
var Buffer = __webpack_require__(8).Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}
function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  checkParameters(iterations, keylen)
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]
  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) {
      return browserPbkdf2(password, salt, iterations, keylen, algo)
    } else {
      return sync(password, salt, iterations, keylen, digest)
    }
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(6)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(137);
exports.privateDecrypt = __webpack_require__(136);

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(25);
var mgf = __webpack_require__(66);
var xor = __webpack_require__(68);
var bn = __webpack_require__(2);
var crt = __webpack_require__(29);
var createHash = __webpack_require__(15);
var withPublic = __webpack_require__(67);
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(25);
var randomBytes = __webpack_require__(17);
var createHash = __webpack_require__(15);
var mgf = __webpack_require__(66);
var xor = __webpack_require__(68);
var bn = __webpack_require__(2);
var withPublic = __webpack_require__(67);
var crt = __webpack_require__(29);

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(9);


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(70);

/*<replacement>*/
var util = __webpack_require__(14);
util.inherits = __webpack_require__(1);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(8).Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(34).PassThrough


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(34).Transform


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(33);


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(6)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(10)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(10)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1)
var Sha256 = __webpack_require__(73)
var Hash = __webpack_require__(10)

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(1)
var SHA512 = __webpack_require__(74)
var Hash = __webpack_require__(10)

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(144);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var indexOf = __webpack_require__(129);

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 153 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 154 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

"undefined" === typeof importScripts && "undefined" !== typeof WorkerGlobalScope && undefined instanceof WorkerGlobalScope && (undefined.importScripts = function () {
  throw Error("importScripts is a stub");
});var e;e || (e = eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));var aa = {},
    k;for (k in e) {
  e.hasOwnProperty(k) && (aa[k] = e[k]);
}var ba = !1,
    l = !1,
    m = !1,
    ca = !1;
if (e.ENVIRONMENT) {
  if ("WEB" === e.ENVIRONMENT) ba = !0;else if ("WORKER" === e.ENVIRONMENT) l = !0;else if ("NODE" === e.ENVIRONMENT) m = !0;else if ("SHELL" === e.ENVIRONMENT) ca = !0;else throw Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
} else ba = "object" === (typeof window === "undefined" ? "undefined" : _typeof(window)), l = "function" === typeof importScripts, m = "object" === (typeof process === "undefined" ? "undefined" : _typeof(process)) && "function" === "function" && !ba && !l, ca = !ba && !m && !l;
if (m) {
  e.print || (e.print = console.log);e.printErr || (e.printErr = console.warn);var da, ea;e.read = function (a, b) {
    da || (da = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())));ea || (ea = __webpack_require__(27));a = ea.normalize(a);var c = da.readFileSync(a);return b ? c : c.toString();
  };e.readBinary = function (a) {
    a = e.read(a, !0);a.buffer || (a = new Uint8Array(a));assert(a.buffer);return a;
  };e.load = function (a) {
    fa(read(a));
  };e.thisProgram || (e.thisProgram = 1 < process.argv.length ? process.argv[1].replace(/\\/g, "/") : "unknown-program");e.arguments = process.argv.slice(2);"undefined" !== typeof module && (module.exports = e);process.on("uncaughtException", function (a) {
    if (!(a instanceof ga)) throw a;
  });e.inspect = function () {
    return "[Emscripten Module object]";
  };
} else if (ca) e.print || (e.print = print), "undefined" != typeof printErr && (e.printErr = printErr), e.read = "undefined" != typeof read ? read : function () {
  throw "no read() available";
}, e.readBinary = function (a) {
  if ("function" === typeof readbuffer) return new Uint8Array(readbuffer(a));a = read(a, "binary");assert("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)));return a;
}, "undefined" != typeof scriptArgs ? e.arguments = scriptArgs : "undefined" != typeof arguments && (e.arguments = arguments), eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined");else if (ba || l) e.read = function (a) {
  var b = new XMLHttpRequest();b.open("GET", a, !1);b.send(null);return b.responseText;
}, e.readAsync = function (a, b, c) {
  var d = new XMLHttpRequest();d.open("GET", a, !0);d.responseType = "arraybuffer";d.onload = function () {
    200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
  };d.onerror = c;d.send(null);
}, "undefined" != typeof arguments && (e.arguments = arguments), "undefined" !== typeof console ? (e.print || (e.print = function (a) {
  console.log(a);
}), e.printErr || (e.printErr = function (a) {
  console.warn(a);
})) : e.print || (e.print = function () {}), l && (e.load = importScripts), "undefined" === typeof e.setWindowTitle && (e.setWindowTitle = function (a) {
  document.title = a;
});else throw "Unknown runtime environment. Where are we?";function fa(a) {
  eval.call(null, a);
}!e.load && e.read && (e.load = function (a) {
  fa(e.read(a));
});e.print || (e.print = function () {});
e.printErr || (e.printErr = e.print);e.arguments || (e.arguments = []);e.thisProgram || (e.thisProgram = "./this.program");e.print = e.print;e.ba = e.printErr;e.preRun = [];e.postRun = [];for (k in aa) {
  aa.hasOwnProperty(k) && (e[k] = aa[k]);
}var aa = void 0,
    t = { Wa: function Wa(a) {
    tempRet0 = a;
  }, Na: function Na() {
    return tempRet0;
  }, Q: function Q() {
    return p;
  }, I: function I(a) {
    p = a;
  }, va: function va(a) {
    switch (a) {case "i1":case "i8":
        return 1;case "i16":
        return 2;case "i32":
        return 4;case "i64":
        return 8;case "float":
        return 4;case "double":
        return 8;default:
        return "*" === a[a.length - 1] ? t.V : "i" === a[0] ? (a = parseInt(a.substr(1)), assert(0 === a % 8), a / 8) : 0;}
  }, Ma: function Ma(a) {
    return Math.max(t.va(a), t.V);
  }, Wc: 16, rd: function rd(a, b) {
    "double" === b || "i64" === b ? a & 7 && (assert(4 === (a & 7)), a += 4) : assert(0 === (a & 3));return a;
  }, ed: function ed(a, b, c) {
    return c || "i64" != a && "double" != a ? a ? Math.min(b || (a ? t.Ma(a) : 0), t.V) : Math.min(b, 8) : 8;
  }, t: function t(a, b, c) {
    return c && c.length ? e["dynCall_" + a].apply(null, [b].concat(c)) : e["dynCall_" + a].call(null, b);
  }, N: [], Ha: function Ha(a) {
    for (var b = 0; b < t.N.length; b++) {
      if (!t.N[b]) return t.N[b] = a, 2 * (1 + b);
    }throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
  }, Sa: function Sa(a) {
    t.N[(a - 2) / 2] = null;
  }, A: function A(a) {
    t.A.fa || (t.A.fa = {});t.A.fa[a] || (t.A.fa[a] = 1, e.ba(a));
  }, Y: {}, jd: function jd(a, b) {
    assert(b);t.Y[b] || (t.Y[b] = {});var c = t.Y[b];c[a] || (c[a] = 1 === b.length ? function () {
      return t.t(b, a);
    } : 2 === b.length ? function (c) {
      return t.t(b, a, [c]);
    } : function () {
      return t.t(b, a, Array.prototype.slice.call(arguments));
    });return c[a];
  }, gd: function gd() {
    throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
  }, P: function P(a) {
    var b = p;p = p + a | 0;p = p + 15 & -16;return b;
  }, ga: function ga(a) {
    var b = v;v = v + a | 0;v = v + 15 & -16;return b;
  },
  qa: function qa(a) {
    var b = w[x >> 2];a = (b + a + 15 | 0) & -16;w[x >> 2] = a;if (a = a >= ha) ia(), a = !0;return a ? (w[x >> 2] = b, 0) : b;
  }, ma: function ma(a, b) {
    return Math.ceil(a / (b ? b : 16)) * (b ? b : 16);
  }, qd: function qd(a, b, c) {
    return c ? +(a >>> 0) + 4294967296 * +(b >>> 0) : +(a >>> 0) + 4294967296 * +(b | 0);
  }, L: 8, V: 4, Xc: 0 };e.Runtime = t;t.addFunction = t.Ha;t.removeFunction = t.Sa;var ja = 0;function assert(a, b) {
  a || z("Assertion failed: " + b);
}
function ka(a) {
  var b = e["_" + a];if (!b) try {
    b = eval("_" + a);
  } catch (c) {}assert(b, "Cannot call unknown function " + a + " (perhaps LLVM optimizations or closure removed it?)");return b;
}var la, ma;
(function () {
  function a(a) {
    a = a.toString().match(f).slice(1);return { arguments: a[0], body: a[1], returnValue: a[2] };
  }function b() {
    if (!g) {
      g = {};for (var b in c) {
        c.hasOwnProperty(b) && (g[b] = a(c[b]));
      }
    }
  }var c = { stackSave: function stackSave() {
      t.Q();
    }, stackRestore: function stackRestore() {
      t.I();
    }, arrayToC: function arrayToC(a) {
      var b = t.P(a.length);na(a, b);return b;
    }, stringToC: function stringToC(a) {
      var b = 0;if (null !== a && void 0 !== a && 0 !== a) {
        var c = (a.length << 2) + 1,
            b = t.P(c);oa(a, b, c);
      }return b;
    } },
      d = { string: c.stringToC, array: c.arrayToC };ma = function ma(a, b, c, f, g) {
    a = ka(a);var y = [],
        H = 0;if (f) for (var A = 0; A < f.length; A++) {
      var I = d[c[A]];I ? (0 === H && (H = t.Q()), y[A] = I(f[A])) : y[A] = f[A];
    }c = a.apply(null, y);"string" === b && (c = B(c));if (0 !== H) {
      if (g && g.async) {
        EmterpreterAsync.Zc.push(function () {
          t.I(H);
        });return;
      }t.I(H);
    }return c;
  };var f = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/,
      g = null;la = function la(c, d, f) {
    f = f || [];var r = ka(c);c = f.every(function (a) {
      return "number" === a;
    });var q = "string" !== d;if (q && c) return r;var y = f.map(function (a, b) {
      return "$" + b;
    });d = "(function(" + y.join(",") + ") {";var H = f.length;if (!c) {
      b();d += "var stack = " + g.stackSave.body + ";";for (var A = 0; A < H; A++) {
        var I = y[A],
            O = f[A];"number" !== O && (O = g[O + "ToC"], d += "var " + O.arguments + " = " + I + ";", d += O.body + ";", d += I + "=(" + O.returnValue + ");");
      }
    }f = a(function () {
      return r;
    }).returnValue;d += "var ret = " + f + "(" + y.join(",") + ");";q || (f = a(function () {
      return B;
    }).returnValue, d += "ret = " + f + "(ret);");c || (b(), d += g.stackRestore.body.replace("()", "(stack)") + ";");return eval(d + "return ret})");
  };
})();e.ccall = ma;e.cwrap = la;
function pa(a, b, c) {
  c = c || "i8";"*" === c.charAt(c.length - 1) && (c = "i32");switch (c) {case "i1":
      C[a >> 0] = b;break;case "i8":
      C[a >> 0] = b;break;case "i16":
      qa[a >> 1] = b;break;case "i32":
      w[a >> 2] = b;break;case "i64":
      tempI64 = [b >>> 0, (tempDouble = b, 1 <= +ra(tempDouble) ? 0 < tempDouble ? (sa(+ta(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+ua((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)];w[a >> 2] = tempI64[0];w[a + 4 >> 2] = tempI64[1];break;case "float":
      va[a >> 2] = b;break;case "double":
      wa[a >> 3] = b;break;default:
      z("invalid type for setValue: " + c);}
}e.setValue = pa;function xa(a, b) {
  b = b || "i8";"*" === b.charAt(b.length - 1) && (b = "i32");switch (b) {case "i1":
      return C[a >> 0];case "i8":
      return C[a >> 0];case "i16":
      return qa[a >> 1];case "i32":
      return w[a >> 2];case "i64":
      return w[a >> 2];case "float":
      return va[a >> 2];case "double":
      return wa[a >> 3];default:
      z("invalid type for setValue: " + b);}return null;
}e.getValue = xa;e.ALLOC_NORMAL = 0;e.ALLOC_STACK = 1;e.ALLOC_STATIC = 2;e.ALLOC_DYNAMIC = 3;e.ALLOC_NONE = 4;
function D(a, b, c, d) {
  var f, g;"number" === typeof a ? (f = !0, g = a) : (f = !1, g = a.length);var h = "string" === typeof b ? b : null;c = 4 == c ? d : ["function" === typeof E ? E : t.ga, t.P, t.ga, t.qa][void 0 === c ? 2 : c](Math.max(g, h ? 1 : b.length));if (f) {
    d = c;assert(0 == (c & 3));for (a = c + (g & -4); d < a; d += 4) {
      w[d >> 2] = 0;
    }for (a = c + g; d < a;) {
      C[d++ >> 0] = 0;
    }return c;
  }if ("i8" === h) return a.subarray || a.slice ? F.set(a, c) : F.set(new Uint8Array(a), c), c;d = 0;for (var n, u; d < g;) {
    var r = a[d];"function" === typeof r && (r = t.kd(r));f = h || b[d];0 === f ? d++ : ("i64" == f && (f = "i32"), pa(c + d, r, f), u !== f && (n = t.va(f), u = f), d += n);
  }return c;
}e.allocate = D;e.getMemory = function (a) {
  return ya ? za ? E(a) : t.qa(a) : t.ga(a);
};function B(a, b) {
  if (0 === b || !a) return "";for (var c = 0, d, f = 0;;) {
    d = F[a + f >> 0];c |= d;if (0 == d && !b) break;f++;if (b && f == b) break;
  }b || (b = f);d = "";if (128 > c) {
    for (; 0 < b;) {
      c = String.fromCharCode.apply(String, F.subarray(a, a + Math.min(b, 1024))), d = d ? d + c : c, a += 1024, b -= 1024;
    }return d;
  }return e.UTF8ToString(a);
}e.Pointer_stringify = B;e.AsciiToString = function (a) {
  for (var b = "";;) {
    var c = C[a++ >> 0];if (!c) return b;b += String.fromCharCode(c);
  }
};
e.stringToAscii = function (a, b) {
  return Aa(a, b, !1);
};var Ba = "undefined" !== typeof TextDecoder ? new TextDecoder("utf8") : void 0;
function Ca(a, b) {
  for (var c = b; a[c];) {
    ++c;
  }if (16 < c - b && a.subarray && Ba) return Ba.decode(a.subarray(b, c));for (var d, f, g, h, n, u, c = "";;) {
    d = a[b++];if (!d) return c;d & 128 ? (f = a[b++] & 63, 192 == (d & 224) ? c += String.fromCharCode((d & 31) << 6 | f) : (g = a[b++] & 63, 224 == (d & 240) ? d = (d & 15) << 12 | f << 6 | g : (h = a[b++] & 63, 240 == (d & 248) ? d = (d & 7) << 18 | f << 12 | g << 6 | h : (n = a[b++] & 63, 248 == (d & 252) ? d = (d & 3) << 24 | f << 18 | g << 12 | h << 6 | n : (u = a[b++] & 63, d = (d & 1) << 30 | f << 24 | g << 18 | h << 12 | n << 6 | u))), 65536 > d ? c += String.fromCharCode(d) : (d -= 65536, c += String.fromCharCode(55296 | d >> 10, 56320 | d & 1023)))) : c += String.fromCharCode(d);
  }
}e.UTF8ArrayToString = Ca;e.UTF8ToString = function (a) {
  return Ca(F, a);
};
function Da(a, b, c, d) {
  if (!(0 < d)) return 0;var f = c;d = c + d - 1;for (var g = 0; g < a.length; ++g) {
    var h = a.charCodeAt(g);55296 <= h && 57343 >= h && (h = 65536 + ((h & 1023) << 10) | a.charCodeAt(++g) & 1023);if (127 >= h) {
      if (c >= d) break;b[c++] = h;
    } else {
      if (2047 >= h) {
        if (c + 1 >= d) break;b[c++] = 192 | h >> 6;
      } else {
        if (65535 >= h) {
          if (c + 2 >= d) break;b[c++] = 224 | h >> 12;
        } else {
          if (2097151 >= h) {
            if (c + 3 >= d) break;b[c++] = 240 | h >> 18;
          } else {
            if (67108863 >= h) {
              if (c + 4 >= d) break;b[c++] = 248 | h >> 24;
            } else {
              if (c + 5 >= d) break;b[c++] = 252 | h >> 30;b[c++] = 128 | h >> 24 & 63;
            }b[c++] = 128 | h >> 18 & 63;
          }b[c++] = 128 | h >> 12 & 63;
        }b[c++] = 128 | h >> 6 & 63;
      }b[c++] = 128 | h & 63;
    }
  }b[c] = 0;return c - f;
}e.stringToUTF8Array = Da;function oa(a, b, c) {
  return Da(a, F, b, c);
}e.stringToUTF8 = oa;function Ea(a) {
  for (var b = 0, c = 0; c < a.length; ++c) {
    var d = a.charCodeAt(c);55296 <= d && 57343 >= d && (d = 65536 + ((d & 1023) << 10) | a.charCodeAt(++c) & 1023);127 >= d ? ++b : b = 2047 >= d ? b + 2 : 65535 >= d ? b + 3 : 2097151 >= d ? b + 4 : 67108863 >= d ? b + 5 : b + 6;
  }return b;
}e.lengthBytesUTF8 = Ea;"undefined" !== typeof TextDecoder && new TextDecoder("utf-16le");
function Fa(a) {
  return a.replace(/__Z[\w\d_]+/g, function (a) {
    var c;a: {
      if (e.___cxa_demangle) try {
        var d = a.substr(1),
            f = Ea(d) + 1,
            g = E(f);oa(d, g, f);var h = E(4),
            n = e.___cxa_demangle(g, 0, 0, h);if (0 === xa(h, "i32") && n) {
          c = B(n);break a;
        }
      } catch (u) {} finally {
        g && Ga(g), h && Ga(h), n && Ga(n);
      } else t.A("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");c = a;
    }return a === c ? a : a + " [" + c + "]";
  });
}
function Ha() {
  var a;a: {
    a = Error();if (!a.stack) {
      try {
        throw Error(0);
      } catch (b) {
        a = b;
      }if (!a.stack) {
        a = "(no stack trace available)";break a;
      }
    }a = a.stack.toString();
  }e.extraStackTrace && (a += "\n" + e.extraStackTrace());return Fa(a);
}e.stackTrace = Ha;var buffer, C, F, qa, Ia, w, Ja, va, wa, Ka, v, ya, La, p, Ma, Oa, x;Ka = v = La = p = Ma = Oa = x = 0;ya = !1;
function ia() {
  z("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + ha + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
for (var Pa = e.TOTAL_STACK || 5242880, ha = e.TOTAL_MEMORY || 16777216, G = 65536; G < ha || G < 2 * Pa;) {
  G = 16777216 > G ? 2 * G : G + 16777216;
}G !== ha && (ha = G);e.buffer ? buffer = e.buffer : buffer = new ArrayBuffer(ha);e.HEAP8 = C = new Int8Array(buffer);e.HEAP16 = qa = new Int16Array(buffer);e.HEAP32 = w = new Int32Array(buffer);e.HEAPU8 = F = new Uint8Array(buffer);e.HEAPU16 = Ia = new Uint16Array(buffer);e.HEAPU32 = Ja = new Uint32Array(buffer);e.HEAPF32 = va = new Float32Array(buffer);e.HEAPF64 = wa = new Float64Array(buffer);w[0] = 1668509029;qa[1] = 25459;
if (115 !== F[2] || 99 !== F[3]) throw "Runtime error: expected the system to be little-endian!";e.HEAP = void 0;e.buffer = buffer;e.HEAP8 = C;e.HEAP16 = qa;e.HEAP32 = w;e.HEAPU8 = F;e.HEAPU16 = Ia;e.HEAPU32 = Ja;e.HEAPF32 = va;e.HEAPF64 = wa;function Qa(a) {
  for (; 0 < a.length;) {
    var b = a.shift();if ("function" == typeof b) b();else {
      var c = b.dd;"number" === typeof c ? void 0 === b.W ? t.t("v", c) : t.t("vi", c, [b.W]) : c(void 0 === b.W ? null : b.W);
    }
  }
}var Ra = [],
    Sa = [],
    Ta = [],
    J = [],
    Ua = [],
    za = !1;function Va(a) {
  Ra.unshift(a);
}e.addOnPreRun = Va;e.addOnInit = function (a) {
  Sa.unshift(a);
};
e.addOnPreMain = function (a) {
  Ta.unshift(a);
};e.addOnExit = function (a) {
  J.unshift(a);
};function Wa(a) {
  Ua.unshift(a);
}e.addOnPostRun = Wa;function Xa(a, b, c) {
  c = Array(0 < c ? c : Ea(a) + 1);a = Da(a, c, 0, c.length);b && (c.length = a);return c;
}e.intArrayFromString = Xa;e.intArrayToString = function (a) {
  for (var b = [], c = 0; c < a.length; c++) {
    var d = a[c];255 < d && (d &= 255);b.push(String.fromCharCode(d));
  }return b.join("");
};
e.writeStringToMemory = function (a, b, c) {
  t.A("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");var d, f;c && (f = b + Ea(a), d = C[f]);oa(a, b, Infinity);c && (C[f] = d);
};function na(a, b) {
  C.set(a, b);
}e.writeArrayToMemory = na;function Aa(a, b, c) {
  for (var d = 0; d < a.length; ++d) {
    C[b++ >> 0] = a.charCodeAt(d);
  }c || (C[b >> 0] = 0);
}e.writeAsciiToMemory = Aa;Math.imul && -5 === Math.imul(4294967295, 5) || (Math.imul = function (a, b) {
  var c = a & 65535,
      d = b & 65535;return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16) | 0;
});Math.ld = Math.imul;
Math.clz32 || (Math.clz32 = function (a) {
  a = a >>> 0;for (var b = 0; 32 > b; b++) {
    if (a & 1 << 31 - b) return b;
  }return 32;
});Math.bd = Math.clz32;Math.trunc || (Math.trunc = function (a) {
  return 0 > a ? Math.ceil(a) : Math.floor(a);
});Math.trunc = Math.trunc;var ra = Math.abs,
    ua = Math.ceil,
    ta = Math.floor,
    sa = Math.min,
    Ya = 0,
    Za = null,
    $a = null;function ab() {
  Ya++;e.monitorRunDependencies && e.monitorRunDependencies(Ya);
}e.addRunDependency = ab;
function bb() {
  Ya--;e.monitorRunDependencies && e.monitorRunDependencies(Ya);if (0 == Ya && (null !== Za && (clearInterval(Za), Za = null), $a)) {
    var a = $a;$a = null;a();
  }
}e.removeRunDependency = bb;e.preloadedImages = {};e.preloadedAudios = {};Ka = 8;v = Ka + 40448;Sa.push();
D([8, 201, 188, 243, 103, 230, 9, 106, 59, 167, 202, 132, 133, 174, 103, 187, 43, 248, 148, 254, 114, 243, 110, 60, 241, 54, 29, 95, 58, 245, 79, 165, 209, 130, 230, 173, 127, 82, 14, 81, 31, 108, 62, 43, 140, 104, 5, 155, 107, 189, 65, 251, 171, 217, 131, 31, 121, 33, 126, 19, 25, 205, 224, 91, 34, 174, 40, 215, 152, 47, 138, 66, 205, 101, 239, 35, 145, 68, 55, 113, 47, 59, 77, 236, 207, 251, 192, 181, 188, 219, 137, 129, 165, 219, 181, 233, 56, 181, 72, 243, 91, 194, 86, 57, 25, 208, 5, 182, 241, 17, 241, 89, 155, 79, 25, 175, 164, 130, 63, 146, 24, 129, 109, 218, 213, 94, 28, 171, 66, 2, 3, 163, 152, 170, 7, 216, 190, 111, 112, 69, 1, 91, 131, 18, 140, 178, 228, 78, 190, 133, 49, 36, 226, 180, 255, 213, 195, 125, 12, 85, 111, 137, 123, 242, 116, 93, 190, 114, 177, 150, 22, 59, 254, 177, 222, 128, 53, 18, 199, 37, 167, 6, 220, 155, 148, 38, 105, 207, 116, 241, 155, 193, 210, 74, 241, 158, 193, 105, 155, 228, 227, 37, 79, 56, 134, 71, 190, 239, 181, 213, 140, 139, 198, 157, 193, 15, 101, 156, 172, 119, 204, 161, 12, 36, 117, 2, 43, 89, 111, 44, 233, 45, 131, 228, 166, 110, 170, 132, 116, 74, 212, 251, 65, 189, 220, 169, 176, 92, 181, 83, 17, 131, 218, 136, 249, 118, 171, 223, 102, 238, 82, 81, 62, 152, 16, 50, 180, 45, 109, 198, 49, 168, 63, 33, 251, 152, 200, 39, 3, 176, 228, 14, 239, 190, 199, 127, 89, 191, 194, 143, 168, 61, 243, 11, 224, 198, 37, 167, 10, 147, 71, 145, 167, 213, 111, 130, 3, 224, 81, 99, 202, 6, 112, 110, 14, 10, 103, 41, 41, 20, 252, 47, 210, 70, 133, 10, 183, 39, 38, 201, 38, 92, 56, 33, 27, 46, 237, 42, 196, 90, 252, 109, 44, 77, 223, 179, 149, 157, 19, 13, 56, 83, 222, 99, 175, 139, 84, 115, 10, 101, 168, 178, 119, 60, 187, 10, 106, 118, 230, 174, 237, 71, 46, 201, 194, 129, 59, 53, 130, 20, 133, 44, 114, 146, 100, 3, 241, 76, 161, 232, 191, 162, 1, 48, 66, 188, 75, 102, 26, 168, 145, 151, 248, 208, 112, 139, 75, 194, 48, 190, 84, 6, 163, 81, 108, 199, 24, 82, 239, 214, 25, 232, 146, 209, 16, 169, 101, 85, 36, 6, 153, 214, 42, 32, 113, 87, 133, 53, 14, 244, 184, 209, 187, 50, 112, 160, 106, 16, 200, 208, 210, 184, 22, 193, 164, 25, 83, 171, 65, 81, 8, 108, 55, 30, 153, 235, 142, 223, 76, 119, 72, 39, 168, 72, 155, 225, 181, 188, 176, 52, 99, 90, 201, 197, 179, 12, 28, 57, 203, 138, 65, 227, 74, 170, 216, 78, 115, 227, 99, 119, 79, 202, 156, 91, 163, 184, 178, 214, 243, 111, 46, 104, 252, 178, 239, 93, 238, 130, 143, 116, 96, 47, 23, 67, 111, 99, 165, 120, 114, 171, 240, 161, 20, 120, 200, 132, 236, 57, 100, 26, 8, 2, 199, 140, 40, 30, 99, 35, 250, 255, 190, 144, 233, 189, 130, 222, 235, 108, 80, 164, 21, 121, 198, 178, 247, 163, 249, 190, 43, 83, 114, 227, 242, 120, 113, 198, 156, 97, 38, 234, 206, 62, 39, 202, 7, 194, 192, 33, 199, 184, 134, 209, 30, 235, 224, 205, 214, 125, 218, 234, 120, 209, 110, 238, 127, 79, 125, 245, 186, 111, 23, 114, 170, 103, 240, 6, 166, 152, 200, 162, 197, 125, 99, 10, 174, 13, 249, 190, 4, 152, 63, 17, 27, 71, 28, 19, 53, 11, 113, 27, 132, 125, 4, 35, 245, 119, 219, 40, 147, 36, 199, 64, 123, 171, 202, 50, 188, 190, 201, 21, 10, 190, 158, 60, 76, 13, 16, 156, 196, 103, 29, 67, 182, 66, 62, 203, 190, 212, 197, 76, 42, 126, 101, 252, 156, 41, 127, 89, 236, 250, 214, 58, 171, 111, 203, 95, 23, 88, 71, 74, 140, 25, 68, 108, 47, 252, 255, 63, 251, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 0, 0, 152, 23, 248, 22, 108, 5, 202, 39, 149, 141, 226, 28, 203, 54, 255, 38, 2, 7, 11, 7, 58, 87, 138, 1, 90, 197, 186, 11, 119, 190, 159, 25, 190, 121, 0, 0, 184, 212, 16, 59, 63, 66, 31, 49, 153, 65, 85, 40, 41, 18, 237, 5, 253, 168, 8, 17, 56, 240, 239, 19, 218, 85, 70, 60, 168, 201, 157, 54, 58, 72, 0, 0, 65, 65, 54, 16, 51, 122, 73, 63, 187, 3, 138, 52, 171, 57, 183, 43, 186, 254, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 0, 0, 160, 32, 27, 40, 25, 189, 164, 63, 221, 1, 69, 58, 213, 156, 219, 21, 93, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 127, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 23, 248, 22, 108, 5, 202, 39, 149, 141, 226, 28, 203, 54, 255, 38, 2, 7, 11, 7, 58, 87, 138, 1, 90, 197, 186, 11, 119, 190, 159, 25, 190, 121, 0, 0, 184, 212, 16, 59, 63, 66, 31, 49, 153, 65, 85, 40, 41, 18, 237, 5, 253, 168, 8, 17, 56, 240, 239, 19, 218, 85, 70, 60, 168, 201, 157, 54, 58, 72, 0, 0, 249, 54, 224, 60, 78, 196, 7, 24, 8, 155, 249, 54, 96, 17, 114, 12, 181, 41, 82, 29, 226, 23, 62, 17, 147, 4, 49, 12, 150, 100, 128, 34, 48, 249, 0, 0, 114, 230, 184, 4, 214, 245, 231, 50, 182, 49, 34, 12, 77, 102, 42, 0, 101, 86, 243, 55, 168, 152, 223, 12, 254, 64, 129, 30, 203, 216, 195, 30, 143, 56, 0, 0, 228, 239, 64, 50, 166, 85, 163, 46, 124, 171, 25, 6, 119, 47, 225, 34, 232, 40, 81, 28, 41, 148, 156, 18, 91, 53, 9, 50, 129, 70, 147, 55, 139, 47, 0, 0, 214, 98, 172, 38, 234, 244, 161, 50, 13, 132, 214, 48, 234, 198, 9, 34, 247, 38, 196, 9, 155, 118, 167, 46, 77, 109, 61, 30, 185, 141, 137, 8, 172, 216, 0, 0, 188, 249, 196, 10, 183, 119, 175, 36, 206, 57, 14, 51, 128, 223, 102, 16, 61, 14, 122, 42, 203, 151, 205, 35, 57, 170, 78, 27, 151, 27, 25, 60, 189, 92, 0, 0, 218, 100, 114, 8, 160, 152, 32, 20, 90, 123, 222, 63, 4, 46, 244, 4, 168, 219, 84, 26, 24, 182, 53, 30, 49, 10, 150, 21, 137, 46, 144, 50, 235, 106, 0, 0, 190, 204, 39, 60, 55, 68, 124, 13, 76, 113, 126, 5, 211, 165, 229, 37, 224, 189, 154, 21, 125, 42, 94, 52, 154, 48, 101, 63, 49, 188, 56, 33, 212, 172, 0, 0, 55, 156, 79, 6, 171, 152, 48, 23, 240, 224, 248, 53, 13, 41, 34, 54, 173, 233, 97, 59, 216, 197, 37, 32, 67, 214, 159, 61, 41, 108, 72, 34, 51, 204, 0, 0, 203, 8, 160, 29, 37, 94, 176, 47, 27, 137, 23, 28, 249, 2, 102, 18, 86, 172, 90, 6, 195, 173, 145, 16, 239, 229, 17, 20, 42, 22, 254, 57, 74, 119, 0, 0, 27, 198, 83, 9, 39, 211, 117, 0, 131, 106, 157, 63, 183, 120, 108, 11, 55, 101, 179, 55, 94, 91, 117, 15, 36, 144, 225, 53, 218, 186, 12, 40, 132, 217, 0, 0, 168, 90, 64, 25, 60, 126, 183, 59, 221, 140, 229, 16, 152, 241, 126, 29, 176, 81, 134, 52, 13, 23, 72, 7, 125, 188, 136, 18, 93, 182, 240, 28, 135, 242, 0, 0, 129, 237, 3, 27, 75, 45, 215, 38, 242, 145, 250, 33, 148, 182, 129, 6, 58, 71, 175, 13, 151, 173, 75, 8, 88, 151, 168, 0, 98, 163, 11, 36, 176, 10, 0, 0, 14, 8, 126, 34, 227, 243, 182, 18, 228, 121, 95, 8, 207, 27, 101, 57, 49, 17, 244, 31, 37, 140, 107, 25, 164, 101, 169, 62, 80, 223, 83, 19, 146, 215, 0, 0, 88, 107, 162, 54, 127, 114, 19, 20, 92, 58, 109, 9, 246, 202, 43, 16, 234, 239, 109, 12, 163, 8, 187, 16, 56, 104, 42, 7, 27, 170, 28, 10, 30, 88, 0, 0, 10, 236, 109, 42, 120, 162, 59, 17, 156, 174, 165, 7, 110, 218, 196, 40, 178, 151, 62, 2, 135, 240, 170, 6, 1, 83, 236, 41, 103, 237, 164, 51, 15, 230, 0, 0, 33, 104, 97, 41, 57, 179, 204, 7, 190, 240, 35, 13, 145, 71, 162, 37, 18, 16, 55, 57, 213, 211, 124, 38, 219, 41, 89, 25, 121, 230, 28, 20, 227, 247, 0, 0, 195, 229, 24, 17, 168, 194, 97, 47, 25, 188, 190, 18, 209, 201, 230, 21, 252, 75, 91, 38, 211, 187, 149, 5, 68, 219, 7, 19, 145, 101, 215, 12, 202, 110, 0, 0, 104, 134, 160, 5, 224, 189, 40, 38, 68, 195, 142, 63, 142, 142, 90, 18, 58, 160, 117, 56, 210, 65, 94, 61, 146, 5, 113, 32, 158, 94, 237, 8, 1, 213, 0, 0, 46, 246, 135, 15, 133, 199, 52, 59, 112, 18, 22, 55, 24, 142, 185, 57, 16, 240, 89, 6, 77, 59, 209, 49, 215, 192, 14, 57, 111, 188, 239, 14, 98, 233, 0, 0, 55, 231, 78, 36, 190, 250, 4, 12, 229, 68, 136, 22, 119, 242, 16, 24, 254, 41, 169, 26, 59, 234, 84, 58, 15, 158, 158, 41, 240, 210, 14, 29, 169, 56, 0, 0, 60, 115, 141, 42, 224, 183, 42, 44, 158, 143, 202, 47, 216, 47, 157, 48, 255, 130, 214, 0, 130, 188, 141, 18, 136, 160, 219, 33, 69, 249, 92, 55, 130, 188, 0, 0, 240, 151, 119, 52, 19, 132, 225, 57, 1, 115, 137, 51, 185, 46, 232, 36, 174, 223, 2, 31, 198, 253, 210, 38, 74, 197, 202, 49, 18, 129, 14, 35, 242, 229, 0, 0, 113, 118, 188, 31, 197, 136, 191, 31, 45, 227, 88, 40, 20, 242, 198, 15, 116, 144, 244, 24, 94, 56, 71, 10, 32, 29, 33, 23, 217, 49, 146, 4, 61, 142, 0, 0, 236, 125, 113, 24, 144, 113, 199, 59, 167, 68, 225, 35, 169, 234, 74, 13, 185, 14, 233, 19, 78, 134, 3, 18, 100, 31, 184, 60, 179, 67, 56, 18, 154, 9, 0, 0, 178, 29, 179, 62, 202, 208, 161, 12, 15, 106, 80, 15, 226, 9, 186, 50, 143, 182, 162, 8, 66, 251, 100, 40, 150, 136, 73, 10, 141, 136, 106, 36, 168, 120, 0, 0, 67, 67, 250, 57, 142, 88, 167, 1, 211, 130, 11, 0, 118, 243, 230, 13, 84, 246, 45, 48, 156, 84, 201, 23, 207, 191, 92, 3, 212, 250, 214, 40, 18, 105, 0, 0, 149, 229, 176, 13, 222, 61, 210, 20, 182, 43, 8, 58, 126, 46, 143, 5, 167, 235, 118, 32, 5, 150, 221, 56, 124, 125, 177, 49, 118, 21, 6, 30, 134, 125, 0, 0, 232, 61, 115, 60, 234, 120, 84, 38, 41, 83, 93, 34, 131, 19, 225, 13, 41, 56, 136, 15, 181, 175, 184, 24, 229, 114, 135, 47, 33, 251, 183, 38, 185, 226, 0, 0, 252, 13, 6, 22, 20, 190, 63, 2, 160, 162, 230, 5, 8, 225, 23, 21, 118, 134, 176, 26, 16, 119, 46, 37, 132, 132, 172, 2, 22, 192, 67, 12, 197, 221, 0, 0, 168, 12, 130, 39, 219, 42, 126, 45, 15, 115, 4, 61, 170, 241, 235, 54, 65, 144, 14, 15, 50, 183, 173, 6, 25, 32, 105, 25, 131, 188, 206, 11, 13, 186, 0, 0, 8, 21, 245, 21, 255, 136, 27, 25, 16, 202, 193, 26, 245, 42, 231, 48, 216, 56, 226, 45, 92, 248, 184, 41, 162, 158, 157, 32, 177, 132, 140, 9, 130, 130, 0, 0, 175, 108, 226, 54, 191, 186, 109, 12, 237, 123, 177, 55, 11, 235, 132, 53, 98, 206, 10, 54, 194, 160, 91, 9, 232, 69, 254, 61, 85, 97, 2, 42, 248, 17, 0, 0, 250, 141, 126, 37, 231, 50, 240, 51, 79, 24, 126, 60, 104, 100, 36, 32, 9, 160, 140, 41, 178, 226, 195, 40, 217, 192, 196, 25, 30, 252, 203, 51, 98, 130, 0, 0, 106, 55, 172, 59, 99, 227, 63, 23, 131, 71, 76, 49, 202, 76, 187, 45, 87, 52, 79, 51, 22, 187, 136, 59, 111, 230, 228, 9, 68, 130, 120, 37, 253, 131, 0, 0, 111, 219, 107, 2, 44, 146, 75, 1, 73, 185, 52, 55, 30, 245, 6, 41, 124, 135, 156, 41, 51, 201, 22, 4, 104, 81, 221, 13, 104, 199, 34, 23, 130, 25, 0, 0, 155, 252, 156, 4, 19, 194, 125, 23, 107, 58, 109, 15, 35, 179, 123, 58, 235, 108, 159, 53, 83, 50, 135, 9, 32, 243, 120, 8, 83, 195, 67, 12, 148, 98, 0, 0, 76, 130, 130, 61, 72, 37, 180, 3, 101, 78, 83, 33, 23, 141, 99, 41, 223, 158, 153, 2, 27, 187, 213, 23, 60, 68, 145, 1, 88, 4, 27, 54, 18, 111, 0, 0, 208, 52, 235, 6, 32, 13, 231, 21, 184, 197, 75, 5, 66, 144, 36, 7, 57, 105, 55, 34, 245, 207, 83, 38, 117, 8, 250, 59, 172, 18, 253, 61, 79, 92, 0, 0, 41, 54, 69, 27, 11, 112, 183, 29, 48, 96, 158, 53, 3, 55, 247, 51, 69, 246, 190, 58, 136, 90, 156, 24, 66, 209, 165, 42, 130, 230, 27, 35, 58, 32, 0, 0, 132, 159, 248, 63, 20, 30, 199, 37, 69, 237, 133, 18, 113, 201, 122, 27, 104, 18, 6, 1, 125, 69, 219, 49, 108, 147, 155, 29, 151, 247, 212, 2, 15, 59, 0, 0, 203, 126, 108, 36, 119, 195, 196, 32, 151, 206, 180, 27, 249, 79, 187, 14, 157, 236, 225, 38, 33, 205, 220, 59, 129, 28, 24, 52, 64, 207, 186, 50, 42, 110, 0, 0, 32, 135, 188, 46, 123, 128, 36, 17, 200, 18, 117, 54, 70, 174, 193, 49, 250, 58, 100, 59, 195, 107, 19, 3, 216, 73, 225, 62, 251, 229, 25, 41, 97, 158, 0, 0, 126, 20, 164, 48, 207, 99, 192, 45, 30, 32, 95, 55, 253, 98, 247, 17, 39, 88, 10, 9, 41, 250, 197, 5, 246, 186, 86, 17, 122, 186, 36, 1, 167, 213, 0, 0, 255, 101, 251, 51, 224, 242, 44, 57, 248, 87, 127, 22, 30, 97, 54, 49, 244, 50, 5, 30, 217, 65, 38, 36, 196, 111, 156, 56, 234, 118, 189, 9, 181, 157, 0, 0, 198, 206, 237, 24, 175, 209, 118, 59, 84, 244, 52, 54, 180, 48, 135, 1, 161, 198, 218, 44, 192, 24, 191, 15, 82, 128, 186, 24, 248, 170, 102, 4, 197, 56, 0, 0, 8, 219, 51, 25, 236, 47, 184, 21, 100, 10, 83, 53, 138, 32, 91, 40, 40, 47, 40, 31, 157, 104, 203, 50, 104, 166, 50, 23, 118, 161, 72, 55, 73, 230, 0, 0, 57, 183, 229, 17, 213, 150, 243, 15, 215, 46, 34, 18, 255, 12, 78, 46, 224, 109, 132, 60, 27, 27, 115, 38, 47, 167, 101, 56, 162, 220, 103, 5, 94, 23, 0, 0, 149, 214, 254, 41, 251, 191, 233, 59, 198, 69, 67, 18, 183, 86, 101, 45, 172, 94, 31, 55, 127, 148, 94, 62, 78, 186, 158, 7, 143, 103, 131, 27, 80, 211, 0, 0, 22, 18, 4, 5, 199, 227, 223, 22, 166, 54, 184, 2, 161, 125, 205, 28, 63, 82, 237, 47, 112, 191, 103, 45, 40, 65, 207, 58, 125, 200, 94, 12, 117, 218, 0, 0, 114, 133, 112, 46, 97, 202, 180, 43, 173, 237, 172, 55, 185, 30, 176, 42, 233, 198, 127, 45, 208, 108, 136, 39, 241, 13, 95, 45, 220, 175, 17, 40, 248, 115, 0, 0, 48, 169, 101, 36, 199, 249, 80, 0, 219, 47, 53, 49, 90, 112, 252, 33, 37, 30, 235, 2, 42, 49, 22, 15, 87, 112, 157, 52, 165, 35, 109, 49, 113, 28, 0, 0, 181, 56, 70, 3, 179, 253, 28, 54, 113, 212, 116, 49, 237, 143, 23, 13, 121, 140, 182, 11, 9, 202, 199, 15, 113, 194, 160, 31, 61, 58, 205, 48, 145, 74, 0, 0, 231, 110, 219, 58, 150, 107, 99, 12, 126, 7, 74, 52, 201, 80, 55, 20, 120, 156, 76, 27, 66, 234, 13, 58, 54, 105, 86, 26, 204, 7, 191, 18, 78, 216, 0, 0, 210, 190, 46, 20, 155, 91, 85, 11, 152, 100, 62, 42, 210, 37, 43, 54, 253, 77, 222, 37, 213, 99, 53, 14, 42, 225, 156, 55, 30, 159, 38, 32, 37, 229, 0, 0, 16, 109, 158, 36, 62, 123, 58, 37, 35, 157, 201, 42, 235, 252, 183, 2, 246, 211, 110, 63, 23, 74, 174, 8, 27, 212, 20, 40, 153, 247, 18, 17, 212, 243, 0, 0, 63, 218, 71, 19, 1, 51, 14, 40, 48, 198, 214, 41, 51, 148, 182, 6, 252, 91, 75, 10, 102, 176, 86, 46, 186, 212, 99, 1, 188, 233, 55, 9, 67, 10, 0, 0, 7, 58, 211, 41, 27, 208, 44, 35, 180, 202, 155, 35, 42, 130, 187, 28, 78, 4, 244, 61, 54, 131, 84, 33, 144, 159, 216, 1, 103, 39, 75, 25, 48, 174, 0, 0, 166, 178, 160, 32, 61, 48, 28, 18, 199, 149, 126, 61, 119, 253, 13, 39, 28, 207, 213, 56, 246, 76, 159, 51, 252, 126, 229, 63, 88, 227, 112, 54, 185, 108, 0, 0, 202, 202, 40, 12, 228, 82, 89, 22, 167, 29, 40, 8, 243, 238, 113, 26, 24, 154, 140, 56, 12, 214, 249, 5, 94, 129, 28, 30, 245, 150, 202, 6, 220, 216, 0, 0, 122, 236, 179, 35, 168, 219, 217, 54, 108, 143, 18, 8, 59, 75, 87, 12, 125, 148, 125, 36, 128, 144, 54, 54, 198, 88, 125, 44, 243, 73, 182, 2, 236, 140, 0, 0, 111, 65, 196, 59, 152, 237, 135, 36, 40, 64, 176, 48, 252, 72, 191, 43, 167, 29, 243, 50, 64, 163, 150, 16, 89, 205, 236, 4, 126, 177, 164, 56, 73, 39, 0, 0, 142, 189, 107, 60, 139, 247, 98, 58, 87, 16, 150, 46, 151, 237, 167, 39, 245, 62, 219, 10, 63, 100, 82, 54, 3, 68, 188, 50, 217, 141, 83, 11, 204, 80, 0, 0, 64, 70, 255, 3, 62, 182, 174, 9, 229, 255, 82, 21, 149, 31, 7, 17, 83, 224, 46, 38, 216, 22, 176, 58, 156, 201, 201, 0, 236, 17, 53, 36, 61, 54, 0, 0, 233, 157, 238, 59, 252, 241, 0, 8, 182, 236, 153, 1, 2, 36, 106, 46, 69, 49, 54, 51, 95, 78, 17, 45, 83, 25, 34, 50, 28, 127, 235, 28, 226, 4, 0, 0, 200, 93, 229, 54, 91, 72, 36, 46, 148, 67, 160, 44, 186, 173, 86, 62, 111, 66, 148, 16, 1, 3, 145, 18, 168, 43, 251, 31, 49, 228, 17, 16, 49, 68, 0, 0, 179, 35, 227, 27, 187, 18, 101, 7, 3, 229, 162, 42, 231, 109, 138, 26, 166, 215, 254, 2, 89, 253, 13, 38, 233, 143, 111, 54, 148, 185, 80, 48, 176, 150, 0, 0, 168, 35, 27, 48, 117, 33, 165, 63, 173, 224, 126, 40, 194, 81, 223, 30, 171, 157, 8, 33, 228, 86, 15, 9, 38, 193, 135, 10, 155, 97, 163, 63, 34, 158, 0, 0, 174, 237, 132, 8, 20, 79, 144, 30, 207, 206, 17, 53, 126, 82, 242, 61, 192, 51, 21, 28, 38, 8, 252, 60, 119, 1, 209, 34, 132, 114, 58, 60, 47, 253, 0, 0, 228, 112, 26, 7, 252, 34, 208, 53, 93, 71, 207, 53, 215, 71, 185, 23, 205, 109, 48, 5, 28, 153, 167, 53, 237, 210, 168, 34, 243, 64, 181, 61, 141, 80, 0, 0, 132, 9, 149, 41, 220, 111, 185, 60, 237, 223, 170, 40, 59, 138, 12, 48, 78, 197, 73, 62, 204, 169, 18, 12, 119, 215, 66, 60, 206, 228, 230, 16, 76, 21, 0, 0, 17, 190, 26, 14, 219, 105, 191, 58, 246, 32, 178, 28, 150, 112, 72, 46, 218, 178, 37, 1, 76, 6, 214, 55, 56, 51, 118, 9, 68, 21, 225, 63, 219, 227, 0, 0, 99, 222, 168, 31, 82, 181, 38, 45, 20, 196, 181, 6, 15, 100, 95, 50, 211, 243, 142, 10, 110, 215, 233, 35, 67, 22, 66, 1, 141, 102, 66, 62, 242, 6, 0, 0, 73, 52, 89, 3, 216, 200, 198, 51, 253, 111, 164, 2, 185, 4, 223, 6, 246, 74, 1, 61, 129, 78, 112, 54, 120, 216, 64, 41, 247, 49, 25, 56, 172, 25, 0, 0, 49, 54, 248, 45, 78, 46, 5, 41, 163, 104, 64, 8, 208, 231, 66, 28, 172, 70, 44, 0, 101, 231, 92, 47, 254, 59, 51, 10, 154, 212, 128, 36, 121, 227, 0, 0, 99, 107, 186, 12, 75, 98, 250, 56, 94, 187, 179, 16, 63, 157, 249, 3, 10, 49, 142, 40, 58, 138, 204, 48, 8, 161, 218, 7, 62, 8, 59, 3, 116, 216, 0, 0, 243, 197, 52, 41, 1, 219, 168, 59, 171, 148, 22, 56, 48, 215, 19, 4, 64, 125, 195, 58, 64, 166, 187, 41, 120, 243, 43, 19, 174, 241, 76, 48, 114, 100, 0, 0, 56, 192, 62, 27, 176, 252, 83, 6, 118, 178, 198, 32, 185, 90, 84, 63, 217, 80, 10, 41, 188, 216, 249, 32, 72, 54, 8, 6, 212, 70, 206, 12, 172, 88, 0, 0, 121, 98, 36, 16, 196, 143, 170, 27, 161, 188, 251, 52, 2, 15, 65, 6, 2, 151, 254, 17, 166, 39, 73, 30, 135, 151, 45, 9, 87, 181, 193, 53, 99, 145, 0, 0, 12, 248, 253, 31, 87, 105, 222, 39, 182, 209, 188, 21, 104, 224, 41, 57, 67, 136, 99, 5, 221, 214, 18, 9, 198, 232, 43, 60, 124, 151, 197, 23, 75, 139, 0, 0, 54, 253, 212, 31, 25, 195, 191, 15, 107, 229, 46, 22, 24, 149, 205, 56, 249, 4, 218, 48, 234, 4, 94, 47, 63, 75, 139, 48, 52, 218, 155, 2, 173, 74, 0, 0, 221, 18, 88, 53, 11, 150, 138, 2, 42, 14, 211, 18, 213, 200, 25, 17, 61, 142, 247, 24, 1, 91, 251, 42, 182, 240, 82, 51, 191, 164, 94, 47, 41, 112, 0, 0, 39, 41, 45, 26, 172, 25, 115, 8, 199, 115, 44, 59, 144, 16, 186, 54, 71, 172, 131, 6, 140, 43, 81, 25, 221, 39, 61, 11, 122, 191, 182, 62, 238, 176, 0, 0, 209, 110, 72, 61, 14, 90, 57, 39, 164, 182, 101, 21, 146, 174, 111, 17, 87, 96, 117, 15, 99, 39, 4, 53, 9, 144, 201, 37, 185, 186, 114, 59, 207, 156, 0, 0, 141, 93, 233, 53, 181, 103, 181, 61, 36, 170, 146, 21, 90, 214, 89, 8, 36, 17, 52, 11, 128, 4, 146, 8, 97, 251, 44, 35, 90, 79, 92, 19, 47, 124, 0, 0, 202, 234, 208, 27, 157, 198, 26, 8, 122, 171, 212, 34, 174, 93, 209, 49, 208, 25, 223, 36, 242, 140, 247, 35, 90, 51, 20, 20, 208, 216, 225, 18, 154, 205, 0, 0, 204, 74, 255, 43, 214, 190, 190, 57, 246, 52, 246, 22, 187, 227, 236, 9, 1, 139, 160, 62, 76, 186, 34, 18, 21, 232, 35, 15, 122, 104, 30, 22, 69, 240, 0, 0, 198, 87, 188, 7, 143, 78, 37, 8, 191, 108, 39, 43, 143, 232, 245, 0, 73, 148, 48, 22, 79, 186, 180, 60, 132, 168, 190, 25, 59, 226, 11, 34, 9, 173, 0, 0, 184, 10, 74, 46, 182, 3, 203, 40, 60, 45, 14, 25, 205, 77, 71, 12, 123, 95, 190, 26, 167, 28, 27, 6, 40, 186, 82, 58, 190, 16, 35, 48, 67, 114, 0, 0, 2, 99, 165, 43, 202, 49, 12, 42, 46, 134, 241, 48, 235, 77, 170, 1, 245, 224, 210, 58, 167, 74, 139, 54, 234, 241, 65, 10, 207, 186, 66, 10, 209, 217, 0, 0, 41, 28, 41, 8, 234, 107, 183, 42, 174, 242, 116, 58, 103, 179, 107, 14, 23, 228, 134, 35, 201, 25, 87, 28, 41, 208, 238, 19, 11, 251, 68, 12, 181, 126, 0, 0, 58, 36, 209, 52, 19, 220, 52, 43, 219, 95, 74, 53, 143, 128, 73, 44, 2, 132, 85, 63, 24, 176, 134, 52, 28, 249, 206, 22, 231, 148, 119, 30, 80, 188, 0, 0, 138, 182, 93, 5, 162, 69, 37, 23, 159, 22, 71, 31, 108, 61, 185, 31, 95, 215, 200, 63, 55, 229, 202, 49, 238, 184, 203, 5, 156, 206, 142, 10, 6, 101, 0, 0, 159, 63, 74, 55, 154, 19, 73, 35, 144, 22, 152, 0, 119, 153, 233, 33, 194, 90, 98, 50, 246, 185, 170, 55, 19, 137, 126, 60, 23, 148, 223, 41, 49, 77, 0, 0, 167, 11, 30, 48, 4, 9, 44, 63, 84, 167, 0, 46, 109, 212, 190, 61, 203, 83, 39, 0, 30, 227, 60, 6, 107, 176, 117, 5, 38, 88, 178, 7, 36, 34, 0, 0, 218, 252, 50, 18, 73, 86, 132, 45, 188, 119, 14, 44, 233, 255, 54, 0, 183, 199, 72, 21, 47, 0, 199, 29, 191, 214, 150, 57, 118, 185, 169, 46, 60, 114, 0, 0, 95, 159, 179, 30, 118, 26, 112, 7, 128, 148, 148, 55, 77, 25, 40, 24, 38, 110, 77, 2, 34, 210, 77, 4, 146, 138, 73, 12, 87, 86, 237, 25, 232, 150, 0, 0, 177, 60, 99, 0, 122, 130, 159, 21, 50, 17, 2, 29, 218, 146, 136, 22, 87, 203, 31, 24, 72, 200, 156, 24, 12, 64, 173, 44, 234, 197, 60, 39, 222, 109, 0, 0, 52, 107, 206, 39, 169, 38, 117, 31, 53, 239, 89, 56, 179, 246, 159, 44, 128, 168, 102, 58, 134, 26, 190, 39, 201, 213, 65, 62, 193, 233, 249, 62, 136, 145, 0, 0, 197, 243, 51, 41, 52, 70, 105, 6, 36, 82, 18, 31, 69, 220, 131, 22, 8, 80, 184, 7, 57, 254, 237, 18, 60, 129, 222, 28, 109, 53, 203, 41, 111, 72, 0, 0, 83, 15, 251, 10, 107, 156, 82, 43, 121, 59, 242, 48, 243, 224, 109, 54, 98, 159, 241, 8, 179, 235, 34, 49, 72, 62, 212, 61, 90, 125, 198, 8, 225, 98, 0, 0, 40, 247, 153, 30, 137, 80, 86, 47, 78, 32, 18, 47, 249, 126, 221, 28, 103, 3, 83, 42, 221, 158, 252, 19, 102, 251, 244, 10, 37, 42, 93, 26, 121, 36, 0, 0, 255, 235, 170, 43, 91, 20, 128, 30, 131, 45, 90, 23, 37, 240, 252, 54, 90, 74, 102, 13, 246, 249, 161, 11, 197, 30, 0, 51, 35, 26, 81, 35, 215, 227, 0, 0, 154, 7, 176, 47, 80, 27, 131, 39, 156, 4, 38, 57, 200, 189, 231, 27, 145, 36, 131, 51, 218, 185, 103, 41, 49, 6, 255, 21, 245, 168, 246, 50, 57, 47, 0, 0, 186, 144, 86, 44, 192, 92, 138, 56, 15, 35, 160, 2, 34, 239, 207, 62, 155, 139, 165, 13, 158, 64, 219, 36, 218, 52, 152, 35, 225, 132, 247, 54, 234, 171, 0, 0, 115, 171, 247, 36, 203, 2, 204, 36, 119, 58, 68, 20, 167, 58, 245, 56, 98, 210, 174, 52, 20, 27, 122, 14, 106, 165, 27, 22, 159, 12, 91, 7, 163, 229, 0, 0, 66, 31, 86, 48, 241, 143, 78, 36, 19, 162, 203, 0, 106, 18, 17, 35, 191, 93, 206, 14, 233, 93, 42, 6, 193, 160, 215, 41, 71, 99, 15, 35, 120, 55, 0, 0, 134, 205, 77, 1, 143, 166, 228, 35, 88, 27, 247, 43, 37, 8, 117, 49, 31, 241, 220, 17, 129, 96, 118, 3, 245, 125, 68, 19, 69, 131, 82, 39, 56, 204, 0, 0, 115, 168, 240, 8, 103, 183, 173, 35, 70, 135, 231, 39, 63, 134, 95, 49, 5, 202, 16, 41, 250, 110, 47, 26, 181, 217, 190, 43, 61, 152, 245, 19, 174, 147, 0, 0, 17, 147, 129, 56, 173, 27, 231, 19, 114, 20, 119, 8, 132, 184, 135, 15, 11, 31, 237, 53, 51, 248, 133, 2, 117, 35, 144, 30, 92, 39, 114, 36, 146, 127, 0, 0, 37, 177, 46, 44, 94, 109, 126, 42, 74, 23, 106, 8, 39, 144, 170, 2, 18, 182, 21, 36, 20, 49, 122, 3, 93, 15, 239, 3, 251, 24, 68, 3, 160, 157, 0, 0, 250, 215, 125, 14, 40, 251, 76, 41, 57, 152, 145, 58, 141, 132, 229, 17, 9, 181, 211, 2, 75, 32, 187, 63, 165, 139, 249, 43, 239, 36, 53, 41, 191, 238, 0, 0, 153, 137, 222, 33, 107, 63, 245, 55, 45, 113, 31, 49, 233, 112, 51, 57, 154, 157, 8, 56, 197, 107, 251, 57, 158, 38, 15, 47, 195, 229, 40, 35, 154, 93, 0, 0, 235, 236, 124, 59, 254, 227, 217, 15, 15, 175, 127, 9, 226, 228, 103, 41, 115, 20, 104, 46, 189, 73, 224, 62, 111, 3, 69, 45, 157, 16, 136, 33, 122, 67, 0, 0, 225, 129, 193, 22, 13, 243, 142, 13, 39, 120, 249, 8, 247, 243, 131, 8, 135, 255, 151, 18, 103, 218, 250, 35, 155, 246, 50, 44, 186, 79, 232, 26, 145, 11, 0, 0, 242, 150, 127, 9, 120, 202, 53, 22, 205, 53, 135, 44, 116, 74, 141, 32, 53, 115, 194, 60, 104, 238, 248, 45, 60, 200, 155, 8, 169, 248, 196, 39, 239, 169, 0, 0, 228, 75, 192, 22, 193, 86, 245, 0, 44, 112, 180, 41, 214, 107, 226, 19, 183, 61, 97, 59, 58, 88, 184, 27, 149, 205, 215, 25, 21, 101, 57, 51, 20, 232, 0, 0, 126, 247, 12, 53, 132, 214, 42, 48, 219, 176, 138, 10, 21, 93, 253, 54, 7, 66, 6, 42, 126, 90, 159, 32, 83, 229, 91, 19, 135, 123, 80, 1, 216, 102, 0, 0, 166, 163, 234, 32, 190, 94, 126, 41, 210, 118, 27, 59, 173, 14, 45, 17, 148, 246, 19, 22, 77, 129, 80, 7, 63, 44, 180, 63, 191, 204, 249, 55, 207, 81, 0, 0, 90, 58, 33, 7, 162, 24, 82, 13, 185, 98, 250, 5, 158, 18, 200, 28, 11, 200, 195, 12, 25, 135, 34, 20, 243, 43, 250, 3, 148, 77, 120, 1, 172, 98, 0, 0, 69, 158, 106, 52, 3, 135, 52, 4, 252, 78, 153, 23, 96, 64, 66, 22, 229, 121, 37, 41, 30, 120, 158, 23, 57, 77, 110, 26, 52, 232, 124, 47, 111, 35, 0, 0, 43, 209, 186, 39, 97, 82, 63, 12, 236, 225, 102, 47, 58, 128, 122, 53, 133, 179, 45, 47, 113, 189, 78, 24, 191, 181, 245, 8, 145, 92, 18, 49, 19, 202, 0, 0, 242, 176, 35, 23, 26, 125, 166, 37, 104, 86, 87, 26, 68, 220, 42, 28, 99, 214, 163, 45, 170, 147, 233, 23, 193, 138, 124, 40, 112, 216, 96, 2, 170, 131, 0, 0, 78, 65, 128, 28, 229, 151, 187, 54, 253, 247, 108, 22, 139, 161, 226, 59, 20, 73, 158, 32, 17, 61, 113, 4, 172, 133, 174, 18, 193, 105, 64, 44, 236, 28, 0, 0, 59, 154, 22, 18, 75, 82, 186, 50, 13, 29, 35, 7, 81, 249, 85, 29, 144, 22, 173, 45, 215, 160, 140, 42, 229, 180, 207, 23, 130, 165, 25, 24, 67, 243, 0, 0, 169, 16, 216, 14, 49, 242, 214, 19, 92, 21, 0, 7, 207, 79, 39, 34, 79, 146, 35, 31, 199, 215, 107, 3, 149, 204, 249, 56, 53, 65, 29, 36, 105, 42, 0, 0, 40, 71, 155, 58, 35, 206, 26, 62, 124, 92, 20, 44, 95, 250, 81, 31, 102, 252, 4, 59, 83, 165, 97, 49, 62, 172, 253, 31, 15, 219, 230, 0, 249, 84, 0, 0, 176, 141, 164, 57, 108, 13, 94, 63, 254, 59, 192, 51, 166, 104, 133, 4, 159, 69, 222, 59, 109, 130, 66, 7, 121, 114, 22, 39, 91, 154, 54, 17, 15, 16, 0, 0, 9, 90, 198, 43, 88, 115, 245, 62, 192, 90, 25, 53, 63, 134, 210, 63, 183, 102, 6, 9, 48, 192, 204, 35, 236, 114, 183, 0, 168, 100, 76, 56, 217, 205, 0, 0, 180, 21, 188, 21, 210, 132, 230, 50, 105, 238, 162, 37, 145, 163, 64, 29, 146, 141, 202, 23, 59, 167, 59, 22, 216, 158, 220, 42, 123, 148, 139, 3, 233, 16, 0, 0, 141, 37, 170, 24, 37, 152, 175, 19, 131, 168, 182, 43, 192, 88, 98, 41, 76, 117, 31, 45, 90, 24, 163, 30, 213, 36, 4, 30, 53, 224, 192, 13, 138, 198, 0, 0, 105, 82, 231, 63, 192, 240, 79, 55, 130, 49, 211, 19, 1, 243, 232, 29, 163, 205, 125, 11, 197, 45, 228, 22, 87, 132, 99, 1, 149, 182, 208, 11, 66, 247, 0, 0, 213, 155, 228, 23, 28, 58, 96, 34, 1, 142, 57, 10, 253, 141, 232, 44, 127, 151, 53, 54, 231, 114, 159, 51, 24, 253, 147, 48, 196, 140, 198, 11, 108, 64, 0, 0, 95, 23, 167, 53, 91, 154, 237, 20, 166, 66, 207, 49, 116, 220, 57, 46, 237, 187, 222, 21, 11, 86, 105, 30, 40, 247, 207, 3, 245, 5, 65, 43, 140, 45, 0, 0, 42, 89, 157, 59, 70, 238, 222, 60, 12, 94, 94, 11, 103, 255, 26, 33, 122, 55, 157, 44, 132, 233, 203, 8, 187, 167, 148, 10, 99, 204, 224, 14, 63, 199, 0, 0, 69, 16, 181, 20, 14, 111, 50, 13, 62, 91, 194, 49, 188, 37, 178, 49, 187, 115, 207, 40, 199, 58, 245, 28, 174, 88, 234, 38, 98, 110, 71, 63, 203, 30, 0, 0, 38, 0, 199, 2, 4, 196, 153, 14, 213, 34, 100, 3, 173, 145, 1, 36, 177, 56, 155, 26, 18, 198, 46, 52, 71, 100, 58, 28, 230, 34, 140, 56, 246, 28, 0, 0, 51, 133, 53, 41, 155, 93, 179, 30, 223, 185, 180, 15, 117, 254, 76, 42, 16, 140, 42, 19, 71, 138, 86, 37, 62, 136, 82, 55, 149, 127, 49, 37, 8, 154, 0, 0, 8, 186, 96, 3, 119, 113, 248, 44, 223, 218, 13, 56, 110, 111, 185, 41, 101, 33, 195, 15, 85, 126, 245, 5, 249, 49, 252, 56, 6, 8, 241, 32, 152, 167, 0, 0, 246, 247, 142, 25, 88, 23, 16, 37, 246, 249, 120, 32, 222, 253, 252, 8, 89, 166, 174, 56, 206, 73, 33, 39, 189, 53, 46, 61, 211, 118, 18, 54, 77, 102, 0, 0, 148, 172, 30, 29, 205, 191, 37, 29, 238, 236, 230, 56, 198, 172, 78, 15, 252, 207, 88, 4, 116, 151, 51, 18, 20, 42, 147, 39, 252, 197, 5, 8, 81, 173, 0, 0, 179, 52, 201, 3, 223, 154, 2, 3, 78, 44, 174, 48, 22, 96, 125, 12, 43, 2, 167, 17, 96, 154, 101, 7, 35, 56, 134, 11, 244, 221, 164, 14, 17, 130, 0, 0, 15, 106, 44, 4, 171, 152, 151, 31, 55, 128, 70, 36, 166, 9, 223, 7, 170, 40, 198, 32, 214, 202, 179, 25, 132, 96, 102, 35, 107, 178, 54, 46, 161, 141, 0, 0, 45, 253, 52, 37, 155, 55, 43, 50, 82, 56, 59, 15, 25, 81, 227, 31, 167, 23, 192, 4, 40, 233, 137, 36, 220, 177, 209, 62, 177, 152, 248, 6, 3, 225, 0, 0, 13, 160, 86, 20, 202, 99, 60, 17, 154, 215, 206, 33, 103, 80, 183, 36, 242, 90, 83, 23, 150, 93, 144, 26, 187, 230, 5, 4, 80, 162, 100, 24, 112, 157, 0, 0, 131, 141, 2, 47, 187, 142, 88, 30, 21, 150, 67, 39, 110, 155, 100, 37, 97, 219, 105, 30, 87, 104, 249, 42, 165, 198, 94, 56, 241, 56, 241, 61, 235, 167, 0, 0, 209, 190, 208, 25, 174, 228, 0, 25, 153, 145, 83, 48, 210, 73, 226, 40, 71, 75, 128, 4, 193, 221, 28, 39, 253, 92, 45, 54, 248, 239, 75, 5, 5, 98, 0, 0, 250, 92, 221, 39, 8, 144, 131, 43, 91, 75, 157, 48, 223, 68, 113, 34, 106, 51, 70, 35, 9, 77, 169, 49, 205, 193, 244, 36, 192, 114, 35, 40, 92, 91, 0, 0, 140, 233, 72, 30, 230, 155, 146, 25, 62, 157, 38, 51, 43, 243, 25, 52, 191, 148, 144, 6, 162, 58, 195, 7, 153, 94, 130, 21, 168, 194, 189, 45, 204, 62, 0, 0, 130, 31, 83, 35, 140, 163, 84, 46, 242, 201, 194, 16, 236, 154, 76, 20, 255, 41, 44, 2, 39, 210, 249, 60, 206, 92, 187, 20, 68, 48, 171, 9, 111, 4, 0, 0, 7, 218, 206, 11, 44, 242, 23, 20, 250, 199, 85, 43, 54, 23, 101, 9, 208, 121, 37, 3, 191, 176, 194, 13, 226, 172, 46, 56, 214, 88, 204, 18, 128, 107, 0, 0, 17, 39, 67, 16, 220, 80, 197, 2, 6, 185, 22, 25, 247, 203, 2, 5, 207, 90, 100, 25, 34, 60, 188, 37, 95, 83, 251, 14, 120, 76, 182, 9, 25, 193, 0, 0, 12, 97, 226, 47, 139, 135, 73, 18, 94, 5, 52, 15, 40, 139, 228, 42, 131, 207, 198, 12, 27, 198, 47, 37, 132, 145, 104, 27, 73, 31, 51, 62, 225, 139, 0, 0, 99, 121, 37, 33, 62, 29, 230, 5, 28, 134, 170, 52, 176, 84, 99, 0, 91, 196, 121, 9, 78, 45, 213, 46, 205, 230, 242, 8, 218, 122, 186, 17, 8, 105, 0, 0, 53, 152, 111, 6, 101, 150, 93, 41, 83, 178, 146, 28, 8, 42, 15, 47, 108, 127, 187, 47, 228, 147, 192, 5, 64, 91, 188, 62, 207, 223, 242, 23, 72, 226, 0, 0, 206, 58, 226, 30, 47, 229, 68, 52, 210, 47, 221, 20, 109, 25, 31, 50, 222, 21, 41, 35, 210, 183, 84, 29, 186, 171, 11, 34, 36, 227, 254, 61, 61, 251, 0, 0, 222, 232, 34, 23, 50, 189, 119, 2, 238, 245, 39, 45, 191, 80, 156, 28, 158, 138, 181, 58, 54, 80, 69, 9, 42, 101, 197, 51, 113, 4, 111, 10, 14, 81, 0, 0, 81, 35, 39, 16, 189, 63, 31, 24, 152, 16, 255, 25, 126, 207, 210, 28, 112, 65, 205, 49, 234, 172, 143, 34, 235, 179, 24, 5, 215, 147, 176, 23, 216, 109, 0, 0, 75, 102, 199, 63, 173, 232, 31, 44, 201, 23, 8, 62, 240, 253, 27, 31, 135, 183, 65, 28, 189, 230, 31, 16, 157, 224, 39, 52, 135, 4, 253, 25, 234, 22, 0, 0, 109, 105, 148, 16, 54, 162, 121, 53, 82, 175, 214, 1, 169, 153, 44, 62, 92, 236, 215, 59, 80, 124, 14, 10, 172, 48, 181, 21, 181, 145, 43, 27, 234, 254, 0, 0, 136, 0, 9, 24, 252, 122, 87, 5, 211, 66, 20, 4, 243, 85, 34, 7, 152, 92, 205, 62, 252, 74, 56, 57, 6, 171, 27, 14, 247, 37, 219, 26, 124, 229, 0, 0, 135, 213, 223, 8, 237, 134, 77, 30, 96, 101, 2, 27, 50, 142, 46, 49, 94, 45, 161, 53, 179, 168, 234, 25, 72, 179, 8, 5, 61, 235, 6, 45, 132, 80, 0, 0, 137, 14, 71, 17, 254, 165, 231, 57, 6, 86, 31, 9, 26, 88, 189, 45, 93, 71, 39, 41, 84, 33, 155, 42, 25, 22, 211, 0, 102, 135, 198, 24, 169, 52, 0, 0, 198, 76, 179, 58, 133, 201, 8, 2, 45, 161, 48, 15, 159, 93, 10, 3, 200, 40, 113, 13, 70, 127, 252, 44, 63, 165, 94, 45, 144, 129, 15, 48, 20, 79, 0, 0, 31, 104, 126, 24, 190, 148, 176, 23, 34, 208, 29, 40, 163, 51, 143, 55, 185, 64, 37, 38, 14, 61, 156, 14, 101, 76, 137, 14, 169, 50, 42, 52, 83, 123, 0, 0, 13, 217, 65, 18, 4, 196, 157, 16, 131, 79, 68, 50, 118, 80, 60, 7, 232, 99, 211, 29, 123, 37, 216, 16, 65, 29, 237, 57, 113, 146, 31, 46, 77, 167, 0, 0, 212, 218, 122, 63, 224, 98, 148, 12, 63, 49, 10, 10, 209, 36, 148, 59, 169, 200, 113, 1, 98, 41, 66, 55, 127, 50, 239, 62, 200, 107, 115, 36, 134, 247, 0, 0, 31, 174, 193, 49, 136, 40, 179, 23, 42, 11, 212, 44, 162, 49, 150, 27, 69, 88, 86, 35, 174, 19, 53, 55, 172, 249, 44, 42, 46, 209, 149, 62, 1, 105, 0, 0, 176, 56, 40, 18, 151, 193, 12, 62, 48, 169, 119, 28, 121, 233, 206, 39, 215, 13, 144, 28, 10, 3, 78, 45, 97, 36, 33, 60, 156, 8, 34, 23, 222, 53, 0, 0, 219, 75, 122, 50, 6, 66, 12, 44, 196, 202, 148, 20, 13, 65, 155, 26, 4, 93, 163, 59, 198, 15, 217, 18, 36, 122, 18, 56, 80, 71, 11, 54, 60, 141, 0, 0, 44, 138, 154, 38, 243, 49, 77, 15, 108, 41, 173, 48, 77, 31, 224, 56, 212, 110, 35, 54, 1, 116, 254, 62, 12, 71, 31, 36, 59, 96, 88, 9, 212, 155, 0, 0, 45, 29, 236, 52, 26, 79, 51, 16, 84, 244, 216, 39, 27, 215, 103, 2, 217, 31, 105, 59, 89, 202, 89, 39, 254, 154, 115, 36, 129, 245, 216, 32, 249, 234, 0, 0, 82, 132, 131, 12, 129, 213, 249, 51, 63, 181, 132, 62, 21, 85, 75, 61, 169, 170, 153, 49, 154, 131, 162, 8, 117, 39, 210, 56, 249, 159, 14, 6, 24, 229, 0, 0, 103, 231, 90, 4, 220, 111, 205, 50, 203, 113, 151, 40, 231, 114, 234, 28, 194, 216, 229, 6, 176, 20, 56, 16, 111, 70, 99, 27, 187, 142, 69, 47, 149, 251, 0, 0, 17, 14, 191, 59, 43, 168, 79, 33, 65, 19, 159, 37, 98, 28, 189, 5, 184, 91, 39, 2, 218, 116, 54, 1, 32, 197, 219, 13, 106, 4, 54, 5, 76, 102, 0, 0, 177, 108, 236, 1, 47, 94, 234, 15, 227, 61, 88, 8, 96, 95, 89, 59, 254, 60, 202, 63, 155, 47, 249, 30, 54, 203, 205, 9, 65, 100, 71, 42, 103, 218, 0, 0, 29, 190, 104, 58, 137, 163, 122, 58, 23, 10, 116, 15, 66, 113, 235, 49, 222, 229, 128, 23, 178, 223, 143, 17, 31, 196, 43, 36, 5, 82, 141, 42, 172, 155, 0, 0, 68, 138, 188, 21, 148, 65, 247, 59, 25, 26, 21, 62, 242, 93, 64, 16, 104, 199, 95, 26, 233, 146, 150, 21, 56, 61, 218, 14, 63, 15, 22, 32, 1, 77, 0, 0, 158, 192, 219, 26, 36, 83, 126, 60, 98, 163, 45, 24, 161, 17, 8, 37, 150, 19, 56, 22, 31, 0, 234, 38, 126, 54, 93, 15, 45, 99, 176, 49, 51, 58, 0, 0, 0, 235, 218, 37, 161, 212, 106, 48, 107, 247, 69, 38, 51, 201, 250, 8, 89, 209, 233, 54, 206, 137, 218, 50, 130, 112, 149, 15, 215, 247, 65, 5, 102, 47, 0, 0, 192, 146, 57, 3, 38, 158, 157, 8, 193, 8, 211, 21, 198, 137, 123, 51, 110, 208, 173, 0, 8, 234, 77, 37, 239, 246, 51, 43, 212, 219, 132, 4, 92, 253, 0, 0, 217, 166, 106, 17, 130, 66, 170, 32, 241, 220, 2, 55, 145, 45, 178, 24, 54, 56, 90, 3, 134, 54, 93, 60, 84, 34, 125, 36, 127, 65, 95, 4, 148, 245, 0, 0, 207, 80, 46, 63, 186, 165, 65, 31, 108, 184, 181, 38, 15, 226, 157, 36, 122, 235, 188, 20, 194, 106, 111, 23, 246, 44, 177, 49, 165, 91, 105, 24, 167, 202, 0, 0, 192, 244, 198, 58, 85, 14, 184, 42, 204, 196, 189, 4, 51, 122, 163, 19, 218, 29, 113, 22, 154, 47, 14, 7, 78, 236, 205, 25, 211, 199, 95, 19, 45, 15, 0, 0, 88, 155, 51, 50, 181, 238, 158, 31, 110, 101, 66, 2, 228, 41, 132, 26, 143, 30, 231, 1, 206, 247, 159, 44, 127, 209, 228, 61, 164, 95, 225, 39, 200, 62, 0, 0, 178, 140, 66, 31, 255, 20, 84, 33, 93, 181, 34, 42, 89, 191, 8, 14, 35, 241, 208, 24, 101, 5, 134, 30, 235, 209, 187, 20, 168, 184, 176, 51, 93, 29, 0, 0, 155, 24, 91, 9, 2, 68, 123, 57, 81, 74, 4, 54, 225, 75, 164, 15, 189, 136, 11, 47, 33, 9, 30, 30, 208, 80, 140, 44, 80, 236, 32, 16, 92, 110, 0, 0, 115, 18, 56, 40, 62, 162, 58, 44, 95, 174, 61, 41, 129, 165, 221, 16, 216, 206, 38, 1, 49, 203, 166, 58, 253, 57, 116, 22, 2, 76, 191, 40, 217, 137, 0, 0, 61, 119, 9, 19, 187, 207, 250, 0, 74, 50, 39, 17, 43, 160, 117, 24, 143, 245, 98, 15, 219, 129, 188, 42, 119, 3, 245, 38, 117, 20, 109, 9, 202, 223, 0, 0, 145, 29, 199, 53, 178, 172, 12, 51, 33, 253, 148, 40, 138, 139, 23, 37, 35, 206, 254, 26, 69, 76, 112, 40, 82, 28, 174, 16, 233, 224, 225, 6, 25, 131, 0, 0, 97, 138, 20, 34, 35, 176, 231, 2, 231, 94, 68, 16, 93, 212, 71, 40, 23, 138, 174, 60, 69, 79, 120, 27, 224, 9, 183, 1, 224, 92, 197, 31, 172, 224, 0, 0, 192, 183, 55, 26, 48, 115, 81, 29, 245, 105, 16, 49, 238, 61, 52, 2, 236, 81, 33, 50, 123, 77, 2, 0, 110, 218, 205, 52, 204, 130, 234, 19, 144, 83, 0, 0, 200, 113, 39, 2, 172, 37, 44, 55, 153, 70, 67, 20, 120, 96, 102, 38, 19, 28, 60, 13, 8, 43, 179, 39, 140, 216, 6, 1, 32, 47, 244, 33, 192, 91, 0, 0, 14, 5, 162, 8, 249, 11, 177, 6, 119, 166, 248, 21, 216, 85, 189, 11, 116, 137, 155, 7, 185, 49, 167, 29, 107, 137, 49, 7, 47, 73, 63, 9, 55, 103, 0, 0, 112, 61, 29, 6, 36, 105, 50, 36, 43, 204, 73, 51, 80, 63, 235, 26, 190, 109, 107, 8, 106, 2, 11, 18, 3, 2, 162, 36, 90, 226, 149, 32, 207, 228, 0, 0, 191, 99, 222, 2, 14, 146, 219, 47, 108, 198, 97, 50, 161, 76, 189, 14, 224, 168, 102, 33, 125, 140, 41, 38, 229, 9, 195, 52, 183, 28, 233, 59, 102, 67, 0, 0, 205, 36, 121, 33, 35, 144, 26, 11, 176, 214, 166, 42, 150, 20, 195, 14, 243, 234, 104, 2, 76, 248, 77, 9, 238, 226, 124, 45, 184, 111, 66, 54, 125, 46, 0, 0, 144, 97, 249, 6, 252, 159, 20, 4, 239, 37, 149, 60, 65, 122, 11, 60, 209, 95, 167, 58, 153, 165, 85, 57, 123, 249, 177, 26, 100, 158, 216, 20, 215, 123, 0, 0, 246, 0, 218, 43, 18, 200, 69, 15, 90, 105, 234, 32, 7, 23, 243, 3, 206, 214, 39, 56, 80, 210, 145, 53, 94, 157, 48, 38, 238, 246, 172, 60, 54, 131, 0, 0, 237, 65, 173, 22, 85, 76, 197, 14, 67, 82, 3, 15, 125, 13, 43, 2, 3, 146, 220, 24, 36, 122, 6, 13, 250, 26, 92, 45, 106, 247, 158, 36, 126, 79, 0, 0, 87, 45, 100, 62, 25, 94, 13, 61, 189, 117, 247, 42, 83, 28, 197, 28, 46, 166, 246, 40, 78, 125, 3, 38, 82, 5, 177, 8, 170, 85, 20, 29, 231, 223, 0, 0, 144, 134, 116, 39, 73, 20, 152, 62, 28, 176, 48, 6, 118, 19, 228, 21, 125, 0, 61, 19, 183, 199, 74, 17, 75, 201, 204, 17, 74, 159, 225, 50, 85, 35, 0, 0, 43, 88, 137, 12, 197, 212, 17, 31, 20, 57, 201, 17, 51, 22, 26, 10, 88, 88, 124, 42, 86, 176, 23, 46, 85, 143, 31, 30, 156, 150, 98, 60, 194, 33, 0, 0, 22, 127, 222, 10, 88, 136, 186, 54, 198, 40, 224, 11, 79, 186, 46, 39, 174, 36, 93, 39, 176, 173, 74, 22, 19, 192, 86, 26, 207, 230, 150, 32, 102, 11, 0, 0, 23, 98, 197, 8, 161, 9, 17, 37, 189, 210, 124, 62, 124, 3, 15, 9, 183, 127, 169, 23, 45, 234, 218, 41, 243, 254, 179, 9, 56, 6, 46, 40, 251, 161, 0, 0, 91, 13, 6, 25, 138, 192, 26, 36, 194, 167, 163, 3, 71, 236, 132, 17, 144, 203, 81, 57, 103, 191, 108, 2, 97, 203, 34, 16, 47, 60, 15, 1, 2, 246, 0, 0, 19, 143, 248, 26, 44, 212, 219, 27, 247, 163, 209, 61, 173, 180, 149, 42, 55, 234, 123, 15, 177, 146, 61, 42, 129, 152, 241, 12, 124, 176, 193, 45, 54, 240, 0, 0, 71, 96, 216, 58, 208, 103, 229, 63, 174, 188, 184, 41, 14, 129, 78, 45, 121, 103, 144, 10, 147, 221, 41, 51, 25, 119, 58, 24, 214, 244, 66, 51, 123, 142, 0, 0, 42, 55, 96, 4, 250, 17, 64, 40, 62, 139, 214, 63, 145, 139, 35, 58, 121, 69, 81, 41, 50, 8, 65, 12, 64, 57, 75, 26, 143, 202, 194, 29, 183, 16, 0, 0, 75, 173, 30, 4, 104, 30, 162, 63, 31, 60, 176, 17, 218, 126, 123, 29, 58, 190, 118, 62, 235, 59, 205, 17, 113, 236, 55, 51, 35, 35, 3, 3, 201, 191, 0, 0, 237, 218, 254, 6, 194, 27, 75, 17, 231, 227, 10, 46, 204, 191, 163, 17, 251, 54, 45, 4, 84, 55, 198, 41, 219, 36, 237, 13, 39, 120, 108, 32, 148, 122, 0, 0, 62, 59, 187, 53, 29, 244, 158, 27, 178, 60, 247, 57, 251, 133, 77, 29, 80, 91, 63, 45, 48, 250, 100, 22, 202, 77, 170, 58, 143, 47, 71, 60, 45, 115, 0, 0, 147, 102, 54, 23, 123, 248, 93, 49, 108, 67, 88, 12, 89, 91, 107, 39, 230, 22, 57, 37, 0, 97, 149, 56, 183, 124, 151, 57, 163, 183, 15, 36, 65, 127, 0, 0, 185, 195, 141, 8, 6, 207, 214, 23, 156, 201, 116, 23, 58, 73, 154, 41, 25, 96, 239, 23, 50, 3, 33, 42, 141, 66, 123, 20, 14, 88, 46, 37, 224, 76, 0, 0, 82, 222, 192, 37, 219, 222, 83, 48, 2, 101, 160, 30, 50, 200, 22, 8, 22, 162, 172, 54, 41, 3, 54, 45, 87, 237, 179, 41, 198, 175, 238, 3, 57, 5, 0, 0, 90, 254, 170, 10, 44, 120, 221, 48, 212, 237, 154, 16, 233, 44, 28, 21, 226, 208, 63, 2, 108, 165, 154, 34, 109, 233, 125, 38, 241, 219, 173, 35, 150, 154, 0, 0, 192, 117, 217, 14, 9, 245, 175, 57, 12, 204, 112, 30, 153, 2, 98, 45, 231, 14, 29, 6, 246, 64, 155, 49, 79, 149, 162, 59, 180, 233, 193, 62, 246, 171, 0, 0, 151, 99, 76, 51, 231, 47, 71, 29, 147, 208, 76, 7, 64, 109, 79, 55, 7, 33, 178, 54, 148, 0, 190, 43, 240, 84, 25, 22, 92, 64, 251, 62, 198, 211, 0, 0, 156, 63, 203, 40, 21, 52, 242, 7, 11, 224, 224, 5, 36, 194, 29, 3, 138, 70, 182, 42, 75, 54, 229, 32, 69, 25, 175, 34, 151, 87, 177, 52, 13, 74, 0, 0, 126, 19, 195, 10, 76, 150, 224, 38, 97, 68, 246, 26, 169, 216, 150, 36, 254, 83, 57, 43, 170, 157, 26, 60, 2, 142, 59, 36, 164, 4, 230, 56, 189, 76, 0, 0, 230, 47, 192, 46, 115, 197, 35, 0, 12, 214, 234, 8, 150, 235, 233, 36, 209, 112, 195, 20, 46, 77, 168, 36, 0, 149, 21, 54, 196, 35, 24, 21, 229, 108, 0, 0, 75, 248, 251, 32, 179, 193, 136, 30, 164, 184, 240, 3, 239, 242, 35, 49, 3, 187, 206, 20, 48, 204, 113, 54, 139, 123, 36, 22, 172, 32, 207, 12, 157, 75, 0, 0, 72, 60, 108, 35, 210, 146, 123, 14, 98, 94, 91, 47, 248, 80, 181, 25, 103, 235, 183, 57, 153, 96, 246, 4, 83, 37, 21, 12, 147, 248, 254, 49, 127, 253, 0, 0, 98, 56, 196, 25, 86, 120, 16, 42, 144, 102, 126, 57, 96, 60, 253, 41, 113, 222, 27, 56, 38, 26, 6, 2, 109, 30, 242, 31, 115, 48, 77, 59, 94, 56, 0, 0, 83, 84, 46, 20, 149, 63, 22, 1, 204, 200, 109, 8, 8, 187, 19, 12, 107, 87, 244, 43, 167, 103, 120, 7, 112, 86, 63, 34, 58, 250, 240, 58, 59, 40, 0, 0, 179, 217, 226, 54, 170, 193, 244, 18, 81, 99, 141, 51, 198, 160, 228, 54, 65, 86, 132, 15, 231, 132, 169, 11, 225, 117, 94, 48, 241, 229, 60, 5, 163, 25, 0, 0, 51, 175, 170, 11, 151, 184, 75, 21, 109, 229, 75, 0, 73, 71, 135, 0, 165, 179, 40, 53, 31, 226, 151, 37, 52, 210, 141, 50, 177, 118, 61, 54, 172, 108, 0, 0, 128, 4, 240, 18, 172, 31, 22, 54, 231, 206, 13, 16, 40, 1, 98, 13, 32, 25, 114, 54, 147, 141, 97, 50, 93, 53, 170, 13, 106, 229, 82, 59, 64, 88, 0, 0, 158, 207, 34, 62, 138, 87, 75, 22, 33, 135, 227, 42, 20, 149, 72, 29, 186, 218, 216, 29, 133, 170, 55, 26, 121, 16, 20, 63, 130, 200, 154, 54, 12, 103, 0, 0, 66, 76, 245, 35, 160, 123, 19, 18, 142, 220, 163, 41, 9, 143, 6, 55, 69, 37, 83, 14, 59, 125, 48, 22, 220, 177, 143, 17, 26, 77, 105, 0, 87, 159, 0, 0, 33, 106, 235, 47, 36, 113, 56, 24, 120, 82, 158, 33, 172, 18, 158, 59, 137, 221, 191, 41, 92, 173, 109, 37, 251, 123, 229, 25, 7, 32, 238, 35, 123, 206, 0, 0, 26, 70, 34, 21, 202, 76, 80, 58, 39, 131, 113, 60, 150, 137, 194, 44, 188, 160, 249, 62, 25, 4, 28, 46, 27, 192, 207, 40, 214, 72, 90, 4, 246, 39, 0, 0, 45, 26, 48, 7, 231, 43, 147, 42, 70, 148, 99, 40, 54, 200, 6, 38, 228, 232, 142, 2, 157, 132, 21, 35, 164, 46, 173, 38, 2, 100, 106, 60, 18, 229, 0, 0, 185, 54, 79, 17, 203, 38, 139, 51, 12, 57, 159, 59, 216, 174, 50, 38, 37, 129, 169, 52, 215, 208, 203, 47, 97, 18, 148, 47, 59, 91, 97, 30, 7, 100, 0, 0, 10, 181, 180, 36, 167, 123, 44, 37, 40, 235, 206, 25, 18, 28, 130, 54, 140, 108, 123, 26, 97, 127, 93, 3, 249, 174, 239, 22, 57, 209, 163, 36, 97, 218, 0, 0, 111, 183, 214, 20, 230, 247, 216, 59, 188, 93, 129, 12, 237, 126, 106, 57, 127, 174, 254, 29, 2, 47, 194, 61, 82, 244, 105, 22, 33, 199, 56, 20, 55, 162, 0, 0, 218, 168, 204, 13, 50, 179, 100, 7, 20, 141, 132, 27, 127, 4, 31, 28, 231, 19, 17, 1, 53, 249, 232, 11, 195, 218, 230, 61, 185, 41, 197, 38, 51, 247, 0, 0, 117, 228, 238, 60, 147, 113, 186, 11, 177, 130, 215, 14, 16, 10, 178, 26, 171, 65, 255, 10, 207, 135, 0, 15, 237, 213, 120, 35, 252, 232, 1, 43, 241, 187, 0, 0, 103, 80, 254, 7, 2, 168, 136, 17, 104, 29, 180, 56, 80, 98, 231, 58, 36, 227, 95, 49, 218, 32, 243, 32, 8, 97, 14, 6, 181, 186, 55, 46, 191, 180, 0, 0, 167, 195, 250, 3, 27, 182, 27, 24, 156, 188, 127, 20, 150, 18, 126, 55, 15, 24, 250, 61, 4, 145, 206, 49, 55, 22, 25, 15, 251, 0, 110, 54, 249, 6, 0, 0, 96, 33, 132, 58, 128, 65, 162, 33, 45, 0, 129, 2, 215, 75, 55, 41, 126, 212, 196, 5, 57, 140, 138, 35, 155, 166, 155, 5, 12, 152, 163, 49, 128, 124, 0, 0, 4, 226, 28, 18, 163, 215, 181, 19, 82, 61, 118, 38, 144, 99, 201, 41, 178, 47, 247, 38, 114, 22, 54, 29, 131, 251, 100, 60, 172, 88, 116, 16, 202, 67, 0, 0, 107, 143, 74, 19, 58, 17, 148, 20, 142, 70, 74, 42, 207, 236, 177, 45, 154, 31, 163, 27, 99, 72, 62, 20, 198, 161, 63, 2, 220, 184, 160, 22, 234, 220, 0, 0, 218, 239, 230, 43, 179, 164, 243, 19, 150, 5, 40, 7, 254, 252, 83, 11, 146, 109, 80, 26, 225, 141, 220, 27, 102, 91, 191, 18, 162, 200, 187, 1, 62, 156, 0, 0, 125, 252, 174, 39, 202, 60, 80, 60, 125, 223, 111, 51, 30, 26, 242, 14, 212, 213, 111, 34, 51, 81, 203, 2, 175, 216, 35, 41, 216, 121, 121, 2, 183, 167, 0, 0, 226, 139, 200, 6, 215, 234, 73, 36, 39, 94, 238, 6, 52, 8, 30, 11, 234, 91, 119, 48, 96, 103, 157, 28, 187, 51, 240, 32, 248, 196, 168, 34, 111, 93, 0, 0, 93, 215, 122, 13, 252, 84, 185, 36, 40, 44, 249, 43, 169, 227, 219, 42, 237, 32, 188, 8, 172, 206, 188, 42, 113, 140, 78, 45, 85, 99, 99, 44, 196, 173, 0, 0, 68, 184, 209, 18, 110, 212, 36, 10, 79, 72, 62, 23, 176, 224, 0, 39, 198, 197, 139, 56, 4, 15, 87, 44, 134, 252, 213, 32, 41, 193, 112, 13, 125, 245, 0, 0, 55, 104, 38, 33, 245, 174, 46, 25, 164, 198, 21, 9, 12, 200, 165, 1, 112, 76, 99, 36, 167, 214, 79, 19, 144, 151, 77, 47, 99, 170, 103, 15, 127, 112, 0, 0, 9, 203, 199, 60, 252, 1, 52, 13, 82, 67, 27, 29, 40, 218, 250, 49, 59, 70, 113, 24, 143, 251, 135, 27, 89, 95, 74, 25, 153, 142, 30, 24, 231, 19, 0, 0, 96, 145, 7, 8, 40, 106, 157, 47, 17, 100, 87, 43, 217, 174, 184, 58, 101, 157, 41, 52, 108, 97, 247, 23, 50, 30, 139, 59, 62, 122, 35, 50, 77, 40, 0, 0, 5, 238, 205, 24, 73, 56, 131, 1, 144, 59, 236, 50, 133, 236, 135, 29, 168, 29, 144, 6, 108, 44, 148, 0, 64, 98, 46, 24, 160, 149, 200, 40, 190, 41, 0, 0, 200, 81, 38, 38, 102, 13, 40, 57, 57, 142, 105, 12, 178, 109, 12, 63, 249, 199, 94, 48, 225, 254, 108, 2, 144, 234, 160, 41, 67, 154, 104, 54, 64, 124, 0, 0, 218, 138, 241, 18, 88, 29, 219, 6, 193, 188, 189, 61, 238, 100, 47, 24, 212, 89, 74, 61, 204, 191, 190, 13, 156, 125, 142, 40, 224, 72, 27, 30, 33, 245, 0, 0, 22, 53, 149, 35, 244, 43, 90, 55, 129, 9, 191, 5, 219, 40, 189, 23, 170, 214, 209, 17, 243, 10, 132, 9, 204, 126, 181, 13, 14, 216, 239, 27, 104, 224, 0, 0, 189, 230, 208, 2, 157, 131, 223, 14, 49, 229, 245, 48, 246, 88, 52, 29, 247, 203, 110, 13, 65, 240, 81, 8, 42, 88, 226, 4, 15, 73, 0, 53, 34, 51, 0, 0, 160, 178, 40, 44, 165, 139, 206, 19, 98, 175, 115, 40, 168, 143, 125, 1, 40, 183, 249, 26, 55, 241, 102, 0, 251, 91, 239, 36, 89, 250, 229, 1, 231, 86, 0, 0, 153, 180, 154, 5, 200, 79, 103, 47, 10, 51, 60, 39, 27, 103, 202, 4, 11, 188, 1, 63, 25, 207, 90, 6, 210, 165, 91], "i8", 4, t.L);
D([87, 192, 252, 43, 186, 120, 0, 0, 253, 151, 224, 62, 99, 140, 116, 32, 150, 25, 37, 17, 163, 187, 203, 24, 145, 46, 8, 2, 182, 131, 19, 42, 252, 250, 10, 44, 193, 246, 54, 55, 75, 173, 0, 0, 230, 172, 6, 61, 179, 133, 79, 18, 164, 12, 162, 3, 190, 205, 38, 28, 35, 26, 171, 41, 36, 97, 18, 46, 32, 76, 61, 46, 82, 104, 132, 60, 112, 111, 0, 0, 222, 213, 2, 54, 210, 180, 47, 18, 224, 94, 172, 37, 175, 89, 165, 12, 117, 80, 159, 57, 30, 205, 99, 23, 249, 54, 183, 39, 0, 37, 140, 34, 30, 121, 0, 0, 64, 27, 238, 32, 185, 143, 59, 50, 125, 36, 150, 30, 220, 22, 82, 59, 140, 212, 204, 3, 68, 198, 39, 37, 128, 95, 65, 42, 90, 167, 108, 39, 89, 225, 0, 0, 166, 147, 143, 23, 123, 153, 88, 7, 222, 153, 41, 3, 47, 157, 142, 13, 166, 207, 199, 47, 168, 42, 37, 62, 250, 14, 74, 29, 160, 202, 136, 24, 51, 121, 0, 0, 62, 12, 192, 9, 161, 232, 119, 32, 47, 142, 32, 17, 242, 192, 163, 3, 240, 89, 24, 5, 245, 76, 139, 21, 54, 100, 149, 6, 16, 193, 37, 1, 11, 187, 0, 0, 53, 90, 149, 17, 180, 96, 106, 38, 167, 144, 220, 5, 164, 19, 193, 25, 254, 82, 176, 49, 234, 133, 190, 52, 85, 54, 246, 57, 235, 20, 22, 57, 103, 64, 0, 0, 230, 50, 221, 5, 112, 110, 157, 3, 126, 238, 229, 19, 109, 84, 237, 24, 198, 191, 95, 26, 29, 248, 118, 18, 182, 233, 137, 23, 101, 80, 85, 16, 90, 220, 0, 0, 185, 153, 74, 53, 233, 109, 159, 3, 248, 188, 73, 46, 29, 164, 187, 60, 47, 68, 89, 63, 6, 136, 151, 58, 220, 118, 122, 54, 231, 143, 41, 42, 243, 74, 0, 0, 203, 231, 68, 5, 177, 110, 81, 59, 89, 3, 150, 18, 109, 137, 144, 1, 161, 153, 78, 1, 196, 149, 82, 13, 227, 219, 185, 51, 97, 14, 92, 6, 110, 21, 0, 0, 55, 10, 37, 45, 2, 75, 78, 53, 214, 156, 67, 43, 87, 99, 181, 37, 148, 232, 75, 3, 142, 169, 92, 37, 147, 218, 7, 25, 204, 227, 103, 35, 192, 107, 0, 0, 202, 83, 152, 5, 115, 10, 239, 47, 77, 245, 155, 49, 231, 154, 88, 58, 72, 19, 22, 39, 163, 136, 218, 41, 188, 38, 56, 4, 218, 178, 51, 47, 105, 66, 0, 0, 103, 211, 184, 53, 212, 59, 86, 42, 61, 138, 90, 30, 126, 41, 80, 14, 253, 9, 164, 49, 16, 167, 50, 33, 60, 114, 107, 1, 176, 160, 6, 7, 43, 237, 0, 0, 131, 171, 52, 1, 74, 211, 117, 8, 119, 57, 67, 54, 189, 230, 207, 6, 116, 104, 88, 38, 37, 54, 220, 5, 189, 162, 125, 11, 120, 75, 31, 11, 103, 133, 0, 0, 166, 19, 3, 57, 61, 37, 140, 35, 76, 244, 152, 18, 49, 255, 197, 31, 231, 229, 194, 34, 233, 111, 18, 16, 55, 182, 46, 59, 208, 214, 230, 6, 72, 124, 0, 0, 0, 144, 186, 3, 234, 200, 193, 55, 111, 139, 94, 2, 26, 231, 203, 33, 196, 61, 20, 0, 97, 29, 216, 33, 132, 22, 140, 29, 252, 127, 62, 29, 56, 172, 0, 0, 10, 207, 16, 47, 101, 31, 143, 54, 164, 159, 110, 54, 95, 67, 141, 23, 8, 147, 127, 17, 80, 162, 119, 11, 134, 155, 6, 28, 40, 194, 72, 58, 101, 170, 0, 0, 212, 219, 6, 45, 155, 189, 129, 41, 129, 208, 32, 10, 94, 225, 143, 3, 236, 41, 231, 35, 166, 215, 1, 5, 173, 57, 1, 7, 154, 234, 57, 23, 13, 87, 0, 0, 149, 212, 30, 61, 58, 251, 150, 41, 213, 190, 96, 36, 113, 219, 232, 32, 182, 187, 27, 16, 71, 156, 185, 25, 91, 96, 47, 32, 131, 80, 210, 20, 174, 166, 0, 0, 14, 35, 45, 9, 72, 126, 48, 13, 132, 146, 51, 41, 52, 168, 140, 59, 218, 245, 110, 54, 128, 123, 138, 48, 135, 111, 187, 40, 9, 10, 28, 62, 181, 117, 0, 0, 184, 112, 21, 21, 239, 247, 242, 13, 176, 143, 31, 17, 1, 44, 233, 25, 2, 142, 250, 29, 83, 21, 29, 30, 61, 54, 82, 56, 233, 120, 136, 51, 124, 82, 0, 0, 14, 204, 79, 3, 171, 253, 218, 30, 196, 132, 56, 62, 10, 41, 196, 31, 146, 200, 89, 18, 159, 56, 224, 22, 10, 43, 236, 29, 123, 184, 190, 35, 252, 68, 0, 0, 10, 66, 156, 49, 121, 12, 252, 51, 217, 137, 4, 13, 47, 41, 165, 3, 114, 215, 211, 51, 32, 158, 159, 9, 73, 126, 54, 49, 166, 46, 165, 55, 199, 210, 0, 0, 145, 153, 182, 11, 242, 7, 146, 22, 93, 23, 7, 51, 176, 232, 207, 62, 255, 53, 245, 2, 56, 136, 89, 40, 102, 104, 188, 39, 179, 238, 145, 46, 162, 222, 0, 0, 223, 226, 111, 49, 167, 10, 157, 1, 199, 155, 237, 33, 216, 108, 115, 39, 34, 231, 185, 55, 19, 178, 255, 50, 197, 74, 142, 2, 67, 182, 245, 47, 40, 174, 0, 0, 204, 201, 79, 17, 9, 52, 144, 48, 88, 22, 70, 26, 10, 175, 2, 52, 38, 54, 168, 56, 18, 179, 61, 7, 252, 110, 141, 22, 184, 41, 38, 63, 104, 57, 0, 0, 221, 55, 173, 31, 37, 82, 78, 6, 64, 51, 143, 56, 191, 93, 25, 5, 26, 201, 50, 45, 106, 180, 96, 30, 35, 129, 146, 53, 210, 54, 244, 46, 156, 120, 0, 0, 241, 133, 12, 46, 70, 134, 176, 43, 80, 162, 163, 3, 216, 148, 75, 41, 166, 213, 69, 57, 85, 194, 119, 9, 107, 146, 162, 6, 56, 166, 65, 36, 150, 104, 0, 0, 33, 222, 193, 45, 204, 8, 210, 49, 34, 57, 80, 13, 104, 103, 48, 16, 31, 45, 215, 5, 97, 7, 23, 12, 111, 37, 121, 9, 227, 44, 237, 15, 253, 174, 0, 0, 10, 42, 200, 32, 189, 102, 101, 63, 47, 131, 104, 54, 131, 177, 137, 36, 15, 177, 19, 20, 70, 198, 39, 27, 176, 70, 138, 24, 198, 38, 224, 47, 72, 9, 0, 0, 137, 229, 200, 24, 35, 254, 45, 19, 237, 43, 205, 23, 50, 194, 127, 19, 109, 140, 65, 3, 71, 23, 211, 45, 198, 109, 100, 54, 114, 91, 161, 24, 165, 83, 0, 0, 127, 172, 200, 56, 126, 249, 11, 10, 39, 165, 42, 30, 153, 187, 144, 4, 100, 73, 248, 22, 129, 180, 229, 12, 92, 203, 187, 34, 224, 248, 190, 44, 69, 153, 0, 0, 176, 163, 174, 41, 133, 14, 101, 27, 169, 223, 172, 45, 251, 136, 222, 11, 40, 245, 239, 40, 236, 63, 209, 54, 7, 214, 130, 50, 195, 146, 96, 59, 239, 62, 0, 0, 58, 53, 158, 22, 142, 231, 117, 52, 110, 31, 190, 43, 20, 2, 17, 40, 16, 254, 213, 7, 196, 137, 8, 62, 53, 98, 14, 7, 22, 200, 26, 19, 49, 42, 0, 0, 103, 96, 116, 37, 135, 155, 100, 9, 252, 139, 101, 50, 182, 42, 149, 34, 19, 160, 27, 42, 174, 29, 249, 24, 164, 193, 122, 34, 214, 252, 2, 43, 164, 21, 0, 0, 102, 73, 184, 41, 123, 210, 139, 39, 152, 255, 243, 23, 183, 65, 208, 19, 27, 145, 108, 43, 233, 188, 190, 45, 152, 212, 194, 63, 192, 45, 64, 41, 89, 89, 0, 0, 106, 58, 71, 7, 134, 140, 153, 2, 100, 66, 226, 15, 35, 48, 55, 0, 145, 112, 42, 8, 55, 8, 74, 12, 148, 127, 137, 10, 215, 7, 157, 57, 112, 3, 0, 0, 115, 177, 198, 43, 72, 110, 50, 44, 179, 254, 211, 46, 31, 143, 24, 54, 125, 157, 95, 27, 193, 24, 49, 24, 17, 142, 254, 34, 200, 77, 78, 12, 235, 158, 0, 0, 29, 167, 35, 23, 54, 136, 229, 20, 185, 196, 112, 14, 180, 175, 198, 41, 14, 227, 26, 58, 238, 246, 175, 42, 82, 217, 88, 45, 67, 4, 120, 60, 33, 225, 0, 0, 243, 5, 200, 62, 253, 16, 201, 29, 21, 89, 153, 29, 66, 221, 3, 57, 125, 136, 151, 46, 1, 226, 200, 46, 110, 81, 143, 49, 253, 49, 249, 19, 204, 57, 0, 0, 211, 72, 60, 58, 4, 131, 70, 6, 77, 46, 145, 60, 207, 205, 85, 46, 187, 125, 222, 2, 61, 79, 154, 57, 81, 49, 143, 47, 145, 22, 203, 17, 177, 236, 0, 0, 14, 88, 34, 14, 215, 190, 88, 15, 121, 136, 111, 45, 180, 37, 202, 4, 199, 210, 212, 27, 147, 121, 255, 11, 137, 150, 198, 13, 187, 25, 29, 32, 76, 249, 0, 0, 130, 219, 39, 49, 217, 143, 148, 7, 232, 212, 113, 35, 76, 17, 251, 33, 152, 246, 129, 26, 173, 218, 255, 18, 25, 169, 37, 18, 225, 25, 247, 31, 156, 94, 0, 0, 31, 242, 196, 16, 180, 46, 144, 47, 166, 167, 61, 16, 83, 86, 42, 9, 80, 210, 153, 25, 108, 163, 129, 0, 204, 47, 22, 29, 181, 26, 27, 46, 204, 140, 0, 0, 160, 254, 157, 50, 169, 155, 196, 31, 143, 226, 75, 38, 32, 43, 183, 36, 75, 165, 88, 7, 114, 82, 189, 47, 153, 54, 196, 17, 157, 24, 150, 37, 248, 87, 0, 0, 232, 216, 143, 51, 103, 96, 179, 51, 172, 82, 151, 6, 127, 19, 57, 44, 241, 168, 115, 40, 192, 131, 243, 25, 240, 52, 28, 0, 134, 209, 159, 51, 96, 98, 0, 0, 23, 174, 180, 50, 86, 58, 161, 6, 140, 25, 28, 5, 224, 136, 164, 52, 236, 247, 30, 42, 221, 37, 65, 2, 127, 26, 87, 27, 233, 219, 10, 42, 45, 188, 0, 0, 2, 102, 19, 1, 149, 145, 46, 44, 187, 165, 227, 25, 3, 210, 27, 49, 56, 61, 59, 51, 200, 223, 36, 22, 208, 51, 252, 45, 32, 1, 202, 9, 209, 135, 0, 0, 172, 106, 175, 24, 7, 241, 160, 61, 196, 247, 59, 61, 27, 29, 33, 42, 135, 83, 116, 39, 253, 179, 157, 40, 38, 233, 61, 32, 150, 194, 33, 9, 206, 113, 0, 0, 22, 169, 197, 8, 205, 117, 129, 44, 37, 15, 97, 53, 84, 3, 17, 23, 63, 161, 74, 53, 106, 143, 49, 43, 176, 70, 151, 30, 152, 248, 79, 31, 93, 253, 0, 0, 218, 139, 219, 58, 193, 222, 44, 5, 171, 250, 246, 28, 47, 5, 206, 53, 229, 47, 181, 7, 231, 153, 242, 16, 43, 125, 176, 21, 173, 59, 180, 15, 216, 13, 0, 0, 156, 82, 247, 53, 88, 66, 102, 23, 212, 29, 213, 27, 45, 230, 150, 29, 56, 129, 67, 52, 180, 12, 79, 17, 186, 34, 97, 2, 7, 38, 4, 53, 13, 222, 0, 0, 254, 136, 205, 36, 11, 48, 8, 15, 6, 116, 183, 9, 162, 49, 73, 34, 23, 112, 53, 58, 181, 8, 38, 4, 178, 249, 69, 33, 40, 68, 167, 27, 10, 215, 0, 0, 17, 109, 247, 56, 52, 210, 11, 50, 115, 85, 81, 56, 239, 3, 64, 4, 21, 162, 146, 2, 231, 240, 251, 22, 156, 230, 68, 15, 147, 182, 34, 8, 108, 178, 0, 0, 107, 53, 183, 35, 199, 2, 112, 48, 189, 36, 38, 24, 103, 25, 12, 0, 5, 51, 100, 13, 67, 246, 161, 19, 12, 207, 51, 29, 82, 130, 32, 62, 28, 31, 0, 0, 219, 34, 158, 38, 25, 236, 56, 37, 63, 147, 200, 57, 103, 253, 79, 38, 172, 78, 41, 12, 6, 164, 244, 14, 126, 58, 82, 63, 31, 63, 46, 5, 235, 252, 0, 0, 161, 96, 34, 28, 201, 182, 92, 61, 203, 228, 235, 36, 78, 158, 67, 21, 173, 36, 9, 31, 73, 157, 150, 34, 205, 31, 141, 43, 53, 144, 206, 26, 170, 100, 0, 0, 85, 39, 138, 35, 230, 5, 33, 60, 6, 85, 156, 20, 89, 156, 134, 28, 83, 170, 127, 16, 45, 221, 213, 5, 92, 197, 202, 21, 51, 143, 152, 38, 144, 78, 0, 0, 222, 163, 204, 35, 216, 39, 233, 61, 202, 0, 152, 34, 52, 229, 84, 51, 182, 219, 89, 53, 65, 117, 27, 9, 239, 236, 90, 35, 51, 227, 161, 54, 86, 174, 0, 0, 77, 166, 59, 24, 102, 37, 150, 32, 58, 90, 89, 12, 226, 221, 131, 57, 189, 226, 64, 14, 174, 23, 133, 2, 251, 59, 192, 4, 184, 8, 87, 17, 103, 195, 0, 0, 253, 129, 33, 42, 229, 35, 51, 5, 70, 241, 120, 23, 40, 171, 154, 24, 66, 199, 100, 25, 19, 186, 57, 56, 128, 48, 3, 54, 114, 26, 180, 2, 82, 58, 0, 0, 45, 250, 55, 32, 52, 50, 79, 37, 50, 196, 253, 27, 93, 61, 178, 15, 4, 3, 65, 63, 46, 5, 33, 13, 216, 67, 141, 29, 240, 43, 120, 31, 3, 229, 0, 0, 218, 91, 117, 29, 16, 114, 151, 3, 14, 241, 129, 4, 251, 192, 214, 23, 189, 221, 11, 25, 238, 39, 52, 38, 159, 95, 59, 13, 165, 234, 210, 20, 113, 69, 0, 0, 117, 119, 126, 23, 184, 41, 42, 34, 99, 95, 217, 14, 226, 100, 85, 56, 181, 174, 145, 18, 61, 235, 14, 21, 88, 238, 60, 35, 229, 191, 142, 26, 137, 157, 0, 0, 145, 102, 5, 58, 234, 180, 61, 63, 190, 83, 146, 41, 184, 95, 115, 38, 232, 125, 146, 16, 201, 181, 147, 37, 78, 185, 240, 27, 210, 15, 121, 42, 145, 221, 0, 0, 147, 50, 42, 60, 120, 19, 120, 63, 197, 118, 52, 16, 186, 27, 46, 34, 86, 205, 244, 2, 202, 92, 41, 44, 14, 45, 121, 35, 69, 156, 59, 46, 39, 131, 0, 0, 189, 249, 13, 14, 134, 83, 33, 47, 22, 164, 38, 35, 59, 173, 246, 43, 150, 132, 112, 57, 137, 153, 250, 44, 139, 225, 152, 10, 184, 155, 137, 31, 153, 4, 0, 0, 66, 192, 98, 5, 177, 201, 134, 16, 162, 177, 223, 56, 210, 200, 72, 11, 9, 214, 142, 26, 62, 118, 152, 25, 125, 137, 22, 27, 155, 138, 170, 10, 228, 90, 0, 0, 156, 38, 121, 15, 126, 51, 23, 36, 191, 141, 205, 7, 68, 229, 54, 56, 148, 74, 157, 56, 128, 113, 119, 48, 181, 234, 81, 48, 127, 1, 159, 14, 217, 153, 0, 0, 97, 175, 133, 30, 161, 4, 34, 13, 107, 118, 174, 20, 183, 200, 181, 35, 78, 15, 27, 2, 219, 63, 218, 58, 154, 181, 142, 28, 168, 9, 185, 14, 194, 146, 0, 0, 9, 43, 106, 3, 167, 217, 200, 57, 212, 254, 134, 34, 173, 96, 235, 8, 45, 121, 213, 56, 28, 87, 95, 8, 159, 64, 187, 17, 85, 192, 35, 62, 76, 65, 0, 0, 168, 235, 181, 7, 203, 198, 171, 56, 108, 163, 142, 17, 254, 113, 251, 42, 45, 66, 223, 56, 171, 93, 208, 3, 141, 8, 241, 61, 171, 29, 35, 24, 229, 254, 0, 0, 92, 155, 11, 13, 218, 116, 69, 61, 147, 71, 5, 57, 175, 208, 63, 32, 227, 78, 193, 7, 74, 230, 11, 16, 17, 251, 138, 37, 63, 77, 100, 22, 7, 56, 0, 0, 244, 202, 99, 60, 44, 233, 142, 7, 40, 213, 83, 15, 202, 234, 252, 35, 162, 252, 106, 42, 24, 211, 78, 4, 10, 98, 126, 38, 185, 228, 58, 17, 229, 66, 0, 0, 200, 41, 156, 22, 38, 176, 235, 33, 17, 95, 252, 62, 218, 158, 67, 41, 115, 120, 94, 1, 93, 48, 136, 60, 113, 31, 103, 12, 71, 62, 56, 21, 248, 159, 0, 0, 161, 9, 15, 30, 97, 246, 138, 2, 56, 40, 3, 20, 110, 124, 66, 40, 240, 254, 14, 48, 145, 74, 187, 37, 57, 56, 206, 50, 84, 153, 237, 32, 237, 122, 0, 0, 115, 125, 133, 5, 122, 51, 118, 17, 64, 165, 244, 51, 3, 204, 203, 34, 216, 142, 45, 3, 196, 42, 244, 43, 221, 199, 247, 30, 140, 230, 23, 21, 184, 245, 0, 0, 37, 231, 252, 36, 43, 168, 25, 22, 114, 91, 108, 42, 113, 244, 54, 58, 231, 180, 113, 23, 60, 122, 65, 42, 94, 223, 122, 32, 40, 61, 172, 28, 99, 224, 0, 0, 221, 49, 238, 14, 229, 211, 192, 9, 11, 135, 4, 49, 225, 157, 18, 18, 215, 140, 72, 26, 181, 202, 238, 9, 42, 225, 207, 24, 56, 47, 93, 34, 144, 122, 0, 0, 106, 141, 50, 26, 35, 6, 170, 46, 189, 24, 220, 26, 165, 206, 93, 19, 178, 167, 143, 48, 22, 70, 38, 26, 52, 10, 224, 52, 136, 233, 22, 48, 99, 198, 0, 0, 192, 184, 201, 62, 170, 237, 194, 14, 194, 156, 191, 18, 148, 122, 84, 33, 221, 23, 19, 23, 157, 60, 247, 43, 57, 141, 195, 33, 220, 87, 99, 58, 49, 51, 0, 0, 47, 222, 150, 57, 32, 33, 71, 50, 75, 17, 37, 11, 184, 203, 183, 51, 119, 233, 228, 15, 168, 123, 195, 44, 206, 89, 164, 6, 238, 183, 160, 9, 252, 211, 0, 0, 140, 111, 82, 20, 7, 137, 36, 49, 104, 241, 171, 55, 55, 38, 109, 22, 78, 218, 129, 55, 83, 83, 29, 45, 104, 143, 161, 48, 23, 105, 230, 55, 240, 196, 0, 0, 234, 151, 230, 3, 68, 35, 177, 49, 133, 62, 248, 5, 230, 62, 158, 57, 156, 209, 171, 63, 104, 178, 127, 40, 220, 55, 2, 44, 172, 255, 208, 18, 122, 193, 0, 0, 135, 108, 220, 30, 247, 225, 142, 59, 176, 42, 240, 57, 95, 109, 104, 56, 150, 174, 31, 32, 101, 220, 227, 5, 174, 76, 149, 53, 106, 85, 11, 23, 53, 57, 0, 0, 27, 218, 99, 49, 8, 12, 75, 11, 24, 49, 58, 57, 131, 185, 183, 3, 154, 222, 31, 1, 255, 117, 210, 36, 140, 70, 11, 57, 153, 40, 223, 34, 97, 143, 0, 0, 110, 215, 189, 3, 68, 72, 204, 31, 124, 110, 155, 36, 140, 154, 49, 20, 100, 66, 90, 44, 94, 211, 105, 47, 95, 235, 182, 62, 34, 124, 201, 15, 35, 120, 0, 0, 144, 174, 200, 14, 248, 67, 22, 58, 238, 93, 188, 11, 186, 228, 154, 44, 207, 184, 241, 3, 178, 54, 110, 53, 134, 235, 230, 33, 222, 86, 60, 48, 152, 151, 0, 0, 211, 68, 40, 37, 171, 11, 107, 42, 39, 142, 24, 3, 244, 150, 37, 57, 226, 190, 115, 28, 62, 37, 37, 59, 210, 61, 237, 2, 105, 157, 170, 56, 64, 186, 0, 0, 127, 107, 214, 17, 60, 94, 134, 22, 16, 200, 125, 24, 20, 148, 164, 41, 122, 117, 132, 18, 226, 66, 110, 60, 124, 116, 214, 34, 214, 254, 184, 27, 250, 253, 0, 0, 139, 23, 229, 56, 25, 224, 163, 42, 157, 222, 120, 61, 68, 119, 190, 17, 216, 196, 24, 26, 143, 38, 7, 3, 60, 185, 141, 25, 146, 136, 199, 60, 156, 77, 0, 0, 240, 188, 101, 18, 18, 94, 29, 32, 11, 211, 199, 17, 16, 222, 138, 51, 105, 14, 34, 15, 135, 145, 166, 58, 221, 58, 228, 41, 136, 55, 142, 51, 88, 253, 0, 0, 146, 98, 153, 43, 115, 234, 249, 12, 223, 209, 28, 15, 138, 255, 134, 9, 135, 251, 228, 5, 146, 230, 170, 32, 83, 189, 21, 50, 216, 77, 121, 41, 224, 255, 0, 0, 84, 151, 85, 16, 35, 164, 181, 2, 84, 88, 63, 42, 120, 247, 66, 44, 4, 34, 224, 12, 112, 231, 239, 2, 141, 53, 69, 29, 53, 87, 156, 30, 60, 33, 0, 0, 242, 88, 180, 52, 212, 9, 203, 63, 221, 238, 167, 54, 124, 61, 20, 18, 187, 144, 161, 27, 145, 24, 180, 14, 1, 7, 37, 6, 185, 214, 66, 43, 109, 75, 0, 0, 204, 220, 5, 30, 70, 0, 182, 12, 229, 147, 154, 1, 83, 251, 232, 15, 174, 114, 209, 19, 229, 90, 130, 27, 84, 9, 3, 26, 79, 93, 184, 61, 206, 184, 0, 0, 80, 87, 109, 12, 63, 131, 82, 0, 51, 129, 182, 38, 218, 240, 95, 29, 223, 153, 189, 18, 147, 211, 41, 53, 164, 246, 187, 9, 179, 41, 152, 34, 43, 48, 0, 0, 26, 179, 59, 55, 132, 251, 247, 22, 72, 123, 185, 61, 215, 218, 222, 7, 112, 73, 95, 59, 186, 120, 47, 40, 2, 94, 56, 7, 109, 222, 249, 12, 251, 3, 0, 0, 158, 92, 33, 61, 165, 249, 50, 13, 78, 13, 100, 7, 177, 29, 159, 22, 198, 43, 87, 59, 174, 106, 88, 48, 224, 129, 226, 47, 35, 149, 84, 54, 106, 243, 0, 0, 180, 74, 154, 29, 175, 87, 212, 22, 10, 124, 187, 21, 97, 176, 13, 31, 113, 54, 122, 15, 52, 237, 189, 5, 31, 22, 225, 3, 123, 66, 52, 31, 23, 75, 0, 0, 247, 182, 90, 35, 145, 127, 183, 42, 88, 245, 65, 23, 124, 149, 248, 13, 110, 72, 107, 34, 77, 202, 217, 35, 218, 95, 166, 47, 120, 105, 186, 25, 201, 62, 0, 0, 164, 35, 28, 48, 166, 236, 27, 61, 86, 207, 73, 58, 17, 86, 144, 10, 194, 117, 205, 57, 230, 166, 224, 0, 42, 108, 160, 39, 168, 129, 212, 0, 135, 94, 0, 0, 249, 134, 217, 16, 172, 101, 94, 8, 161, 253, 204, 36, 210, 97, 199, 5, 162, 45, 110, 44, 184, 70, 87, 29, 113, 30, 34, 9, 231, 190, 19, 25, 150, 91, 0, 0, 102, 12, 123, 0, 72, 215, 252, 60, 177, 111, 200, 22, 25, 185, 255, 41, 52, 116, 235, 44, 130, 61, 145, 8, 71, 164, 128, 22, 195, 100, 192, 48, 69, 229, 0, 0, 112, 212, 242, 49, 73, 95, 253, 33, 221, 57, 162, 53, 134, 163, 96, 57, 151, 191, 188, 25, 229, 104, 191, 49, 229, 231, 85, 41, 24, 163, 3, 13, 106, 224, 0, 0, 186, 139, 100, 3, 46, 100, 96, 41, 68, 116, 60, 28, 26, 44, 60, 40, 130, 152, 179, 1, 124, 137, 184, 15, 19, 10, 88, 15, 149, 94, 133, 16, 164, 178, 0, 0, 82, 100, 251, 0, 40, 173, 190, 17, 178, 123, 193, 9, 71, 69, 21, 54, 192, 49, 126, 61, 62, 94, 242, 62, 233, 25, 102, 54, 164, 173, 240, 23, 79, 254, 0, 0, 208, 39, 171, 43, 187, 72, 183, 61, 252, 3, 81, 4, 139, 126, 208, 2, 247, 7, 112, 25, 99, 100, 192, 37, 186, 81, 134, 19, 81, 207, 131, 35, 144, 27, 0, 0, 16, 209, 211, 0, 121, 157, 161, 7, 87, 27, 229, 7, 214, 164, 242, 46, 181, 154, 75, 60, 5, 70, 242, 21, 243, 230, 181, 38, 17, 187, 151, 24, 109, 155, 0, 0, 60, 213, 251, 8, 236, 232, 48, 3, 223, 205, 98, 28, 43, 28, 227, 32, 226, 135, 154, 1, 149, 74, 77, 46, 219, 232, 52, 11, 189, 158, 202, 9, 124, 78, 0, 0, 230, 170, 220, 23, 96, 80, 206, 2, 62, 211, 125, 63, 47, 133, 229, 2, 83, 27, 104, 47, 183, 125, 66, 63, 22, 142, 177, 16, 39, 155, 29, 39, 116, 23, 0, 0, 255, 179, 33, 37, 147, 17, 166, 56, 206, 80, 167, 26, 250, 197, 1, 15, 35, 165, 36, 46, 166, 175, 52, 17, 94, 199, 85, 20, 50, 4, 140, 19, 72, 2, 0, 0, 126, 218, 105, 2, 228, 146, 107, 48, 188, 139, 172, 35, 164, 183, 1, 28, 173, 235, 14, 45, 172, 240, 172, 48, 126, 208, 48, 62, 136, 42, 40, 52, 25, 150, 0, 0, 185, 167, 75, 0, 234, 231, 173, 37, 31, 117, 65, 7, 12, 28, 169, 53, 32, 78, 149, 44, 156, 53, 220, 38, 247, 126, 229, 44, 237, 179, 73, 49, 193, 22, 0, 0, 65, 215, 91, 28, 148, 142, 111, 29, 196, 156, 154, 28, 111, 0, 87, 29, 236, 222, 148, 10, 114, 22, 157, 24, 98, 144, 67, 49, 0, 13, 223, 31, 21, 219, 0, 0, 250, 131, 102, 35, 234, 33, 217, 32, 94, 130, 192, 14, 224, 212, 134, 32, 149, 102, 123, 18, 209, 157, 115, 34, 122, 248, 26, 19, 254, 212, 53, 15, 151, 3, 0, 0, 127, 87, 74, 63, 221, 202, 126, 61, 237, 29, 152, 62, 99, 56, 33, 30, 215, 108, 162, 53, 202, 216, 74, 56, 67, 54, 58, 10, 195, 48, 139, 22, 207, 56, 0, 0, 6, 111, 191, 0, 103, 230, 44, 32, 113, 181, 67, 16, 137, 204, 4, 15, 113, 101, 87, 32, 192, 210, 19, 48, 194, 17, 21, 15, 187, 156, 238, 38, 106, 186, 0, 0, 81, 181, 29, 56, 193, 189, 175, 12, 254, 170, 151, 6, 235, 61, 69, 23, 158, 142, 189, 24, 149, 203, 47, 8, 32, 3, 27, 33, 210, 44, 142, 7, 119, 19, 0, 0, 67, 26, 35, 49, 193, 231, 123, 52, 159, 59, 212, 26, 153, 53, 69, 53, 68, 47, 68, 30, 147, 65, 101, 59, 138, 45, 221, 4, 243, 9, 51, 47, 197, 53, 0, 0, 246, 200, 32, 22, 20, 185, 220, 54, 231, 10, 207, 35, 1, 51, 233, 61, 76, 157, 88, 58, 219, 130, 96, 57, 52, 231, 108, 52, 229, 142, 92, 29, 54, 14, 0, 0, 9, 6, 212, 61, 91, 241, 2, 61, 107, 215, 28, 24, 3, 38, 100, 16, 199, 106, 53, 8, 22, 191, 196, 11, 18, 202, 107, 24, 21, 23, 9, 39, 71, 253, 0, 0, 83, 202, 100, 42, 217, 196, 139, 55, 57, 71, 202, 33, 201, 181, 235, 4, 145, 253, 65, 24, 242, 144, 94, 43, 44, 255, 254, 10, 165, 73, 237, 51, 105, 48, 0, 0, 127, 154, 121, 43, 212, 11, 220, 54, 36, 132, 142, 59, 84, 179, 45, 6, 79, 84, 125, 44, 188, 230, 58, 54, 222, 75, 134, 13, 179, 142, 10, 0, 64, 108, 0, 0, 50, 30, 200, 19, 179, 32, 115, 45, 104, 63, 72, 32, 32, 83, 175, 30, 192, 189, 220, 29, 56, 168, 13, 46, 144, 230, 91, 35, 45, 76, 5, 55, 194, 149, 0, 0, 182, 39, 251, 0, 161, 248, 9, 9, 99, 87, 48, 36, 175, 108, 143, 27, 199, 165, 106, 40, 133, 181, 226, 8, 15, 177, 177, 56, 157, 111, 143, 19, 167, 254, 0, 0, 111, 185, 60, 50, 223, 246, 116, 0, 119, 183, 247, 51, 229, 90, 214, 26, 18, 147, 175, 54, 50, 123, 211, 25, 207, 151, 50, 49, 194, 230, 54, 26, 5, 110, 0, 0, 86, 151, 136, 62, 166, 107, 96, 55, 37, 187, 4, 48, 94, 38, 217, 30, 242, 243, 153, 24, 156, 236, 101, 51, 38, 130, 234, 31, 132, 204, 240, 34, 46, 118, 0, 0, 116, 183, 166, 60, 129, 103, 137, 23, 226, 165, 79, 8, 82, 204, 182, 28, 25, 71, 227, 2, 38, 197, 19, 51, 199, 195, 151, 62, 188, 130, 9, 37, 40, 192, 0, 0, 234, 210, 117, 9, 92, 122, 221, 27, 162, 142, 78, 1, 132, 62, 171, 20, 30, 169, 244, 8, 140, 236, 246, 38, 225, 72, 83, 9, 216, 247, 81, 31, 7, 223, 0, 0, 149, 111, 147, 49, 120, 182, 240, 40, 122, 39, 221, 59, 19, 110, 177, 7, 138, 124, 82, 34, 98, 114, 9, 33, 76, 66, 244, 55, 59, 0, 162, 30, 97, 248, 0, 0, 215, 146, 76, 60, 238, 71, 18, 46, 69, 27, 57, 20, 185, 91, 211, 54, 53, 41, 20, 11, 205, 160, 122, 31, 225, 50, 160, 61, 244, 98, 93, 31, 62, 159, 0, 0, 221, 6, 73, 49, 62, 255, 238, 50, 134, 17, 78, 41, 245, 192, 136, 10, 69, 2, 21, 43, 46, 135, 172, 24, 136, 181, 102, 20, 223, 169, 7, 33, 210, 236, 0, 0, 131, 196, 168, 50, 202, 92, 131, 43, 53, 172, 64, 16, 49, 34, 195, 18, 23, 129, 82, 57, 187, 72, 15, 35, 195, 237, 249, 12, 215, 94, 87, 30, 204, 160, 0, 0, 169, 107, 204, 18, 86, 209, 89, 2, 85, 96, 147, 54, 247, 198, 35, 13, 107, 120, 223, 49, 200, 37, 63, 29, 35, 238, 115, 56, 44, 190, 72, 0, 195, 171, 0, 0, 238, 58, 221, 5, 175, 109, 60, 28, 33, 47, 109, 57, 163, 162, 78, 5, 19, 202, 118, 41, 26, 107, 170, 8, 14, 206, 124, 60, 84, 69, 41, 20, 28, 109, 0, 0, 247, 151, 245, 61, 147, 83, 141, 59, 223, 58, 213, 14, 170, 66, 140, 7, 133, 116, 212, 7, 138, 0, 200, 9, 119, 201, 253, 61, 170, 129, 35, 5, 255, 175, 0, 0, 187, 208, 166, 36, 223, 166, 50, 30, 198, 253, 26, 26, 189, 72, 76, 39, 101, 143, 65, 38, 162, 98, 155, 6, 49, 63, 159, 63, 229, 98, 88, 7, 95, 94, 0, 0, 249, 234, 51, 16, 228, 17, 14, 26, 161, 83, 246, 6, 148, 203, 87, 21, 114, 218, 33, 39, 19, 52, 175, 61, 88, 115, 111, 62, 169, 193, 10, 20, 177, 215, 0, 0, 63, 94, 0, 15, 145, 215, 166, 54, 45, 189, 57, 44, 111, 140, 163, 61, 90, 73, 161, 1, 56, 107, 46, 15, 253, 255, 39, 36, 5, 207, 154, 34, 19, 248, 0, 0, 183, 126, 53, 47, 128, 128, 95, 11, 52, 33, 190, 20, 85, 111, 16, 59, 244, 81, 203, 37, 234, 149, 87, 0, 157, 159, 189, 14, 237, 251, 206, 35, 117, 202, 0, 0, 57, 222, 189, 23, 16, 169, 0, 11, 149, 50, 4, 54, 109, 94, 56, 17, 21, 211, 104, 25, 102, 53, 92, 9, 10, 225, 240, 60, 157, 253, 68, 16, 230, 118, 0, 0, 1, 172, 1, 25, 180, 212, 197, 18, 43, 3, 210, 22, 173, 244, 140, 10, 94, 211, 240, 1, 26, 92, 155, 1, 119, 245, 92, 41, 147, 123, 227, 55, 13, 201, 0, 0, 141, 238, 120, 0, 115, 36, 20, 60, 66, 148, 145, 6, 148, 51, 200, 47, 78, 246, 79, 27, 170, 142, 201, 61, 95, 226, 155, 26, 103, 97, 235, 21, 142, 208, 0, 0, 134, 62, 166, 45, 112, 211, 95, 38, 222, 217, 46, 2, 229, 243, 189, 15, 18, 244, 109, 62, 213, 185, 203, 5, 214, 114, 141, 8, 173, 18, 230, 37, 46, 133, 0, 0, 236, 41, 145, 2, 193, 25, 69, 22, 129, 84, 130, 36, 199, 179, 142, 43, 12, 8, 29, 19, 179, 3, 250, 34, 245, 117, 210, 4, 53, 121, 33, 48, 166, 125, 0, 0, 14, 255, 217, 44, 138, 187, 66, 45, 174, 134, 165, 12, 149, 33, 48, 18, 4, 191, 39, 22, 36, 29, 8, 52, 17, 117, 133, 1, 125, 238, 26, 5, 152, 244, 0, 0, 34, 79, 101, 17, 85, 82, 15, 62, 148, 238, 170, 49, 8, 229, 252, 61, 178, 79, 217, 41, 249, 6, 64, 58, 27, 226, 230, 27, 112, 253, 51, 36, 208, 144, 0, 0, 225, 67, 26, 32, 93, 129, 119, 61, 64, 135, 63, 26, 79, 89, 141, 53, 109, 51, 112, 63, 26, 120, 8, 60, 83, 169, 97, 15, 235, 74, 135, 38, 86, 205, 0, 0, 250, 25, 107, 7, 71, 217, 187, 45, 113, 157, 129, 40, 65, 27, 184, 53, 217, 46, 41, 33, 32, 196, 176, 8, 115, 204, 30, 29, 60, 31, 22, 38, 71, 218, 0, 0, 247, 90, 111, 50, 172, 187, 137, 42, 6, 194, 63, 21, 165, 79, 244, 30, 166, 158, 86, 22, 248, 29, 164, 13, 23, 29, 240, 10, 243, 38, 222, 53, 177, 235, 0, 0, 189, 93, 19, 57, 150, 237, 75, 54, 236, 49, 134, 29, 206, 235, 33, 48, 240, 124, 137, 41, 11, 214, 171, 30, 129, 173, 230, 30, 55, 42, 65, 29, 228, 227, 0, 0, 93, 4, 72, 7, 249, 188, 26, 36, 150, 218, 149, 44, 215, 191, 128, 40, 165, 254, 63, 56, 74, 101, 32, 35, 185, 64, 108, 60, 114, 2, 254, 22, 10, 147, 0, 0, 95, 69, 238, 13, 151, 231, 194, 47, 92, 7, 228, 12, 186, 249, 255, 25, 255, 74, 219, 11, 224, 227, 76, 17, 71, 10, 155, 10, 28, 250, 91, 25, 140, 126, 0, 0, 186, 156, 27, 23, 96, 166, 247, 28, 113, 98, 70, 47, 209, 89, 180, 40, 74, 59, 165, 3, 32, 61, 216, 61, 163, 242, 64, 7, 140, 178, 140, 49, 221, 189, 0, 0, 158, 181, 152, 38, 109, 174, 229, 29, 67, 122, 68, 19, 98, 73, 214, 12, 10, 38, 199, 35, 207, 106, 13, 44, 190, 21, 235, 21, 106, 36, 126, 16, 248, 61, 0, 0, 245, 186, 146, 43, 229, 153, 227, 51, 139, 159, 148, 20, 200, 158, 33, 63, 123, 134, 243, 28, 196, 163, 235, 10, 160, 29, 12, 9, 44, 230, 183, 57, 143, 179, 0, 0, 145, 184, 203, 43, 144, 64, 197, 42, 227, 190, 108, 50, 247, 144, 49, 31, 143, 154, 143, 63, 208, 169, 110, 32, 130, 30, 190, 42, 236, 192, 90, 49, 56, 199, 0, 0, 195, 132, 154, 41, 101, 215, 156, 31, 145, 254, 12, 8, 222, 187, 83, 12, 130, 187, 187, 63, 178, 186, 60, 6, 247, 55, 37, 45, 70, 37, 94, 45, 63, 137, 0, 0, 141, 213, 97, 7, 206, 188, 234, 18, 243, 226, 96, 13, 2, 249, 38, 19, 202, 122, 223, 32, 92, 141, 2, 9, 10, 97, 20, 54, 143, 224, 73, 24, 196, 184, 0, 0, 164, 81, 16, 29, 234, 130, 58, 14, 182, 197, 7, 33, 23, 30, 65, 29, 63, 5, 197, 51, 95, 218, 99, 17, 74, 209, 55, 14, 92, 20, 91, 54, 158, 143, 0, 0, 64, 0, 11, 5, 16, 204, 194, 54, 194, 173, 52, 1, 124, 110, 31, 61, 243, 113, 54, 26, 250, 79, 38, 3, 53, 122, 31, 39, 64, 220, 167, 27, 213, 8, 0, 0, 161, 208, 63, 27, 233, 153, 56, 22, 235, 43, 120, 33, 131, 28, 241, 53, 246, 133, 178, 57, 53, 42, 84, 52, 255, 33, 170, 41, 66, 175, 107, 33, 33, 161, 0, 0, 127, 59, 87, 19, 124, 143, 149, 21, 15, 39, 182, 48, 180, 23, 135, 38, 136, 55, 90, 38, 239, 93, 62, 8, 30, 52, 230, 60, 11, 181, 140, 60, 19, 220, 0, 0, 166, 43, 31, 12, 161, 72, 179, 10, 196, 177, 4, 52, 5, 28, 85, 17, 112, 118, 10, 41, 18, 106, 67, 16, 199, 195, 64, 35, 167, 16, 160, 46, 9, 201, 0, 0, 235, 156, 174, 7, 46, 100, 189, 0, 75, 209, 242, 14, 156, 122, 8, 27, 34, 168, 25, 33, 108, 151, 85, 6, 175, 115, 240, 55, 119, 128, 121, 11, 192, 37, 0, 0, 117, 226, 198, 11, 77, 52, 36, 28, 100, 114, 88, 38, 194, 119, 144, 49, 55, 213, 17, 45, 62, 55, 56, 33, 200, 192, 131, 35, 4, 178, 180, 58, 159, 138, 0, 0, 52, 60, 90, 44, 219, 99, 2, 62, 225, 159, 148, 21, 10, 176, 160, 51, 174, 88, 62, 46, 158, 50, 125, 46, 138, 206, 73, 14, 62, 203, 70, 39, 221, 254, 0, 0, 20, 119, 61, 33, 211, 47, 213, 10, 118, 41, 248, 27, 166, 81, 173, 43, 173, 0, 75, 15, 178, 196, 20, 58, 11, 11, 142, 59, 20, 198, 48, 9, 46, 165, 0, 0, 150, 163, 182, 42, 70, 83, 57, 45, 105, 7, 54, 17, 104, 228, 134, 0, 115, 179, 136, 4, 122, 253, 181, 56, 222, 194, 72, 42, 27, 175, 161, 12, 14, 62, 0, 0, 126, 226, 128, 25, 35, 121, 204, 58, 162, 246, 104, 52, 124, 16, 4, 44, 106, 198, 63, 5, 173, 119, 248, 7, 243, 100, 121, 51, 142, 190, 92, 32, 68, 202, 0, 0, 236, 35, 16, 52, 136, 97, 205, 43, 10, 87, 207, 62, 219, 61, 118, 17, 86, 175, 185, 2, 38, 128, 128, 11, 152, 132, 210, 50, 48, 32, 76, 46, 74, 52, 0, 0, 135, 235, 30, 30, 164, 96, 226, 19, 112, 93, 153, 3, 191, 218, 165, 19, 252, 95, 76, 17, 169, 71, 203, 35, 63, 167, 98, 4, 201, 10, 193, 10, 28, 110, 0, 0, 75, 193, 246, 8, 150, 125, 186, 28, 67, 1, 37, 41, 206, 151, 203, 53, 209, 119, 40, 23, 242, 141, 29, 19, 38, 30, 184, 37, 45, 82, 153, 24, 149, 216, 0, 0, 31, 153, 125, 29, 93, 251, 216, 36, 23, 126, 6, 59, 202, 88, 163, 16, 3, 235, 64, 3, 99, 32, 24, 59, 40, 231, 234, 7, 175, 60, 142, 42, 191, 254, 0, 0, 86, 183, 39, 33, 253, 31, 234, 2, 72, 112, 9, 58, 42, 249, 162, 16, 3, 22, 180, 32, 65, 105, 139, 13, 45, 103, 18, 31, 91, 220, 11, 30, 140, 109, 0, 0, 113, 37, 23, 63, 42, 221, 71, 21, 166, 204, 205, 23, 139, 182, 169, 14, 78, 175, 77, 19, 219, 180, 160, 38, 69, 17, 145, 27, 191, 37, 194, 55, 174, 153, 0, 0, 122, 241, 140, 53, 205, 105, 184, 55, 36, 53, 130, 24, 233, 114, 23, 62, 241, 248, 151, 0, 109, 188, 107, 22, 208, 168, 172, 55, 111, 101, 183, 47, 202, 235, 0, 0, 205, 12, 170, 28, 125, 113, 179, 17, 196, 149, 206, 10, 180, 132, 180, 62, 16, 107, 46, 3, 159, 109, 40, 0, 44, 176, 156, 43, 200, 227, 131, 51, 211, 71, 0, 0, 91, 92, 133, 44, 86, 148, 187, 51, 187, 175, 200, 23, 128, 134, 88, 33, 17, 40, 252, 23, 120, 218, 104, 12, 83, 68, 226, 12, 245, 146, 75, 19, 223, 232, 0, 0, 80, 86, 70, 46, 176, 156, 87, 39, 213, 215, 228, 33, 199, 87, 237, 24, 150, 197, 50, 47, 103, 61, 109, 19, 68, 100, 178, 57, 31, 49, 92, 63, 87, 108, 0, 0, 84, 228, 231, 18, 105, 111, 61, 2, 13, 21, 230, 48, 195, 251, 187, 12, 254, 98, 22, 24, 234, 8, 24, 18, 18, 41, 131, 10, 59, 198, 245, 52, 104, 64, 0, 0, 30, 25, 239, 24, 151, 55, 107, 30, 39, 51, 55, 60, 68, 123, 72, 35, 152, 209, 56, 29, 246, 101, 81, 48, 158, 171, 122, 36, 82, 201, 237, 20, 216, 140, 0, 0, 57, 217, 197, 6, 225, 183, 94, 33, 224, 61, 147, 58, 222, 161, 104, 29, 164, 126, 2, 10, 131, 185, 204, 47, 85, 11, 94, 2, 118, 108, 179, 3, 85, 18, 0, 0, 201, 87, 231, 25, 21, 63, 157, 10, 25, 67, 141, 13, 251, 7, 221, 34, 131, 114, 74, 50, 93, 240, 144, 35, 68, 117, 122, 45, 28, 62, 205, 32, 143, 123, 0, 0, 111, 165, 200, 22, 25, 171, 66, 35, 19, 66, 55, 15, 13, 21, 79, 2, 133, 143, 208, 58, 235, 212, 222, 46, 105, 76, 93, 24, 237, 176, 198, 25, 77, 148, 0, 0, 137, 226, 123, 26, 151, 113, 211, 39, 235, 23, 101, 16, 55, 93, 48, 53, 103, 25, 198, 58, 76, 216, 228, 16, 193, 244, 255, 1, 212, 222, 101, 25, 16, 167, 0, 0, 90, 241, 8, 46, 98, 40, 174, 59, 186, 0, 41, 1, 114, 91, 121, 26, 253, 5, 195, 19, 107, 149, 13, 44, 230, 207, 160, 25, 66, 115, 164, 19, 165, 134, 0, 0, 8, 131, 56, 1, 159, 71, 147, 20, 211, 84, 82, 51, 150, 68, 167, 4, 119, 103, 104, 53, 181, 65, 163, 10, 167, 3, 70, 56, 233, 13, 82, 24, 238, 207, 0, 0, 3, 110, 103, 15, 89, 41, 84, 36, 212, 237, 132, 62, 164, 205, 241, 63, 206, 97, 135, 30, 92, 205, 144, 61, 176, 142, 81, 23, 165, 202, 0, 37, 218, 184, 0, 0, 231, 246, 253, 14, 157, 147, 35, 18, 17, 181, 243, 31, 101, 19, 22, 51, 146, 176, 8, 40, 216, 37, 115, 38, 124, 77, 30, 26, 1, 18, 233, 55, 4, 40, 0, 0, 107, 52, 225, 6, 119, 18, 102, 40, 94, 28, 175, 5, 14, 196, 158, 47, 90, 192, 82, 17, 83, 124, 216, 49, 84, 190, 16, 45, 96, 194, 63, 26, 144, 6, 0, 0, 19, 108, 34, 23, 83, 41, 214, 46, 231, 38, 96, 12, 101, 78, 162, 61, 164, 42, 68, 6, 66, 175, 108, 23, 168, 109, 226, 61, 47, 36, 248, 56, 99, 184, 0, 0, 161, 246, 161, 28, 243, 71, 154, 3, 163, 241, 207, 8, 13, 69, 47, 35, 6, 225, 108, 40, 199, 114, 113, 27, 40, 21, 118, 25, 201, 242, 36, 13, 140, 137, 0, 0, 124, 100, 79, 22, 60, 8, 183, 18, 202, 121, 189, 50, 231, 229, 243, 41, 178, 147, 110, 44, 74, 145, 80, 17, 216, 73, 85, 42, 213, 170, 97, 22, 247, 117, 0, 0, 152, 57, 30, 61, 240, 128, 167, 41, 138, 50, 4, 58, 69, 46, 178, 21, 94, 78, 39, 42, 8, 92, 103, 10, 165, 1, 191, 24, 164, 180, 191, 56, 19, 178, 0, 0, 30, 184, 95, 50, 24, 247, 178, 48, 94, 23, 237, 61, 250, 150, 5, 13, 213, 195, 59, 36, 14, 254, 122, 24, 61, 44, 193, 19, 203, 131, 176, 35, 159, 34, 0, 0, 52, 226, 91, 34, 178, 127, 248, 2, 112, 80, 243, 29, 195, 249, 248, 32, 14, 6, 110, 32, 69, 154, 46, 52, 209, 229, 147, 63, 177, 5, 182, 14, 59, 75, 0, 0, 98, 131, 14, 18, 14, 248, 237, 24, 64, 184, 17, 50, 179, 100, 255, 57, 65, 76, 192, 12, 246, 183, 165, 23, 135, 199, 201, 43, 118, 225, 142, 0, 236, 94, 0, 0, 94, 245, 137, 34, 159, 210, 152, 37, 123, 112, 118, 44, 56, 60, 172, 29, 41, 190, 101, 9, 158, 192, 70, 9, 32, 96, 249, 4, 108, 183, 45, 34, 123, 159, 0, 0, 222, 75, 30, 62, 151, 237, 52, 15, 27, 43, 10, 49, 58, 184, 77, 57, 192, 31, 199, 15, 166, 208, 26, 5, 227, 123, 15, 1, 193, 49, 225, 61, 249, 50, 0, 0, 43, 29, 254, 29, 48, 114, 82, 25, 81, 142, 135, 22, 121, 66, 253, 36, 196, 164, 115, 59, 79, 127, 43, 51, 118, 62, 142, 4, 221, 114, 250, 16, 138, 213, 0, 0, 34, 9, 213, 12, 110, 229, 201, 51, 255, 251, 214, 11, 87, 136, 110, 54, 84, 107, 39, 40, 160, 76, 164, 28, 10, 241, 60, 8, 22, 232, 154, 33, 23, 252, 0, 0, 94, 121, 156, 36, 248, 70, 5, 9, 225, 5, 232, 28, 166, 170, 1, 17, 237, 78, 234, 39, 240, 112, 90, 54, 214, 12, 49, 24, 68, 92, 78, 28, 210, 33, 0, 0, 206, 142, 32, 25, 14, 187, 4, 0, 27, 118, 251, 45, 146, 18, 101, 28, 214, 195, 180, 43, 72, 21, 110, 13, 119, 161, 206, 26, 29, 44, 109, 62, 197, 148, 0, 0, 93, 223, 192, 35, 227, 93, 132, 6, 47, 121, 106, 21, 212, 254, 123, 6, 32, 171, 127, 29, 29, 229, 106, 43, 216, 167, 51, 59, 7, 17, 133, 58, 15, 232, 0, 0, 120, 236, 201, 42, 109, 164, 208, 50, 159, 234, 34, 51, 43, 160, 87, 5, 45, 71, 148, 10, 143, 50, 218, 37, 232, 113, 7, 32, 227, 216, 159, 55, 209, 238, 0, 0, 85, 45, 89, 23, 179, 103, 13, 48, 146, 1, 53, 14, 208, 81, 110, 53, 6, 177, 227, 60, 140, 165, 189, 63, 138, 96, 82, 16, 40, 241, 182, 49, 46, 93, 0, 0, 167, 131, 81, 47, 58, 116, 185, 25, 66, 23, 21, 17, 107, 243, 158, 10, 14, 149, 214, 12, 154, 232, 67, 28, 143, 181, 94, 36, 27, 39, 126, 51, 146, 10, 0, 0, 92, 159, 143, 62, 39, 45, 125, 36, 25, 165, 128, 24, 86, 120, 124, 24, 115, 77, 64, 31, 133, 208, 184, 50, 226, 47, 116, 63, 70, 236, 112, 7, 55, 172, 0, 0, 60, 80, 90, 50, 204, 255, 160, 30, 209, 225, 81, 39, 59, 22, 77, 37, 34, 53, 231, 20, 201, 156, 7, 4, 242, 127, 71, 26, 194, 97, 176, 5, 22, 197, 0, 0, 70, 52, 227, 25, 84, 35, 135, 18, 223, 133, 243, 42, 20, 241, 78, 34, 64, 122, 161, 34, 8, 244, 2, 35, 52, 201, 64, 24, 60, 133, 14, 0, 66, 137, 0, 0, 137, 118, 56, 38, 3, 40, 78, 3, 132, 249, 116, 30, 158, 205, 93, 63, 107, 224, 228, 61, 59, 180, 181, 44, 216, 164, 119, 16, 105, 101, 229, 0, 253, 169, 0, 0, 38, 203, 19, 57, 86, 50, 202, 53, 3, 109, 189, 19, 0, 103, 208, 58, 153, 152, 92, 16, 213, 63, 145, 54, 44, 138, 42, 52, 40, 204, 154, 9, 112, 39, 0, 0, 162, 167, 72, 51, 207, 92, 156, 63, 187, 190, 21, 8, 243, 70, 50, 16, 233, 36, 179, 50, 31, 52, 73, 11, 85, 165, 177, 13, 108, 158, 23, 47, 73, 246, 0, 0, 71, 130, 94, 25, 133, 128, 170, 2, 175, 209, 108, 40, 85, 17, 247, 47, 151, 144, 186, 56, 115, 128, 155, 23, 142, 23, 210, 62, 242, 224, 52, 52, 228, 117, 0, 0, 34, 45, 152, 25, 117, 246, 143, 40, 60, 137, 173, 41, 186, 109, 173, 54, 125, 212, 38, 55, 30, 59, 92, 62, 65, 7, 153, 16, 80, 93, 168, 16, 206, 31, 0, 0, 35, 51, 51, 38, 54, 209, 231, 17, 71, 191, 74, 15, 26, 7, 239, 46, 156, 132, 218, 4, 102, 129, 53, 8, 240, 3, 191, 27, 216, 12, 142, 45, 209, 62, 0, 0, 163, 27, 214, 53, 34, 241, 79, 44, 148, 114, 143, 55, 66, 40, 202, 45, 169, 158, 146, 15, 162, 37, 38, 31, 217, 117, 238, 52, 214, 34, 105, 11, 79, 216, 0, 0, 191, 128, 57, 51, 82, 95, 65, 9, 175, 11, 208, 13, 148, 11, 220, 40, 104, 67, 221, 8, 141, 220, 245, 27, 132, 27, 24, 24, 157, 26, 188, 52, 253, 112, 0, 0, 133, 87, 183, 32, 58, 163, 186, 11, 97, 165, 116, 29, 225, 96, 13, 4, 10, 107, 89, 46, 71, 52, 4, 41, 87, 105, 105, 24, 53, 52, 176, 50, 223, 94, 0, 0, 112, 96, 225, 4, 243, 238, 1, 55, 93, 145, 214, 47, 199, 128, 96, 40, 242, 67, 117, 22, 117, 148, 35, 41, 59, 49, 4, 23, 243, 247, 94, 26, 1, 163, 0, 0, 161, 126, 23, 30, 16, 104, 52, 48, 48, 161, 17, 10, 240, 253, 118, 13, 23, 155, 15, 20, 151, 232, 39, 32, 129, 80, 79, 62, 217, 62, 71, 62, 112, 115, 0, 0, 252, 17, 128, 19, 0, 156, 4, 28, 38, 86, 40, 23, 235, 153, 90, 22, 131, 77, 10, 32, 8, 194, 76, 44, 86, 17, 177, 30, 5, 194, 232, 4, 131, 110, 0, 0, 125, 171, 21, 63, 232, 167, 45, 43, 166, 249, 81, 28, 186, 86, 228, 43, 38, 4, 195, 26, 7, 200, 182, 4, 26, 76, 32, 15, 9, 247, 98, 32, 71, 193, 0, 0, 167, 107, 14, 16, 227, 38, 157, 14, 245, 247, 22, 9, 209, 22, 187, 13, 61, 180, 225, 25, 147, 226, 128, 7, 189, 242, 81, 8, 225, 101, 66, 42, 82, 249, 0, 0, 193, 228, 117, 1, 148, 187, 235, 54, 152, 43, 42, 6, 211, 158, 197, 21, 85, 246, 160, 63, 137, 139, 218, 13, 97, 248, 235, 60, 42, 194, 150, 14, 169, 216, 0, 0, 147, 14, 170, 3, 138, 150, 1, 36, 38, 246, 177, 47, 235, 80, 142, 11, 143, 58, 137, 30, 118, 134, 198, 0, 4, 117, 238, 63, 116, 140, 87, 27, 1, 148, 0, 0, 194, 218, 173, 7, 162, 73, 187, 35, 163, 7, 123, 37, 234, 206, 13, 33, 244, 215, 111, 46, 59, 213, 116, 21, 3, 100, 217, 20, 17, 151, 187, 12, 80, 103, 0, 0, 123, 177, 102, 2, 184, 24, 210, 3, 43, 179, 43, 38, 128, 40, 90, 13, 2, 194, 9, 31, 170, 17, 226, 37, 187, 145, 40, 59, 103, 53, 93, 52, 34, 239, 0, 0, 62, 200, 218, 57, 13, 129, 155, 10, 115, 27, 52, 28, 220, 219, 201, 57, 62, 7, 161, 52, 184, 14, 51, 39, 143, 86, 199, 36, 172, 94, 50, 33, 87, 188, 0, 0, 160, 130, 211, 18, 106, 5, 76, 12, 226, 154, 205, 46, 56, 239, 114, 35, 242, 39, 249, 45, 44, 224, 49, 43, 156, 211, 146, 56, 58, 147, 243, 59, 247, 181, 0, 0, 50, 181, 180, 37, 238, 42, 188, 40, 91, 140, 207, 26, 74, 91, 194, 62, 113, 211, 221, 11, 131, 27, 95, 37, 192, 83, 35, 63, 112, 212, 22, 21, 67, 104, 0, 0, 165, 255, 44, 1, 145, 145, 164, 57, 71, 92, 204, 40, 25, 130, 80, 59, 137, 67, 98, 20, 239, 99, 83, 29, 8, 100, 7, 49, 185, 172, 244, 48, 221, 28, 0, 0, 78, 149, 33, 21, 115, 98, 155, 55, 138, 82, 107, 51, 154, 16, 38, 7, 196, 138, 176, 2, 229, 175, 73, 44, 253, 99, 138, 31, 188, 44, 131, 26, 71, 30, 0, 0, 47, 242, 169, 52, 228, 144, 127, 13, 173, 226, 168, 23, 72, 113, 6, 2, 204, 176, 53, 8, 82, 46, 46, 62, 33, 159, 147, 14, 151, 124, 214, 44, 204, 42, 0, 0, 39, 73, 92, 55, 206, 114, 215, 45, 183, 80, 165, 27, 177, 239, 245, 18, 21, 241, 237, 48, 183, 223, 232, 4, 146, 81, 46, 45, 34, 86, 58, 41, 24, 213, 0, 0, 212, 78, 176, 63, 248, 24, 235, 45, 250, 255, 7, 19, 196, 194, 12, 51, 8, 226, 141, 39, 73, 20, 116, 62, 99, 100, 147, 43, 117, 226, 108, 33, 173, 144, 0, 0, 80, 241, 110, 11, 35, 53, 117, 36, 217, 148, 40, 24, 133, 175, 190, 43, 57, 184, 34, 50, 9, 101, 47, 55, 255, 26, 38, 56, 40, 136, 141, 30, 80, 14, 0, 0, 120, 182, 183, 48, 206, 108, 215, 9, 102, 129, 99, 15, 111, 196, 16, 15, 241, 118, 108, 43, 9, 41, 175, 33, 25, 186, 49, 2, 57, 205, 92, 18, 110, 24, 0, 0, 193, 31, 217, 56, 203, 219, 129, 30, 202, 93, 83, 9, 81, 137, 220, 1, 17, 126, 230, 55, 2, 151, 32, 63, 167, 74, 216, 59, 1, 38, 57, 24, 212, 192, 0, 0, 184, 31, 66, 51, 46, 151, 27, 60, 12, 93, 165, 53, 187, 124, 92, 18, 152, 18, 36, 55, 14, 211, 172, 1, 126, 46, 246, 27, 219, 211, 96, 35, 28, 6, 0, 0, 128, 205, 60, 14, 161, 217, 123, 37, 41, 221, 252, 38, 206, 210, 196, 25, 128, 92, 235, 5, 56, 100, 73, 14, 169, 123, 75, 59, 0, 100, 182, 26, 252, 109, 0, 0, 164, 53, 107, 47, 98, 248, 146, 4, 135, 180, 127, 50, 170, 233, 205, 39, 136, 173, 104, 58, 204, 1, 201, 24, 115, 59, 81, 46, 35, 136, 142, 45, 166, 246, 0, 0, 166, 34, 244, 1, 178, 191, 173, 43, 44, 134, 225, 30, 157, 91, 93, 53, 25, 111, 24, 32, 213, 19, 220, 52, 202, 177, 56, 17, 11, 0, 42, 50, 247, 61, 0, 0, 17, 76, 149, 38, 162, 143, 160, 37, 139, 1, 13, 22, 5, 15, 41, 42, 127, 255, 120, 7, 84, 60, 108, 52, 32, 98, 55, 44, 161, 48, 10, 63, 162, 135, 0, 0, 69, 139, 42, 39, 184, 204, 184, 21, 183, 36, 129, 39, 202, 207, 36, 18, 204, 50, 117, 18, 131, 54, 82, 6, 123, 249, 206, 46, 106, 209, 98, 20, 173, 51, 0, 0, 182, 106, 112, 34, 171, 28, 29, 57, 218, 192, 83, 46, 116, 7, 205, 2, 60, 254, 76, 56, 240, 242, 187, 21, 69, 104, 26, 8, 158, 27, 129, 11, 71, 225, 0, 0, 5, 222, 88, 29, 90, 168, 161, 27, 83, 39, 205, 19, 81, 85, 39, 22, 170, 248, 33, 6, 50, 94, 70, 26, 63, 104, 252, 24, 241, 145, 170, 36, 205, 130, 0, 0, 182, 79, 168, 7, 8, 149, 235, 47, 30, 2, 21, 58, 67, 29, 218, 8, 196, 235, 185, 8, 121, 128, 53, 45, 232, 93, 239, 10, 62, 1, 178, 36, 175, 28, 0, 0, 9, 145, 20, 39, 64, 6, 198, 26, 97, 103, 206, 34, 90, 90, 48, 7, 236, 34, 22, 16, 252, 227, 147, 41, 129, 164, 83, 46, 93, 178, 22, 46, 36, 188, 0, 0, 17, 89, 149, 10, 133, 63, 163, 29, 219, 82, 237, 13, 152, 168, 133, 31, 16, 151, 131, 23, 207, 166, 191, 39, 88, 210, 80, 22, 194, 107, 90, 63, 91, 112, 0, 0, 228, 0, 210, 63, 79, 26, 223, 46, 216, 114, 46, 36, 138, 212, 206, 31, 41, 250, 81, 0, 213, 7, 246, 24, 126, 10, 153, 63, 220, 194, 4, 41, 74, 225, 0, 0, 218, 192, 196, 30, 50, 17, 237, 45, 81, 51, 234, 35, 28, 158, 21, 35, 232, 46, 22, 31, 96, 182, 6, 39, 35, 57, 243, 53, 142, 189, 116, 46, 104, 143, 0, 0, 130, 255, 31, 16, 229, 253, 242, 8, 223, 191, 16, 21, 165, 63, 139, 58, 187, 93, 33, 62, 218, 10, 67, 54, 225, 109, 152, 35, 129, 110, 203, 39, 42, 102, 0, 0, 250, 9, 56, 18, 183, 227, 138, 35, 225, 75, 149, 29, 212, 44, 23, 33, 253, 8, 31, 5, 201, 143, 205, 36, 186, 40, 242, 9, 148, 139, 111, 7, 56, 56, 0, 0, 82, 237, 31, 51, 96, 212, 193, 53, 219, 36, 143, 45, 204, 50, 127, 32, 54, 204, 177, 14, 72, 149, 22, 16, 9, 203, 125, 17, 238, 131, 66, 11, 163, 228, 0, 0, 16, 163, 194, 23, 34, 153, 144, 58, 3, 99, 34, 1, 80, 169, 171, 33, 241, 161, 153, 6, 169, 10, 110, 8, 105, 111, 174, 50, 13, 57, 201, 9, 38, 73, 0, 0, 208, 222, 39, 30, 5, 218, 6, 49, 224, 140, 255, 53, 169, 132, 141, 5, 109, 59, 48, 20, 92, 90, 233, 51, 162, 149, 191, 58, 41, 239, 220, 57, 55, 19, 0, 0, 49, 45, 189, 14, 231, 193, 18, 14, 209, 184, 109, 48, 191, 149, 6, 51, 77, 248, 226, 55, 145, 207, 78, 9, 94, 13, 201, 0, 137, 6, 163, 21, 6, 227, 0, 0, 68, 110, 84, 18, 14, 2, 173, 36, 102, 130, 115, 35, 175, 16, 32, 47, 255, 182, 13, 61, 253, 65, 172, 60, 136, 8, 38, 52, 36, 222, 248, 27, 172, 14, 0, 0, 176, 54, 49, 54, 120, 14, 195, 20, 156, 221, 65, 43, 106, 54, 254, 58, 116, 51, 214, 59, 143, 216, 57, 44, 113, 194, 239, 12, 10, 137, 3, 4, 158, 59, 0, 0, 138, 188, 219, 44, 189, 5, 251, 20, 25, 248, 49, 45, 206, 40, 138, 43, 162, 38, 91, 7, 61, 174, 207, 20, 241, 29, 183, 43, 69, 75, 5, 38, 251, 250, 0, 0, 63, 93, 72, 47, 28, 193, 35, 24, 233, 238, 123, 16, 32, 218, 129, 50, 23, 247, 222, 30, 215, 3, 42, 27, 183, 146, 154, 44, 74, 92, 82, 43, 10, 187, 0, 0, 117, 249, 162, 60, 64, 73, 78, 30, 254, 191, 112, 22, 140, 190, 150, 22, 137, 52, 218, 23, 202, 125, 128, 52, 236, 152, 71, 53, 96, 241, 20, 39, 105, 234, 0, 0, 201, 141, 113, 54, 232, 76, 187, 43, 228, 61, 18, 1, 108, 211, 98, 57, 225, 19, 1, 62, 235, 101, 172, 35, 78, 13, 204, 47, 59, 57, 178, 2, 9, 121, 0, 0, 197, 231, 250, 28, 196, 138, 204, 24, 185, 8, 144, 58, 194, 237, 171, 13, 221, 86, 170, 26, 54, 47, 91, 32, 61, 241, 184, 5, 100, 228, 138, 28, 171, 234, 0, 0, 209, 199, 96, 63, 49, 165, 165, 9, 42, 173, 117, 23, 243, 121, 199, 53, 141, 102, 186, 9, 149, 243, 110, 15, 192, 81, 181, 23, 126, 122, 107, 32, 124, 231, 0, 0, 73, 36, 215, 2, 202, 7, 22, 59, 52, 109, 152, 2, 199, 61, 28, 5, 99, 67, 21, 40, 250, 200, 236, 48, 95, 28, 50, 1, 190, 59, 30, 5, 207, 58, 0, 0, 17, 30, 35, 19, 65, 245, 27, 26, 230, 227, 129, 54, 64, 25, 58, 18, 31, 9, 54, 12, 102, 228, 127, 38, 255, 101, 93, 56, 171, 93, 192, 62, 243, 228, 0, 0, 188, 115, 235, 47, 93, 225, 176, 8, 152, 28, 29, 21, 178, 211, 249, 49, 108, 40, 183, 2, 168, 67, 155, 6, 102, 193, 241, 52, 59, 180, 206, 24, 99, 30, 0, 0, 214, 91, 240, 43, 57, 193, 103, 14, 101, 148, 169, 18, 200, 128, 91, 61, 162, 236, 13, 7, 173, 127, 212, 11, 131, 144, 254, 4, 185, 111, 144, 12, 12, 144, 0, 0, 139, 53, 13, 48, 239, 180, 74, 57, 93, 177, 239, 4, 15, 214, 20, 38, 214, 57, 36, 11, 92, 17, 200, 49, 149, 95, 15, 31, 44, 58, 122, 62, 49, 108, 0, 0, 80, 92, 16, 31, 50, 163, 240, 41, 87, 82, 56, 49, 222, 187, 55, 56, 130, 205, 51, 2, 15, 208, 48, 35, 98, 173, 10, 25, 193, 170, 216, 0, 141, 90, 0, 0, 233, 205, 164, 56, 96, 128, 108, 50, 53, 60, 1, 45, 153, 162, 125, 1, 166, 116, 255, 3, 5, 201, 173, 41, 54, 105, 83, 14, 245, 68, 172, 58, 89, 192, 0, 0, 235, 79, 214, 50, 230, 98, 248, 17, 198, 146, 34, 41, 100, 41, 190, 28, 55, 232, 164, 11, 219, 93, 233, 60, 142, 164, 96, 47, 140, 196, 64, 19, 63, 217, 0, 0, 89, 131, 105, 52, 100, 245, 62, 44, 55, 218, 144, 44, 251, 194, 16, 56, 147, 77, 140, 28, 83, 113, 196, 28, 35, 58, 115, 50, 114, 81, 87, 21, 37, 121, 0, 0, 132, 188, 159, 3, 53, 19, 136, 8, 103, 1, 122, 5, 88, 164, 24, 28, 126, 91, 198, 42, 152, 241, 138, 19, 177, 65, 132, 50, 219, 184, 113, 26, 7, 47, 0, 0, 236, 27, 32, 28, 120, 11, 228, 62, 115, 93, 221, 4, 147, 218, 230, 41, 204, 73, 33, 14, 100, 30, 192, 55, 165, 223, 221, 59, 92, 147, 220, 60, 52, 180, 0, 0, 234, 88, 167, 6, 50, 171, 223, 20, 77, 156, 241, 39, 36, 198, 32, 6, 145, 57, 110, 1, 85, 104, 37, 26, 88, 153, 48, 32, 103, 21, 224, 25, 126, 254, 0, 0, 73, 182, 122, 27, 87, 182, 200, 19, 30, 13, 18, 3, 209, 193, 5, 32, 59, 31, 37, 9, 97, 90, 56, 2, 140, 152, 203, 29, 160, 232, 89, 26, 170, 56, 0, 0, 250, 254, 255, 12, 154, 88, 197, 57, 173, 175, 81, 6, 220, 19, 1, 6, 16, 133, 175, 3, 67, 69, 190, 61, 109, 125, 18, 3, 78, 157, 114, 61, 186, 145, 0, 0, 175, 111, 127, 31, 211, 188, 77, 31, 220, 3, 211, 47, 57, 196, 188, 47, 244, 146, 61, 29, 159, 196, 167, 37, 93, 190, 206, 59, 209, 100, 196, 51, 229, 4, 0, 0, 70, 197, 51, 13, 250, 69, 2, 63, 50, 175, 237, 5, 202, 236, 215, 21, 130, 215, 221, 53, 131, 207, 77, 49, 178, 124, 138, 55, 207, 114, 72, 16, 88, 68, 0, 0, 212, 79, 11, 0, 28, 70, 155, 2], "i8", 4, t.L + 10240);
D([102, 115, 202, 50, 62, 143, 194, 11, 133, 32, 218, 26, 228, 184, 122, 9, 114, 167, 83, 7, 254, 252, 221, 36, 141, 48, 0, 0, 158, 226, 234, 32, 184, 186, 237, 27, 113, 208, 225, 20, 195, 203, 211, 0, 199, 102, 66, 26, 145, 222, 84, 24, 185, 30, 51, 63, 58, 198, 166, 62, 0, 140, 0, 0, 75, 65, 2, 39, 25, 147, 74, 31, 78, 197, 54, 30, 160, 190, 182, 62, 194, 116, 201, 54, 220, 232, 208, 48, 157, 26, 26, 18, 169, 255, 153, 28, 164, 239, 0, 0, 61, 145, 253, 43, 15, 88, 229, 15, 172, 158, 76, 37, 187, 57, 160, 41, 80, 32, 141, 42, 48, 33, 232, 1, 77, 135, 223, 61, 65, 250, 169, 10, 54, 54, 0, 0, 61, 36, 46, 5, 171, 107, 62, 17, 252, 170, 47, 43, 53, 196, 46, 12, 216, 130, 42, 26, 195, 13, 145, 24, 65, 83, 253, 10, 46, 219, 25, 30, 242, 72, 0, 0, 150, 40, 19, 45, 230, 175, 174, 50, 103, 201, 198, 59, 173, 238, 120, 44, 252, 13, 32, 25, 183, 88, 182, 22, 41, 47, 224, 33, 202, 124, 219, 37, 135, 68, 0, 0, 72, 82, 104, 47, 74, 108, 0, 35, 164, 167, 106, 39, 152, 86, 3, 45, 6, 51, 26, 22, 209, 29, 164, 38, 252, 30, 254, 26, 69, 52, 24, 22, 189, 39, 0, 0, 12, 103, 162, 63, 218, 91, 5, 2, 110, 62, 39, 6, 232, 10, 62, 0, 116, 36, 3, 53, 12, 170, 114, 42, 182, 136, 55, 56, 242, 162, 176, 14, 77, 74, 0, 0, 77, 118, 193, 22, 247, 127, 46, 2, 216, 238, 155, 50, 47, 83, 22, 12, 73, 157, 43, 48, 123, 119, 196, 29, 126, 241, 164, 5, 97, 0, 71, 46, 171, 112, 0, 0, 167, 74, 178, 12, 137, 191, 90, 54, 48, 197, 69, 19, 142, 49, 66, 12, 144, 24, 254, 56, 127, 98, 191, 57, 58, 44, 128, 17, 186, 66, 70, 11, 123, 95, 0, 0, 125, 61, 105, 10, 13, 29, 224, 53, 198, 208, 129, 60, 36, 220, 122, 35, 206, 71, 124, 38, 243, 40, 224, 15, 10, 51, 43, 31, 63, 49, 128, 13, 112, 7, 0, 0, 189, 184, 127, 47, 124, 241, 70, 6, 164, 144, 64, 62, 87, 40, 25, 49, 123, 216, 134, 8, 101, 155, 147, 48, 174, 2, 13, 25, 231, 76, 20, 29, 57, 81, 0, 0, 15, 140, 144, 3, 182, 176, 82, 2, 168, 213, 152, 63, 248, 180, 12, 63, 250, 71, 92, 1, 186, 246, 251, 35, 184, 52, 191, 3, 217, 145, 15, 5, 215, 252, 0, 0, 115, 202, 54, 46, 87, 36, 221, 10, 222, 62, 191, 59, 218, 52, 25, 50, 234, 135, 72, 1, 252, 74, 68, 10, 164, 138, 251, 61, 254, 138, 181, 5, 131, 207, 0, 0, 52, 85, 194, 46, 80, 134, 36, 45, 245, 16, 215, 8, 54, 102, 133, 37, 28, 104, 202, 28, 67, 34, 20, 17, 56, 62, 215, 25, 215, 122, 99, 45, 254, 9, 0, 0, 125, 249, 82, 55, 90, 223, 36, 50, 19, 102, 71, 51, 215, 241, 190, 11, 90, 22, 166, 15, 163, 25, 74, 39, 83, 222, 73, 59, 18, 147, 166, 55, 16, 134, 0, 0, 242, 26, 27, 31, 80, 115, 95, 1, 8, 62, 84, 5, 213, 103, 211, 42, 87, 158, 249, 51, 148, 108, 102, 51, 55, 201, 187, 48, 216, 10, 232, 37, 25, 211, 0, 0, 65, 62, 203, 32, 241, 119, 255, 37, 9, 44, 185, 8, 204, 19, 66, 15, 20, 211, 142, 41, 167, 2, 59, 3, 225, 243, 41, 8, 117, 167, 57, 27, 162, 231, 0, 0, 81, 253, 44, 15, 135, 80, 42, 58, 32, 62, 232, 32, 16, 176, 172, 41, 208, 24, 187, 47, 106, 168, 1, 44, 113, 180, 132, 57, 233, 3, 140, 35, 117, 42, 0, 0, 219, 66, 238, 58, 175, 244, 231, 3, 167, 20, 7, 51, 209, 22, 239, 46, 217, 193, 191, 44, 71, 110, 187, 45, 199, 15, 21, 25, 109, 246, 249, 9, 52, 204, 0, 0, 219, 123, 216, 21, 4, 112, 138, 24, 220, 34, 36, 39, 99, 235, 114, 57, 16, 0, 82, 33, 236, 79, 255, 56, 133, 24, 106, 28, 72, 105, 16, 38, 36, 234, 0, 0, 134, 160, 212, 62, 25, 155, 13, 61, 239, 16, 196, 41, 99, 5, 215, 53, 177, 244, 92, 11, 239, 23, 22, 15, 200, 222, 69, 4, 102, 179, 110, 1, 143, 148, 0, 0, 75, 202, 43, 30, 62, 0, 134, 10, 26, 45, 250, 3, 199, 41, 202, 8, 28, 65, 57, 17, 128, 153, 66, 17, 47, 56, 163, 34, 214, 254, 39, 42, 76, 134, 0, 0, 33, 44, 84, 55, 178, 169, 47, 3, 92, 193, 100, 42, 163, 52, 125, 6, 174, 67, 109, 29, 20, 21, 241, 27, 101, 144, 172, 25, 164, 164, 88, 6, 132, 37, 0, 0, 191, 250, 43, 39, 101, 140, 175, 47, 179, 215, 42, 12, 185, 97, 232, 56, 243, 213, 19, 53, 49, 147, 106, 23, 30, 128, 68, 50, 54, 199, 199, 22, 179, 252, 0, 0, 248, 203, 30, 12, 208, 135, 17, 15, 164, 124, 237, 46, 166, 55, 124, 34, 100, 31, 66, 40, 7, 51, 213, 37, 42, 82, 82, 60, 220, 4, 113, 51, 18, 126, 0, 0, 21, 214, 190, 48, 54, 227, 22, 53, 89, 159, 29, 62, 99, 135, 125, 26, 201, 89, 18, 13, 249, 106, 83, 62, 67, 113, 131, 28, 35, 34, 226, 19, 40, 113, 0, 0, 134, 125, 85, 20, 112, 148, 153, 31, 65, 255, 103, 38, 227, 17, 187, 63, 28, 207, 166, 5, 232, 41, 71, 46, 114, 103, 42, 52, 141, 202, 191, 48, 142, 75, 0, 0, 185, 126, 22, 53, 70, 198, 102, 55, 43, 105, 63, 60, 195, 187, 124, 53, 40, 95, 172, 39, 148, 183, 28, 16, 74, 177, 122, 21, 48, 193, 255, 48, 230, 253, 0, 0, 60, 118, 128, 7, 237, 180, 224, 10, 213, 145, 86, 38, 164, 87, 155, 34, 95, 126, 192, 58, 165, 113, 219, 16, 50, 37, 164, 35, 229, 204, 65, 48, 213, 252, 0, 0, 203, 81, 232, 56, 128, 208, 57, 21, 75, 58, 70, 22, 156, 139, 108, 6, 177, 140, 227, 50, 125, 205, 54, 8, 183, 99, 196, 34, 84, 185, 248, 42, 221, 24, 0, 0, 134, 246, 142, 29, 193, 248, 142, 51, 107, 230, 114, 34, 0, 61, 146, 35, 246, 83, 110, 38, 224, 107, 151, 34, 35, 82, 190, 60, 16, 150, 59, 11, 15, 144, 0, 0, 207, 168, 33, 33, 159, 37, 233, 28, 80, 109, 21, 9, 15, 253, 55, 27, 89, 16, 209, 9, 77, 108, 84, 49, 97, 173, 37, 4, 24, 123, 85, 48, 42, 115, 0, 0, 239, 128, 107, 30, 207, 122, 202, 51, 243, 36, 148, 23, 159, 229, 242, 50, 113, 197, 189, 60, 142, 8, 3, 21, 35, 141, 236, 34, 217, 184, 131, 39, 69, 182, 0, 0, 69, 186, 113, 26, 216, 194, 47, 12, 255, 178, 53, 14, 82, 155, 235, 44, 196, 179, 29, 38, 149, 91, 124, 43, 29, 222, 6, 62, 188, 65, 219, 33, 124, 6, 0, 0, 233, 136, 152, 49, 228, 201, 115, 14, 180, 168, 72, 36, 252, 154, 174, 4, 61, 103, 129, 38, 165, 192, 52, 24, 222, 45, 110, 58, 176, 206, 157, 58, 144, 31, 0, 0, 121, 59, 17, 47, 95, 242, 247, 27, 101, 46, 82, 25, 185, 127, 212, 13, 33, 168, 150, 43, 199, 73, 79, 5, 88, 233, 16, 42, 118, 5, 159, 13, 190, 137, 0, 0, 44, 34, 98, 53, 188, 237, 123, 33, 96, 44, 111, 30, 100, 30, 209, 0, 222, 186, 82, 11, 205, 180, 174, 0, 231, 214, 10, 62, 127, 123, 83, 57, 164, 19, 0, 0, 69, 1, 32, 40, 50, 154, 197, 50, 8, 76, 144, 28, 235, 93, 113, 62, 212, 82, 154, 32, 117, 224, 11, 43, 44, 59, 129, 46, 5, 150, 83, 31, 214, 201, 0, 0, 187, 70, 59, 52, 3, 55, 249, 13, 84, 82, 146, 44, 254, 152, 78, 59, 18, 189, 93, 5, 97, 23, 240, 1, 212, 209, 173, 10, 207, 200, 175, 7, 153, 97, 0, 0, 72, 168, 32, 12, 7, 100, 61, 18, 239, 216, 236, 18, 41, 167, 28, 42, 28, 241, 173, 59, 155, 197, 225, 60, 82, 41, 73, 30, 255, 60, 194, 56, 197, 1, 0, 0, 59, 221, 26, 18, 119, 143, 111, 57, 247, 216, 39, 23, 209, 19, 165, 38, 139, 17, 38, 22, 52, 108, 115, 14, 144, 116, 56, 61, 225, 45, 169, 43, 39, 234, 0, 0, 221, 231, 140, 54, 118, 164, 120, 45, 113, 190, 225, 36, 163, 181, 132, 44, 120, 98, 47, 28, 201, 200, 58, 15, 114, 229, 125, 33, 10, 185, 121, 60, 15, 199, 0, 0, 87, 247, 31, 33, 237, 226, 43, 58, 230, 38, 194, 4, 7, 93, 58, 19, 155, 218, 182, 34, 219, 226, 67, 0, 169, 75, 213, 63, 223, 90, 77, 20, 70, 89, 0, 0, 26, 3, 77, 9, 42, 187, 153, 34, 178, 227, 255, 59, 223, 30, 239, 6, 150, 249, 6, 4, 87, 64, 227, 0, 66, 0, 117, 50, 119, 57, 131, 13, 17, 54, 0, 0, 181, 96, 97, 35, 141, 98, 137, 29, 6, 188, 126, 14, 28, 201, 79, 49, 204, 192, 30, 9, 192, 229, 189, 14, 132, 14, 41, 51, 125, 69, 142, 27, 178, 22, 0, 0, 14, 220, 161, 24, 253, 126, 137, 17, 129, 239, 163, 11, 28, 171, 142, 13, 225, 212, 84, 54, 24, 73, 13, 25, 99, 187, 248, 46, 192, 152, 150, 21, 15, 6, 0, 0, 184, 45, 179, 55, 36, 74, 147, 37, 243, 145, 119, 36, 125, 210, 181, 7, 201, 133, 234, 44, 16, 242, 80, 40, 190, 49, 249, 25, 21, 113, 165, 20, 75, 2, 0, 0, 96, 247, 100, 42, 170, 62, 21, 37, 149, 26, 184, 5, 72, 4, 218, 42, 98, 232, 91, 30, 49, 135, 160, 56, 182, 199, 9, 51, 255, 214, 227, 59, 159, 96, 0, 0, 232, 67, 105, 9, 109, 61, 104, 59, 93, 90, 60, 39, 159, 241, 199, 27, 29, 35, 6, 15, 70, 168, 210, 8, 147, 7, 132, 59, 2, 10, 50, 32, 138, 214, 0, 0, 32, 49, 19, 43, 153, 16, 50, 37, 162, 149, 82, 4, 222, 227, 158, 3, 91, 139, 226, 48, 222, 69, 126, 44, 196, 0, 109, 24, 45, 253, 127, 42, 139, 219, 0, 0, 249, 196, 161, 12, 134, 170, 208, 22, 35, 40, 126, 43, 50, 141, 191, 19, 79, 244, 22, 31, 152, 246, 224, 2, 196, 196, 40, 23, 175, 200, 227, 61, 21, 120, 0, 0, 21, 188, 120, 55, 218, 168, 199, 42, 25, 30, 125, 23, 133, 121, 11, 45, 92, 93, 195, 24, 81, 204, 243, 36, 221, 167, 246, 26, 78, 51, 122, 0, 198, 193, 0, 0, 48, 133, 140, 46, 15, 135, 155, 52, 230, 216, 244, 56, 123, 160, 125, 11, 81, 109, 108, 42, 5, 144, 241, 29, 227, 118, 1, 4, 59, 104, 243, 28, 146, 195, 0, 0, 199, 70, 132, 57, 61, 60, 12, 16, 92, 113, 237, 46, 104, 47, 127, 59, 80, 152, 25, 3, 7, 81, 78, 7, 208, 233, 200, 51, 208, 149, 144, 47, 65, 140, 0, 0, 193, 38, 122, 35, 236, 2, 201, 7, 83, 106, 191, 13, 48, 150, 27, 27, 22, 37, 59, 16, 7, 199, 144, 8, 117, 2, 27, 1, 97, 253, 17, 29, 49, 218, 0, 0, 111, 77, 247, 44, 179, 219, 96, 20, 95, 82, 129, 58, 117, 177, 13, 26, 211, 183, 216, 25, 9, 159, 5, 33, 35, 157, 198, 24, 215, 31, 238, 37, 59, 117, 0, 0, 73, 220, 57, 55, 164, 162, 216, 10, 61, 96, 85, 47, 153, 182, 228, 36, 35, 26, 35, 63, 47, 66, 177, 18, 6, 193, 230, 48, 171, 192, 178, 57, 75, 106, 0, 0, 207, 213, 237, 50, 119, 174, 168, 57, 211, 164, 164, 20, 44, 211, 138, 31, 171, 88, 128, 58, 131, 141, 155, 5, 220, 151, 117, 16, 162, 138, 234, 35, 93, 241, 0, 0, 172, 127, 152, 6, 49, 40, 250, 34, 121, 246, 134, 10, 144, 225, 67, 50, 139, 60, 138, 9, 251, 128, 9, 38, 78, 52, 241, 39, 235, 196, 167, 49, 247, 1, 0, 0, 104, 76, 23, 25, 224, 156, 71, 62, 99, 194, 107, 31, 134, 120, 215, 31, 203, 249, 182, 26, 202, 184, 13, 4, 91, 222, 34, 26, 191, 205, 15, 51, 78, 157, 0, 0, 77, 186, 218, 54, 245, 134, 206, 52, 97, 98, 25, 3, 136, 195, 126, 25, 156, 203, 43, 58, 99, 183, 139, 1, 183, 28, 56, 61, 135, 93, 0, 37, 126, 85, 0, 0, 22, 35, 165, 55, 110, 40, 221, 4, 165, 144, 53, 36, 126, 61, 110, 58, 197, 134, 188, 12, 87, 232, 115, 13, 109, 4, 126, 58, 7, 152, 206, 35, 126, 122, 0, 0, 26, 52, 245, 41, 252, 75, 61, 14, 128, 107, 99, 41, 25, 203, 232, 49, 156, 65, 1, 49, 158, 58, 80, 39, 178, 147, 90, 8, 102, 134, 160, 54, 218, 58, 0, 0, 204, 198, 134, 37, 77, 2, 86, 20, 203, 251, 232, 5, 109, 185, 180, 53, 233, 23, 16, 43, 218, 252, 214, 56, 82, 245, 105, 19, 102, 162, 136, 7, 234, 191, 0, 0, 93, 61, 141, 2, 63, 96, 86, 2, 164, 206, 73, 52, 92, 174, 171, 4, 150, 176, 48, 58, 65, 194, 9, 48, 45, 37, 4, 8, 151, 125, 95, 59, 74, 50, 0, 0, 132, 124, 171, 22, 190, 146, 200, 25, 57, 132, 50, 35, 31, 195, 78, 8, 25, 79, 31, 44, 107, 13, 3, 3, 19, 255, 242, 33, 45, 221, 149, 13, 138, 100, 0, 0, 211, 62, 213, 47, 96, 93, 36, 23, 239, 204, 86, 26, 231, 62, 221, 15, 22, 73, 124, 31, 199, 228, 130, 61, 184, 213, 42, 55, 89, 102, 245, 2, 132, 32, 0, 0, 50, 113, 122, 26, 148, 255, 80, 28, 152, 137, 112, 14, 229, 28, 241, 33, 84, 194, 250, 58, 154, 218, 81, 47, 135, 52, 36, 24, 176, 243, 37, 13, 153, 242, 0, 0, 53, 91, 163, 8, 214, 46, 75, 47, 237, 33, 161, 0, 151, 34, 118, 45, 26, 253, 235, 8, 150, 167, 64, 15, 209, 187, 155, 51, 172, 131, 253, 47, 182, 230, 0, 0, 189, 7, 16, 28, 110, 79, 202, 21, 124, 156, 153, 62, 78, 39, 219, 14, 254, 221, 97, 25, 13, 142, 15, 61, 102, 50, 47, 13, 192, 76, 175, 60, 95, 26, 0, 0, 211, 13, 54, 0, 75, 227, 59, 53, 144, 32, 14, 5, 182, 13, 42, 42, 71, 187, 227, 12, 184, 33, 224, 2, 139, 40, 155, 9, 249, 22, 221, 5, 83, 224, 0, 0, 123, 248, 36, 60, 68, 54, 187, 10, 43, 220, 3, 1, 166, 247, 97, 46, 97, 20, 160, 54, 214, 10, 86, 2, 216, 156, 243, 18, 118, 105, 220, 14, 28, 220, 0, 0, 234, 223, 152, 16, 139, 153, 81, 48, 151, 135, 103, 42, 75, 242, 44, 55, 250, 87, 94, 58, 160, 74, 151, 35, 1, 158, 197, 6, 226, 157, 206, 14, 21, 168, 0, 0, 47, 137, 109, 46, 125, 167, 38, 41, 88, 65, 175, 45, 208, 61, 120, 45, 177, 3, 62, 5, 94, 113, 110, 35, 61, 197, 15, 6, 116, 24, 89, 14, 71, 42, 0, 0, 165, 207, 206, 11, 146, 222, 249, 41, 32, 176, 107, 49, 134, 182, 88, 3, 42, 59, 218, 14, 142, 113, 165, 17, 235, 173, 221, 10, 251, 195, 236, 48, 5, 79, 0, 0, 83, 123, 211, 21, 42, 9, 52, 59, 210, 140, 180, 1, 124, 12, 185, 31, 68, 185, 52, 21, 86, 216, 200, 24, 221, 250, 38, 20, 15, 152, 122, 38, 164, 83, 0, 0, 170, 150, 75, 8, 100, 217, 121, 24, 228, 204, 171, 34, 84, 141, 97, 10, 208, 14, 152, 59, 168, 134, 23, 16, 38, 190, 145, 58, 217, 103, 174, 38, 48, 217, 0, 0, 134, 138, 178, 2, 223, 60, 177, 9, 143, 151, 254, 60, 235, 126, 178, 45, 211, 95, 203, 52, 137, 25, 60, 4, 126, 125, 85, 44, 211, 166, 202, 38, 249, 110, 0, 0, 14, 207, 143, 31, 22, 52, 238, 61, 172, 111, 74, 60, 121, 255, 219, 22, 214, 17, 52, 42, 122, 27, 209, 48, 169, 91, 211, 34, 21, 78, 40, 31, 88, 125, 0, 0, 89, 148, 188, 24, 39, 104, 112, 0, 165, 128, 55, 50, 180, 2, 228, 24, 196, 208, 106, 61, 179, 45, 0, 13, 114, 18, 198, 4, 12, 226, 0, 23, 41, 167, 0, 0, 150, 76, 5, 61, 207, 77, 47, 58, 136, 168, 28, 13, 234, 14, 5, 49, 238, 220, 229, 62, 151, 111, 127, 7, 213, 246, 97, 30, 115, 70, 82, 48, 249, 77, 0, 0, 93, 13, 209, 10, 27, 176, 174, 11, 25, 144, 132, 40, 112, 179, 65, 53, 181, 212, 133, 29, 232, 8, 211, 37, 80, 128, 114, 24, 75, 66, 20, 59, 53, 0, 0, 0, 29, 0, 239, 29, 105, 151, 200, 19, 239, 39, 186, 9, 166, 245, 110, 62, 33, 75, 182, 35, 39, 112, 244, 2, 14, 242, 202, 34, 159, 108, 203, 40, 73, 165, 0, 0, 131, 71, 98, 48, 159, 198, 118, 53, 173, 5, 151, 44, 152, 138, 7, 5, 235, 86, 148, 37, 98, 59, 12, 51, 244, 189, 108, 22, 182, 65, 158, 30, 155, 121, 0, 0, 203, 212, 46, 5, 151, 199, 187, 22, 160, 197, 158, 0, 207, 190, 55, 21, 201, 110, 46, 19, 13, 102, 47, 2, 63, 18, 205, 62, 129, 54, 204, 35, 121, 126, 0, 0, 98, 148, 187, 20, 30, 152, 197, 21, 18, 122, 243, 57, 255, 198, 213, 28, 177, 87, 240, 50, 123, 39, 85, 42, 65, 48, 200, 26, 147, 40, 49, 51, 61, 210, 0, 0, 52, 8, 99, 19, 239, 131, 206, 55, 127, 6, 172, 61, 24, 74, 252, 24, 132, 8, 129, 12, 234, 90, 122, 46, 213, 58, 120, 20, 84, 12, 128, 40, 79, 34, 0, 0, 114, 34, 122, 4, 223, 28, 241, 52, 92, 247, 80, 10, 176, 147, 164, 24, 61, 245, 9, 29, 228, 232, 195, 45, 196, 195, 165, 45, 207, 174, 140, 19, 229, 187, 0, 0, 215, 25, 60, 24, 69, 39, 217, 25, 187, 87, 207, 2, 107, 145, 215, 46, 187, 242, 142, 34, 144, 51, 151, 40, 41, 65, 158, 35, 2, 24, 51, 40, 212, 194, 0, 0, 141, 146, 7, 5, 11, 46, 202, 11, 119, 201, 69, 51, 197, 160, 18, 32, 38, 13, 38, 1, 253, 125, 237, 32, 65, 77, 41, 6, 32, 112, 62, 40, 173, 101, 0, 0, 154, 12, 148, 60, 82, 43, 32, 19, 8, 51, 66, 47, 78, 56, 207, 51, 19, 33, 220, 13, 209, 137, 23, 22, 229, 144, 49, 31, 193, 176, 159, 10, 194, 46, 0, 0, 77, 122, 30, 5, 102, 63, 101, 52, 172, 189, 53, 26, 246, 96, 20, 16, 18, 235, 127, 28, 10, 212, 147, 56, 194, 132, 150, 55, 140, 55, 26, 41, 29, 139, 0, 0, 235, 62, 104, 29, 127, 185, 195, 41, 58, 19, 211, 8, 40, 206, 186, 13, 62, 243, 184, 4, 66, 73, 217, 43, 177, 202, 206, 40, 230, 227, 92, 26, 198, 175, 0, 0, 9, 69, 205, 48, 172, 114, 138, 7, 201, 253, 221, 30, 73, 213, 234, 2, 87, 22, 156, 35, 40, 255, 113, 22, 195, 43, 117, 34, 116, 219, 101, 8, 44, 0, 0, 0, 147, 66, 111, 55, 30, 126, 128, 40, 158, 19, 197, 19, 89, 45, 94, 58, 16, 46, 40, 11, 220, 60, 35, 47, 33, 145, 48, 3, 205, 167, 214, 30, 85, 210, 0, 0, 10, 116, 130, 18, 137, 30, 198, 54, 241, 165, 5, 36, 55, 14, 218, 18, 227, 31, 210, 10, 173, 27, 188, 32, 38, 1, 127, 2, 121, 213, 208, 44, 135, 167, 0, 0, 205, 152, 31, 44, 34, 103, 242, 47, 140, 48, 240, 23, 83, 65, 34, 13, 82, 33, 96, 6, 115, 112, 42, 54, 174, 15, 135, 52, 145, 18, 106, 6, 57, 156, 0, 0, 157, 89, 252, 20, 15, 120, 249, 57, 107, 142, 76, 6, 219, 189, 201, 20, 144, 65, 230, 32, 201, 47, 17, 60, 132, 117, 213, 29, 147, 210, 195, 19, 184, 221, 0, 0, 179, 77, 182, 15, 78, 53, 230, 30, 65, 56, 213, 29, 142, 50, 121, 59, 167, 214, 184, 19, 249, 254, 224, 46, 11, 116, 203, 28, 111, 138, 228, 8, 20, 193, 0, 0, 190, 89, 2, 60, 127, 58, 195, 8, 30, 125, 86, 20, 19, 36, 96, 29, 168, 209, 139, 23, 250, 147, 55, 59, 92, 42, 252, 6, 210, 22, 183, 61, 55, 18, 0, 0, 70, 30, 8, 3, 208, 96, 123, 59, 161, 158, 85, 20, 21, 99, 136, 20, 58, 113, 52, 38, 100, 176, 112, 54, 130, 64, 34, 55, 105, 12, 254, 18, 91, 108, 0, 0, 112, 205, 251, 11, 224, 114, 126, 52, 46, 166, 34, 44, 154, 224, 51, 52, 65, 120, 228, 43, 56, 143, 225, 17, 35, 251, 66, 45, 73, 82, 220, 4, 5, 203, 0, 0, 75, 205, 77, 6, 177, 107, 185, 50, 77, 18, 28, 17, 102, 245, 49, 12, 12, 69, 10, 49, 42, 151, 25, 28, 86, 75, 222, 10, 195, 153, 21, 42, 233, 225, 0, 0, 44, 31, 4, 59, 122, 137, 45, 52, 146, 178, 22, 10, 171, 102, 52, 17, 127, 146, 119, 37, 108, 102, 13, 49, 122, 27, 83, 28, 21, 81, 165, 2, 43, 86, 0, 0, 60, 215, 173, 43, 248, 219, 97, 1, 208, 183, 100, 42, 64, 118, 115, 54, 143, 32, 20, 28, 187, 144, 211, 41, 120, 151, 9, 27, 68, 235, 149, 6, 178, 81, 0, 0, 209, 216, 54, 43, 135, 43, 245, 61, 166, 75, 115, 12, 202, 195, 4, 8, 108, 250, 28, 44, 116, 192, 31, 40, 84, 93, 62, 61, 7, 0, 4, 12, 121, 0, 0, 0, 75, 243, 9, 59, 220, 66, 215, 53, 230, 108, 198, 12, 130, 249, 28, 34, 229, 97, 157, 51, 207, 91, 138, 45, 26, 134, 121, 11, 199, 142, 233, 60, 1, 151, 0, 0, 147, 87, 223, 0, 51, 20, 114, 51, 74, 121, 204, 61, 95, 14, 47, 1, 113, 55, 131, 22, 197, 212, 198, 0, 215, 21, 237, 48, 43, 227, 238, 18, 212, 61, 0, 0, 70, 47, 30, 63, 142, 136, 57, 23, 1, 131, 119, 50, 161, 199, 61, 28, 82, 87, 60, 22, 3, 129, 75, 22, 69, 196, 108, 38, 39, 75, 7, 45, 54, 160, 0, 0, 73, 179, 255, 30, 165, 137, 199, 28, 79, 31, 11, 63, 179, 160, 56, 32, 6, 141, 176, 30, 30, 169, 218, 7, 223, 215, 179, 22, 250, 0, 104, 36, 191, 195, 0, 0, 8, 234, 76, 12, 14, 228, 98, 51, 219, 33, 234, 32, 131, 46, 214, 18, 101, 82, 70, 0, 208, 84, 132, 41, 244, 6, 197, 40, 147, 234, 182, 62, 133, 106, 0, 0, 243, 244, 98, 24, 150, 179, 119, 6, 106, 27, 114, 61, 208, 146, 198, 9, 180, 48, 98, 62, 35, 5, 207, 36, 49, 213, 89, 6, 185, 46, 129, 17, 182, 0, 0, 0, 229, 89, 169, 32, 132, 224, 132, 40, 197, 76, 29, 57, 162, 78, 82, 56, 145, 187, 6, 14, 118, 160, 124, 1, 222, 248, 253, 18, 116, 199, 194, 5, 87, 96, 0, 0, 168, 162, 133, 35, 76, 250, 102, 34, 94, 198, 36, 46, 15, 175, 84, 20, 70, 98, 242, 29, 220, 107, 139, 38, 221, 122, 128, 36, 154, 154, 44, 60, 26, 154, 0, 0, 43, 3, 28, 23, 138, 133, 54, 53, 128, 201, 253, 58, 133, 162, 217, 26, 255, 197, 102, 7, 127, 127, 109, 4, 221, 3, 38, 0, 184, 53, 63, 42, 235, 113, 0, 0, 159, 53, 104, 22, 56, 106, 173, 30, 94, 117, 180, 52, 93, 180, 198, 36, 113, 127, 187, 12, 213, 91, 20, 24, 246, 222, 57, 29, 216, 146, 152, 4, 255, 210, 0, 0, 28, 166, 3, 42, 20, 29, 185, 1, 77, 87, 112, 16, 26, 61, 26, 30, 80, 208, 157, 42, 234, 10, 209, 5, 202, 50, 210, 9, 201, 108, 193, 48, 94, 133, 0, 0, 7, 252, 93, 6, 171, 186, 241, 55, 101, 73, 228, 23, 168, 211, 189, 12, 211, 78, 251, 2, 109, 254, 47, 15, 84, 127, 193, 1, 124, 177, 75, 23, 216, 13, 0, 0, 6, 215, 50, 31, 32, 41, 48, 0, 139, 103, 160, 6, 29, 41, 51, 6, 6, 162, 191, 21, 194, 104, 74, 3, 21, 31, 191, 63, 172, 174, 26, 18, 228, 60, 0, 0, 228, 217, 127, 60, 223, 216, 220, 2, 244, 137, 30, 22, 243, 144, 85, 52, 237, 6, 73, 9, 196, 26, 65, 63, 142, 40, 133, 55, 184, 106, 35, 16, 117, 231, 0, 0, 251, 211, 28, 57, 237, 50, 208, 54, 134, 230, 155, 50, 101, 255, 140, 10, 74, 235, 68, 8, 62, 134, 12, 56, 2, 175, 127, 35, 211, 15, 69, 49, 204, 17, 0, 0, 134, 13, 22, 21, 233, 90, 220, 36, 42, 71, 211, 13, 75, 191, 199, 2, 250, 57, 194, 12, 78, 18, 137, 35, 82, 235, 29, 49, 10, 164, 202, 26, 165, 74, 0, 0, 82, 117, 143, 33, 101, 68, 238, 33, 195, 250, 84, 0, 230, 226, 68, 16, 189, 221, 130, 35, 224, 211, 221, 37, 59, 244, 198, 9, 69, 249, 197, 46, 80, 2, 0, 0, 77, 177, 16, 53, 136, 37, 33, 60, 227, 241, 214, 51, 12, 207, 27, 0, 218, 23, 216, 41, 127, 221, 247, 53, 66, 35, 8, 40, 239, 38, 63, 12, 25, 115, 0, 0, 18, 93, 114, 31, 78, 250, 68, 23, 80, 71, 95, 11, 247, 174, 144, 17, 217, 191, 47, 2, 40, 56, 231, 40, 180, 58, 253, 39, 209, 44, 34, 39, 116, 26, 0, 0, 228, 86, 172, 35, 52, 69, 217, 4, 112, 170, 13, 25, 98, 26, 130, 28, 96, 143, 61, 47, 10, 215, 249, 34, 69, 207, 226, 0, 251, 92, 101, 52, 145, 126, 0, 0, 88, 228, 250, 41, 148, 35, 65, 24, 253, 151, 236, 38, 157, 16, 151, 2, 139, 50, 123, 59, 119, 169, 85, 52, 9, 193, 24, 2, 62, 248, 22, 26, 80, 199, 0, 0, 152, 181, 87, 23, 101, 16, 90, 0, 43, 26, 149, 53, 12, 148, 114, 23, 10, 180, 199, 50, 25, 83, 208, 11, 181, 95, 224, 33, 228, 51, 126, 37, 215, 234, 0, 0, 102, 66, 185, 44, 251, 92, 154, 6, 43, 241, 77, 61, 233, 62, 188, 51, 128, 24, 163, 13, 70, 145, 230, 16, 33, 20, 65, 8, 232, 136, 227, 55, 118, 165, 0, 0, 200, 142, 178, 33, 107, 132, 47, 58, 62, 159, 77, 17, 253, 41, 132, 11, 67, 44, 216, 12, 150, 191, 94, 46, 146, 44, 11, 36, 217, 57, 200, 47, 166, 64, 0, 0, 193, 214, 158, 13, 99, 173, 43, 26, 107, 61, 89, 61, 240, 22, 157, 19, 194, 14, 221, 30, 193, 29, 6, 63, 11, 232, 83, 15, 221, 114, 219, 12, 40, 3, 0, 0, 238, 254, 250, 56, 155, 175, 27, 59, 173, 148, 180, 28, 201, 55, 253, 22, 38, 140, 124, 13, 136, 14, 101, 53, 70, 140, 242, 25, 191, 4, 14, 38, 168, 113, 0, 0, 58, 152, 53, 50, 52, 106, 106, 6, 41, 235, 188, 19, 192, 13, 132, 34, 227, 49, 21, 62, 195, 181, 73, 14, 198, 77, 197, 17, 228, 162, 171, 19, 79, 206, 0, 0, 207, 222, 60, 13, 100, 172, 245, 51, 174, 64, 247, 43, 163, 72, 25, 27, 82, 67, 117, 48, 121, 146, 128, 55, 234, 179, 187, 15, 228, 240, 92, 62, 201, 243, 0, 0, 201, 230, 176, 21, 153, 173, 106, 27, 154, 200, 228, 6, 222, 115, 254, 23, 219, 189, 188, 56, 183, 205, 62, 10, 142, 39, 34, 6, 230, 82, 233, 47, 190, 77, 0, 0, 37, 204, 178, 30, 85, 225, 41, 37, 174, 239, 4, 5, 175, 108, 196, 36, 88, 243, 41, 34, 184, 185, 137, 41, 69, 223, 174, 19, 36, 15, 236, 57, 254, 16, 0, 0, 149, 114, 133, 37, 70, 104, 128, 19, 22, 240, 51, 52, 192, 31, 57, 50, 105, 32, 161, 28, 40, 63, 70, 56, 178, 24, 194, 5, 189, 255, 2, 9, 42, 164, 0, 0, 193, 185, 126, 10, 251, 223, 205, 26, 85, 57, 25, 21, 52, 139, 112, 40, 39, 196, 164, 29, 147, 172, 200, 26, 122, 86, 212, 5, 64, 152, 252, 44, 160, 58, 0, 0, 152, 192, 205, 47, 85, 253, 131, 8, 50, 128, 70, 46, 218, 3, 184, 2, 85, 193, 153, 4, 3, 27, 126, 60, 167, 103, 34, 50, 190, 229, 203, 10, 225, 52, 0, 0, 226, 116, 116, 42, 121, 107, 44, 19, 102, 63, 136, 25, 60, 76, 212, 55, 4, 219, 114, 57, 5, 33, 47, 19, 151, 45, 50, 29, 237, 117, 183, 48, 74, 166, 0, 0, 146, 59, 23, 15, 122, 173, 91, 51, 17, 118, 251, 41, 5, 189, 156, 31, 59, 104, 101, 13, 61, 134, 104, 12, 190, 41, 31, 57, 110, 54, 144, 52, 244, 16, 0, 0, 194, 70, 49, 35, 181, 1, 8, 36, 124, 219, 106, 8, 69, 167, 221, 46, 144, 186, 8, 57, 140, 150, 150, 44, 17, 210, 58, 53, 69, 66, 101, 11, 14, 133, 0, 0, 88, 73, 216, 40, 102, 71, 191, 57, 174, 92, 204, 10, 91, 172, 119, 4, 106, 134, 204, 0, 181, 93, 110, 6, 159, 116, 126, 39, 109, 218, 2, 58, 70, 232, 0, 0, 159, 207, 130, 56, 237, 145, 17, 3, 100, 26, 12, 30, 156, 205, 104, 20, 173, 111, 183, 24, 30, 65, 100, 47, 29, 84, 226, 7, 83, 34, 63, 46, 156, 162, 0, 0, 113, 173, 88, 62, 38, 226, 216, 61, 8, 162, 163, 57, 115, 125, 52, 12, 187, 56, 140, 30, 167, 88, 250, 23, 160, 48, 62, 44, 55, 10, 227, 41, 120, 119, 0, 0, 172, 67, 159, 61, 7, 255, 68, 45, 99, 197, 74, 50, 127, 4, 225, 44, 135, 0, 88, 63, 203, 75, 56, 38, 112, 255, 34, 27, 105, 173, 102, 27, 98, 52, 0, 0, 105, 200, 25, 51, 184, 186, 241, 61, 2, 39, 235, 33, 93, 87, 126, 42, 24, 220, 172, 12, 191, 8, 228, 32, 1, 141, 252, 51, 5, 102, 23, 1, 24, 48, 0, 0, 240, 86, 184, 18, 39, 219, 49, 48, 191, 167, 217, 35, 146, 50, 161, 10, 202, 59, 46, 34, 53, 200, 144, 24, 134, 111, 123, 59, 64, 9, 94, 49, 95, 172, 0, 0, 181, 41, 237, 37, 190, 97, 154, 49, 180, 209, 173, 18, 28, 216, 194, 32, 245, 133, 200, 35, 105, 110, 159, 45, 58, 52, 239, 23, 185, 135, 109, 32, 40, 50, 0, 0, 210, 90, 209, 60, 185, 73, 60, 61, 78, 96, 231, 14, 229, 170, 235, 32, 202, 225, 49, 21, 208, 119, 198, 2, 17, 235, 68, 3, 232, 5, 161, 0, 119, 22, 0, 0, 0, 97, 201, 6, 30, 16, 234, 47, 99, 142, 156, 46, 169, 70, 192, 24, 161, 204, 219, 51, 183, 108, 118, 15, 180, 255, 185, 49, 62, 176, 206, 17, 56, 63, 0, 0, 7, 71, 98, 50, 111, 176, 138, 7, 207, 27, 95, 55, 2, 31, 199, 21, 102, 229, 156, 7, 188, 24, 17, 19, 83, 82, 57, 0, 117, 125, 21, 39, 198, 112, 0, 0, 172, 210, 34, 61, 27, 187, 49, 13, 2, 206, 170, 28, 155, 132, 127, 55, 16, 47, 223, 5, 94, 130, 3, 15, 180, 220, 118, 58, 73, 127, 241, 4, 129, 40, 0, 0, 104, 162, 66, 15, 126, 213, 122, 32, 208, 143, 140, 20, 133, 18, 245, 48, 221, 55, 97, 23, 50, 152, 220, 29, 32, 143, 92, 60, 62, 86, 192, 58, 167, 161, 0, 0, 168, 142, 95, 36, 116, 3, 234, 18, 13, 144, 210, 36, 229, 56, 146, 28, 209, 229, 159, 17, 92, 87, 54, 61, 83, 165, 162, 35, 17, 50, 128, 40, 99, 249, 0, 0, 235, 153, 188, 25, 193, 126, 21, 47, 36, 8, 182, 24, 103, 141, 60, 46, 139, 32, 39, 52, 127, 192, 136, 28, 59, 10, 60, 56, 31, 163, 9, 37, 133, 156, 0, 0, 21, 163, 6, 38, 196, 32, 106, 56, 217, 58, 150, 38, 188, 28, 152, 28, 64, 126, 9, 14, 100, 169, 44, 54, 152, 127, 154, 13, 220, 63, 147, 8, 217, 165, 0, 0, 209, 104, 59, 30, 214, 76, 88, 13, 157, 124, 26, 17, 31, 77, 67, 19, 237, 233, 13, 24, 94, 175, 26, 12, 67, 179, 165, 13, 200, 14, 192, 34, 50, 135, 0, 0, 147, 20, 35, 6, 80, 237, 109, 51, 105, 212, 196, 12, 195, 160, 70, 16, 150, 164, 230, 37, 3, 116, 144, 19, 235, 4, 54, 60, 220, 134, 11, 38, 254, 241, 0, 0, 193, 72, 136, 53, 153, 102, 170, 37, 1, 13, 255, 37, 27, 205, 254, 28, 241, 211, 153, 61, 125, 129, 240, 52, 22, 194, 221, 36, 102, 187, 122, 6, 32, 46, 0, 0, 172, 3, 217, 6, 112, 106, 123, 2, 203, 229, 215, 26, 57, 157, 88, 62, 213, 46, 253, 58, 57, 76, 127, 10, 55, 70, 132, 58, 141, 185, 87, 37, 40, 9, 0, 0, 31, 9, 205, 27, 77, 58, 96, 20, 252, 131, 141, 10, 234, 187, 73, 15, 172, 238, 149, 58, 36, 76, 40, 30, 123, 130, 42, 52, 79, 15, 64, 8, 86, 194, 0, 0, 57, 184, 116, 56, 213, 161, 68, 4, 24, 180, 210, 19, 229, 108, 69, 16, 190, 174, 182, 48, 200, 126, 195, 55, 83, 128, 90, 30, 56, 240, 7, 46, 3, 62, 0, 0, 186, 148, 5, 60, 89, 57, 7, 3, 218, 184, 181, 26, 63, 124, 113, 57, 125, 102, 143, 25, 92, 29, 152, 61, 68, 44, 244, 7, 252, 247, 88, 56, 58, 209, 0, 0, 19, 165, 87, 3, 154, 227, 253, 40, 243, 35, 48, 27, 209, 68, 111, 20, 241, 197, 34, 41, 168, 14, 138, 62, 98, 205, 146, 4, 189, 232, 45, 48, 98, 230, 0, 0, 126, 208, 23, 32, 114, 128, 168, 36, 145, 216, 56, 21, 137, 53, 215, 0, 216, 25, 164, 33, 132, 34, 136, 43, 93, 48, 82, 36, 132, 57, 79, 6, 11, 171, 0, 0, 66, 210, 55, 31, 191, 223, 87, 38, 4, 75, 193, 57, 129, 41, 251, 39, 194, 125, 88, 35, 47, 31, 139, 33, 67, 184, 108, 15, 83, 114, 44, 32, 191, 64, 0, 0, 136, 80, 64, 38, 230, 9, 118, 52, 131, 85, 211, 43, 144, 174, 135, 12, 116, 18, 254, 38, 108, 108, 250, 15, 245, 4, 175, 42, 21, 118, 77, 55, 121, 181, 0, 0, 88, 53, 90, 25, 145, 205, 202, 43, 43, 127, 74, 35, 120, 225, 199, 1, 172, 246, 89, 27, 227, 4, 94, 62, 6, 8, 167, 28, 7, 216, 165, 63, 20, 61, 0, 0, 76, 223, 67, 36, 177, 206, 182, 26, 124, 114, 29, 60, 81, 184, 40, 56, 130, 20, 110, 53, 111, 199, 164, 38, 242, 248, 30, 40, 17, 186, 117, 47, 198, 22, 0, 0, 36, 252, 177, 2, 182, 214, 167, 55, 14, 87, 247, 35, 31, 7, 54, 10, 37, 101, 72, 18, 178, 52, 177, 6, 204, 81, 82, 38, 11, 58, 80, 41, 111, 221, 0, 0, 202, 116, 155, 14, 24, 113, 12, 41, 4, 35, 50, 23, 251, 154, 55, 4, 236, 119, 126, 37, 197, 175, 199, 27, 54, 254, 134, 49, 116, 172, 223, 10, 230, 103, 0, 0, 2, 142, 208, 61, 100, 69, 170, 7, 136, 2, 223, 26, 255, 237, 81, 33, 16, 128, 30, 61, 168, 102, 82, 26, 248, 128, 215, 21, 121, 11, 106, 11, 250, 19, 0, 0, 16, 52, 176, 60, 112, 7, 85, 41, 125, 185, 66, 26, 198, 238, 43, 17, 230, 199, 50, 52, 174, 129, 88, 13, 19, 35, 167, 29, 85, 17, 44, 14, 99, 19, 0, 0, 26, 228, 78, 20, 230, 234, 140, 48, 106, 154, 214, 55, 78, 183, 213, 38, 135, 130, 130, 6, 203, 217, 66, 48, 247, 67, 164, 48, 241, 116, 20, 18, 108, 208, 0, 0, 111, 94, 41, 11, 166, 19, 126, 60, 82, 226, 46, 22, 24, 13, 225, 30, 155, 145, 48, 54, 211, 83, 179, 2, 187, 219, 10, 13, 97, 1, 83, 63, 21, 88, 0, 0, 81, 39, 216, 35, 69, 157, 171, 30, 82, 84, 211, 58, 65, 42, 109, 17, 86, 133, 178, 35, 131, 206, 147, 1, 153, 147, 16, 27, 27, 251, 188, 63, 208, 133, 0, 0, 98, 249, 177, 14, 137, 222, 8, 11, 88, 49, 115, 7, 90, 122, 212, 33, 62, 102, 245, 44, 96, 185, 37, 53, 41, 190, 192, 56, 232, 4, 33, 25, 3, 31, 0, 0, 243, 76, 222, 44, 135, 65, 85, 38, 171, 102, 160, 56, 81, 77, 57, 16, 147, 231, 154, 29, 69, 155, 180, 48, 231, 59, 44, 2, 69, 176, 210, 42, 77, 56, 0, 0, 102, 5, 45, 37, 200, 90, 30, 31, 59, 167, 27, 53, 229, 140, 194, 16, 31, 240, 198, 52, 138, 182, 181, 19, 251, 59, 164, 28, 110, 52, 111, 49, 227, 214, 0, 0, 194, 56, 82, 30, 72, 250, 188, 34, 185, 184, 236, 0, 14, 215, 87, 13, 64, 72, 237, 2, 58, 45, 132, 5, 27, 164, 90, 1, 245, 173, 3, 59, 240, 20, 0, 0, 34, 121, 240, 18, 30, 141, 26, 58, 214, 57, 73, 48, 0, 54, 0, 23, 210, 127, 116, 2, 225, 248, 28, 63, 33, 9, 216, 53, 32, 117, 79, 53, 18, 171, 0, 0, 77, 233, 67, 21, 191, 75, 141, 61, 136, 225, 152, 47, 213, 169, 192, 4, 221, 218, 13, 26, 41, 158, 209, 48, 65, 236, 135, 2, 11, 222, 238, 60, 66, 235, 0, 0, 137, 77, 146, 5, 145, 119, 86, 1, 36, 212, 214, 32, 121, 163, 17, 54, 76, 119, 251, 13, 191, 92, 117, 3, 154, 220, 146, 29, 201, 211, 65, 27, 74, 35, 0, 0, 237, 170, 25, 62, 213, 150, 147, 12, 112, 50, 103, 6, 163, 55, 235, 38, 69, 32, 169, 6, 184, 189, 0, 59, 158, 154, 13, 2, 90, 148, 50, 14, 241, 28, 0, 0, 14, 64, 47, 41, 117, 169, 219, 4, 188, 255, 119, 60, 251, 227, 187, 39, 71, 23, 222, 45, 173, 153, 202, 13, 244, 101, 56, 6, 199, 197, 188, 54, 255, 214, 0, 0, 57, 170, 168, 54, 126, 58, 176, 61, 85, 172, 143, 39, 210, 222, 152, 41, 55, 217, 144, 25, 18, 90, 130, 22, 135, 44, 65, 13, 208, 151, 175, 33, 134, 181, 0, 0, 31, 60, 73, 43, 116, 77, 30, 63, 184, 71, 179, 45, 57, 230, 107, 47, 171, 29, 169, 0, 83, 81, 227, 17, 73, 193, 194, 56, 49, 201, 80, 53, 50, 86, 0, 0, 197, 76, 59, 48, 142, 175, 71, 58, 46, 124, 199, 33, 150, 110, 12, 10, 87, 2, 168, 51, 159, 63, 241, 22, 123, 182, 194, 60, 226, 26, 108, 39, 193, 95, 0, 0, 40, 124, 181, 37, 225, 126, 206, 14, 74, 236, 135, 0, 243, 64, 189, 29, 146, 244, 94, 58, 104, 62, 78, 8, 238, 102, 124, 12, 38, 59, 48, 33, 142, 236, 0, 0, 181, 140, 179, 12, 245, 21, 46, 45, 139, 148, 136, 19, 211, 247, 223, 2, 225, 27, 234, 62, 244, 3, 41, 42, 235, 157, 40, 30, 187, 80, 195, 45, 143, 184, 0, 0, 215, 243, 101, 25, 89, 157, 254, 30, 25, 199, 248, 58, 137, 132, 207, 19, 77, 226, 168, 53, 44, 101, 238, 18, 3, 6, 40, 35, 186, 81, 171, 13, 199, 214, 0, 0, 126, 8, 38, 5, 9, 18, 80, 61, 8, 3, 162, 45, 32, 98, 219, 62, 253, 93, 184, 24, 94, 16, 216, 38, 28, 124, 233, 44, 251, 165, 115, 3, 43, 255, 0, 0, 7, 153, 194, 48, 7, 120, 84, 50, 178, 206, 226, 16, 238, 91, 251, 45, 199, 54, 121, 16, 83, 113, 19, 19, 175, 136, 161, 11, 73, 189, 255, 4, 61, 73, 0, 0, 249, 129, 214, 57, 249, 83, 65, 22, 252, 185, 254, 8, 235, 187, 131, 51, 102, 176, 148, 44, 128, 151, 252, 31, 139, 136, 48, 50, 215, 157, 124, 63, 69, 199, 0, 0, 71, 18, 187, 59, 13, 205, 197, 0, 118, 92, 212, 39, 113, 205, 244, 54, 140, 103, 24, 40, 195, 49, 229, 4, 167, 120, 94, 30, 174, 189, 188, 8, 2, 89, 0, 0, 163, 14, 205, 53, 180, 59, 19, 56, 21, 72, 172, 12, 8, 58, 30, 17, 179, 242, 231, 50, 217, 122, 121, 22, 122, 178, 80, 16, 93, 234, 124, 30, 178, 171, 0, 0, 206, 123, 48, 60, 205, 196, 36, 28, 100, 59, 47, 32, 103, 65, 218, 37, 124, 212, 142, 7, 12, 48, 248, 18, 251, 217, 112, 57, 197, 239, 14, 4, 238, 93, 0, 0, 62, 238, 201, 27, 252, 188, 184, 48, 197, 130, 115, 62, 88, 106, 232, 39, 234, 17, 237, 39, 9, 157, 170, 43, 127, 130, 130, 6, 127, 214, 66, 5, 129, 63, 0, 0, 6, 174, 154, 25, 49, 108, 171, 51, 3, 22, 168, 13, 63, 183, 236, 8, 118, 98, 86, 57, 17, 207, 250, 6, 103, 212, 130, 58, 111, 63, 154, 34, 200, 25, 0, 0, 7, 160, 228, 56, 235, 251, 198, 5, 182, 88, 179, 11, 194, 179, 59, 59, 21, 236, 199, 22, 169, 206, 232, 18, 89, 105, 222, 2, 2, 116, 203, 4, 248, 92, 0, 0, 131, 184, 104, 16, 66, 194, 143, 57, 140, 254, 199, 57, 177, 229, 27, 37, 200, 246, 61, 12, 18, 98, 5, 53, 74, 223, 160, 31, 88, 3, 151, 59, 90, 180, 0, 0, 167, 212, 194, 38, 236, 249, 91, 37, 16, 251, 255, 60, 206, 228, 219, 48, 27, 210, 78, 0, 241, 92, 206, 56, 83, 70, 73, 58, 82, 67, 147, 63, 213, 182, 0, 0, 113, 99, 232, 58, 248, 57, 55, 6, 129, 204, 227, 53, 155, 147, 223, 22, 116, 142, 253, 63, 119, 130, 228, 51, 223, 20, 108, 61, 174, 78, 232, 28, 243, 71, 0, 0, 51, 221, 102, 60, 139, 216, 76, 2, 197, 109, 199, 29, 252, 35, 239, 35, 234, 34, 176, 41, 0, 84, 108, 44, 107, 112, 136, 53, 179, 25, 240, 46, 200, 97, 0, 0, 250, 11, 241, 54, 206, 167, 238, 14, 202, 200, 32, 40, 176, 186, 65, 20, 106, 251, 211, 5, 230, 82, 102, 26, 70, 52, 112, 15, 149, 231, 136, 39, 89, 147, 0, 0, 248, 47, 107, 29, 51, 223, 22, 32, 169, 143, 108, 40, 92, 176, 205, 24, 135, 241, 189, 3, 251, 220, 212, 39, 124, 24, 133, 39, 9, 93, 233, 10, 227, 148, 0, 0, 62, 175, 225, 44, 84, 21, 82, 55, 58, 225, 191, 38, 148, 16, 188, 14, 179, 140, 158, 45, 152, 33, 146, 7, 47, 25, 78, 32, 246, 208, 34, 17, 27, 13, 0, 0, 65, 226, 86, 56, 179, 120, 57, 32, 135, 210, 109, 13, 35, 133, 123, 60, 87, 43, 33, 27, 192, 152, 203, 10, 237, 169, 14, 8, 122, 44, 249, 46, 127, 130, 0, 0, 236, 147, 194, 46, 46, 218, 22, 24, 109, 22, 3, 41, 97, 140, 233, 61, 127, 104, 18, 29, 244, 25, 203, 59, 27, 183, 176, 39, 28, 143, 36, 39, 15, 198, 0, 0, 167, 15, 184, 59, 44, 23, 18, 13, 134, 56, 65, 48, 237, 154, 246, 41, 58, 159, 129, 32, 76, 175, 129, 6, 13, 188, 47, 12, 194, 216, 199, 56, 87, 8, 0, 0, 45, 107, 54, 9, 124, 132, 96, 54, 171, 22, 112, 13, 15, 193, 141, 11, 23, 71, 113, 11, 119, 116, 50, 31, 45, 9, 114, 1, 184, 142, 208, 36, 67, 246, 0, 0, 99, 14, 199, 9, 232, 176, 64, 23, 111, 73, 61, 53, 57, 222, 226, 46, 156, 46, 103, 10, 217, 85, 25, 23, 84, 67, 0, 22, 175, 149, 58, 51, 170, 40, 0, 0, 78, 218, 87, 48, 11, 226, 192, 39, 139, 30, 218, 4, 145, 115, 22, 63, 245, 183, 235, 40, 29, 159, 89, 34, 122, 86, 225, 32, 6, 190, 139, 12, 105, 43, 0, 0, 181, 116, 230, 51, 189, 20, 119, 0, 198, 170, 96, 48, 57, 167, 61, 54, 146, 79, 138, 43, 243, 38, 203, 54, 93, 20, 102, 26, 21, 104, 137, 45, 243, 162, 0, 0, 65, 121, 147, 14, 56, 50, 78, 2, 59, 165, 63, 3, 95, 140, 190, 8, 146, 75, 124, 42, 204, 67, 42, 17, 0, 232, 138, 6, 83, 88, 86, 40, 14, 98, 0, 0, 86, 176, 30, 25, 199, 88, 128, 29, 108, 56, 253, 44, 227, 246, 187, 0, 160, 245, 21, 53, 143, 26, 215, 34, 217, 49, 146, 37, 171, 122, 242, 32, 79, 60, 0, 0, 171, 236, 92, 32, 246, 36, 150, 16, 119, 184, 246, 28, 32, 81, 173, 32, 25, 128, 120, 50, 14, 207, 149, 53, 58, 163, 182, 40, 82, 212, 1, 36, 71, 148, 0, 0, 169, 223, 134, 61, 110, 127, 24, 36, 113, 58, 153, 27, 2, 41, 45, 14, 220, 170, 59, 16, 160, 15, 120, 48, 41, 78, 125, 22, 166, 34, 74, 56, 248, 175, 0, 0, 129, 38, 209, 1, 219, 240, 64, 28, 112, 156, 159, 1, 81, 106, 91, 4, 249, 244, 83, 15, 127, 168, 174, 15, 61, 253, 195, 55, 77, 200, 236, 18, 139, 141, 0, 0, 193, 169, 155, 24, 174, 205, 201, 35, 226, 56, 211, 9, 104, 41, 223, 3, 228, 121, 229, 14, 187, 138, 9, 22, 132, 62, 11, 0, 55, 74, 17, 30, 251, 211, 0, 0, 103, 178, 81, 43, 127, 35, 110, 24, 0, 222, 26, 1, 112, 117, 59, 7, 52, 230, 15, 55, 98, 93, 129, 50, 167, 124, 78, 43, 233, 59, 13, 53, 148, 248, 0, 0, 9, 185, 43, 15, 116, 176, 165, 54, 153, 217, 152, 53, 20, 159, 64, 36, 99, 127, 125, 24, 228, 32, 166, 28, 244, 143, 168, 26, 178, 130, 3, 12, 201, 78, 0, 0, 113, 64, 207, 36, 254, 224, 40, 34, 123, 130, 195, 26, 131, 160, 133, 11, 213, 186, 73, 12, 97, 20, 113, 3, 200, 197, 77, 48, 134, 175, 65, 40, 43, 120, 0, 0, 179, 226, 32, 33, 232, 99, 237, 60, 167, 154, 127, 52, 159, 115, 63, 22, 122, 33, 229, 38, 51, 141, 43, 57, 123, 174, 219, 27, 212, 135, 124, 18, 166, 234, 0, 0, 61, 217, 90, 58, 22, 76, 233, 17, 157, 229, 247, 19, 124, 89, 174, 41, 1, 90, 170, 57, 97, 226, 3, 42, 105, 172, 3, 59, 238, 86, 123, 30, 50, 190, 0, 0, 13, 7, 46, 63, 232, 244, 15, 22, 143, 169, 166, 18, 49, 199, 173, 42, 41, 226, 71, 16, 225, 14, 199, 28, 72, 255, 171, 52, 11, 65, 122, 41, 114, 75, 0, 0, 128, 215, 109, 41, 187, 160, 46, 17, 222, 195, 72, 41, 116, 119, 25, 45, 176, 16, 60, 15, 180, 205, 238, 29, 2, 246, 28, 46, 90, 135, 83, 7, 158, 89, 0, 0, 28, 89, 2, 10, 97, 255, 57, 39, 30, 90, 18, 5, 150, 101, 82, 61, 62, 97, 253, 33, 215, 250, 254, 26, 90, 40, 142, 28, 78, 25, 255, 36, 252, 169, 0, 0, 220, 194, 190, 41, 189, 119, 43, 36, 55, 37, 247, 60, 87, 16, 35, 34, 202, 229, 101, 17, 106, 232, 5, 19, 232, 115, 113, 56, 20, 119, 206, 57, 44, 156, 0, 0, 89, 139, 150, 45, 56, 184, 1, 4, 225, 194, 187, 60, 132, 235, 162, 40, 9, 119, 2, 27, 130, 4, 235, 53, 167, 166, 240, 57, 155, 6, 95, 0, 64, 201, 0, 0, 251, 114, 229, 13, 2, 217, 245, 59, 143, 156, 12, 57, 144, 45, 11, 33, 226, 44, 116, 53, 150, 254, 134, 34, 59, 1, 98, 56, 38, 3, 148, 8, 217, 57, 0, 0, 50, 51, 107, 50, 213, 204, 28, 10, 106, 222, 229, 62, 28, 52, 226, 0, 49, 224, 248, 11, 220, 151, 78, 30, 198, 78, 2, 16, 187, 95, 231, 46, 132, 31, 0, 0, 46, 213, 232, 20, 140, 162, 16, 21, 37, 58, 220, 54, 80, 139, 51, 47, 194, 240, 237, 57, 214, 253, 9, 31, 84, 194, 236, 41, 242, 202, 65, 27, 114, 238, 0, 0, 142, 169, 239, 13, 43, 149, 106, 51, 149, 121, 194, 26, 4, 26, 17, 18, 114, 199, 233, 17, 230, 236, 85, 32, 202, 6, 205, 31, 81, 66, 34, 56, 19, 15, 0, 0, 103, 103, 40, 62, 166, 221, 41, 2, 220, 204, 234, 44, 133, 23, 156, 31, 40, 219, 98, 51, 158, 194, 226, 15, 94, 3, 197, 39, 147, 93, 124, 8, 213, 173, 0, 0, 107, 155, 245, 41, 239, 0, 135, 23, 250, 226, 136, 24, 240, 24, 227, 44, 233, 211, 38, 24, 181, 116, 40, 10, 55, 219, 199, 30, 119, 84, 105, 36, 225, 221, 0, 0, 16, 20, 203, 38, 164, 88, 182, 26, 207, 254, 84, 49, 249, 46, 206, 21, 139, 78, 225, 18, 113, 88, 95, 29, 10, 190, 92, 39, 160, 0, 222, 62, 43, 91, 0, 0, 153, 182, 198, 9, 247, 87, 49, 26, 27, 135, 70, 62, 90, 205, 213, 27, 168, 130, 22, 52, 94, 254, 94, 27, 161, 165, 247, 54, 96, 187, 75, 0, 171, 95, 0, 0, 170, 195, 198, 1, 75, 133, 204, 5, 155, 81, 131, 40, 250, 95, 196, 42, 144, 123, 47, 22, 195, 68, 208, 46, 158, 78, 20, 61, 240, 40, 156, 62, 155, 45, 0, 0, 79, 210, 52, 26, 183, 140, 141, 56, 1, 116, 19, 26, 50, 60, 182, 45, 65, 229, 46, 52, 179, 183, 125, 7, 57, 217, 105, 49, 115, 241, 80, 11, 164, 228, 0, 0, 20, 148, 186, 30, 199, 196, 253, 41, 19, 79, 142, 13, 234, 183, 187, 33, 232, 76, 211, 10, 238, 51, 103, 50, 111, 82, 115, 28, 180, 197, 185, 36, 159, 77, 0, 0, 104, 12, 234, 59, 188, 66, 16, 50, 181, 146, 179, 55, 217, 72, 192, 16, 9, 175, 111, 57, 52, 58, 242, 38, 148, 36, 58, 42, 85, 56, 141, 37, 65, 62, 0, 0, 182, 237, 69, 26, 220, 191, 237, 50, 171, 161, 205, 3, 140, 81, 70, 40, 47, 6, 147, 6, 220, 248, 47, 15, 55, 127, 31, 50, 146, 100, 103, 49, 35, 1, 0, 0, 215, 36, 152, 19, 242, 72, 215, 61, 122, 137, 201, 17, 13, 147, 237, 45, 110, 87, 11, 63, 189, 152, 143, 18, 237, 142, 80, 23, 87, 81, 61, 14, 148, 141, 0, 0, 159, 72, 102, 19, 34, 61, 1, 40, 216, 99, 176, 38, 12, 174, 120, 46, 143, 111, 239, 54, 106, 76, 47, 24, 202, 162, 194, 38, 251, 211, 28, 56, 97, 50, 0, 0, 222, 19, 215, 24, 106, 28, 32, 57, 8, 98, 142, 2, 221, 190, 48, 24, 147, 67, 69, 37, 191, 168, 68, 42, 212, 32, 68, 37, 59, 86, 49, 9, 37, 183, 0, 0, 233, 80, 131, 27, 150, 148, 255, 27, 183, 252, 165, 4, 249, 155, 180, 32, 4, 21, 148, 22, 167, 11, 70, 11, 4, 81, 228, 3, 138, 162, 230, 44, 81, 76, 0, 0, 180, 44, 59, 62, 79, 10, 27, 51, 2, 4, 33, 55, 252, 214, 124, 18, 48, 158, 20, 33, 4, 142, 219, 49, 173, 25, 37, 17, 91, 136, 214, 23, 228, 61, 0, 0, 47, 176, 126, 48, 176, 206, 120, 24, 207, 68, 112, 40, 150, 57, 138, 15, 130, 6, 145, 60, 165, 146, 42, 2, 14, 197, 221, 42, 23, 16, 102, 33, 42, 186, 0, 0, 191, 229, 228, 44, 189, 217, 209, 8, 23, 91, 0, 9, 168, 161, 242, 25, 155, 174, 6, 9, 210, 141, 243, 15, 30, 124, 232, 27, 86, 162, 113, 60, 17, 133, 0, 0, 8, 156, 120, 1, 19, 165, 36, 63, 98, 82, 54, 5, 111, 34, 30, 42, 45, 35, 0, 42, 26, 251, 125, 55, 193, 116, 72, 13, 111, 228, 115, 61, 223, 236, 0, 0, 171, 88, 50, 61, 40, 154, 213, 6, 195, 77, 193, 43, 98, 160, 144, 52, 87, 89, 171, 20, 184, 203, 113, 40, 207, 34, 2, 54, 115, 160, 75, 1, 90, 140, 0, 0, 143, 15, 45, 2, 76, 33, 248, 21, 222, 74, 148, 13, 112, 62, 186, 54, 70, 194, 8, 12, 65, 30, 3, 42, 121, 16, 218, 59, 16, 237, 210, 54, 17, 104, 0, 0, 238, 188, 145, 63, 42, 168, 48, 22, 65, 216, 192, 32, 199, 99, 199, 51, 245, 55, 241, 43, 85, 177, 243, 24, 220, 11, 86, 19, 175, 183, 5, 62, 247, 206, 0, 0, 51, 107, 150, 1, 126, 106, 211, 46, 198, 106, 47, 23, 168, 192, 146, 15, 166, 95, 36, 29, 0, 231, 204, 14, 70, 18, 112, 8, 221, 216, 32, 19, 231, 103, 0, 0, 25, 191, 0, 3, 117, 238, 92, 28, 148, 164, 254, 8, 170, 93, 77, 45, 146, 107, 43, 53, 172, 182, 62, 24, 65, 149, 221, 11, 131, 205, 251, 3, 200, 30, 0, 0, 253, 206, 7, 1, 115, 112, 115, 28, 182, 7, 90, 41, 216, 223, 185, 17, 1, 94, 191, 43, 158, 98, 37, 41, 243, 210, 64, 19, 173, 213, 77, 58, 239, 174, 0, 0, 249, 161, 254, 18, 241, 46, 95, 44, 148, 43, 69, 0, 35, 212, 194, 63, 196, 49, 101, 16, 156, 173, 118, 63, 188, 131, 46, 31, 116, 149, 2, 34, 220, 166, 0, 0, 233, 69, 195, 59, 145, 83, 112, 44, 99, 126, 143, 38, 223, 118, 226, 30, 5, 80, 188, 44, 90, 132, 14, 26, 56, 48, 124, 54, 112, 31, 21, 42, 241, 126, 0, 0, 179, 201, 214, 6, 252, 48, 80, 35, 124, 99, 101, 8, 29, 58, 19, 27, 140, 186, 129, 36, 226, 113, 138, 48, 189, 146, 89, 36, 144, 250, 79, 42, 107, 254, 0, 0, 251, 189, 72, 41, 62, 226, 177, 48, 0, 155, 46, 28, 193, 111, 60, 32, 217, 86, 59, 1, 21, 205, 6, 45, 107, 43, 135, 57, 20, 208, 53, 6, 233, 126, 0, 0, 81, 81, 249, 12, 204, 65, 188, 8, 68, 182, 196, 2, 145, 27, 32, 25, 185, 209, 222, 8, 112, 11, 35, 3, 2, 251, 139, 9, 191, 81, 188, 56, 213, 21, 0, 0, 242, 236, 248, 47, 48, 31, 168, 32, 148, 15, 140, 29, 95, 238, 19, 8, 187, 249, 35, 16, 226, 37, 132, 3, 249, 199, 78, 61, 87, 100, 140, 11, 183, 165, 0, 0, 88, 86, 106, 41, 228, 66, 224, 53, 67, 86, 246, 30, 144, 148, 44, 5, 56, 190, 41, 46, 158, 36, 128, 31, 140, 173, 71, 4, 162, 149, 28, 58, 192, 132, 0, 0, 209, 128, 27, 24, 111, 202, 89, 54, 34, 253, 241, 52, 7, 166, 134, 41, 211, 94, 114, 19, 25, 100, 140, 31, 8, 74, 44, 2, 88, 48, 224, 32, 89, 38, 0, 0, 15, 106, 220, 20, 34, 215, 110, 29, 83, 87, 225, 47, 80, 100, 208, 16, 116, 194, 119, 0, 139, 158, 147, 9, 101, 213, 49, 55, 164, 198, 113, 44, 214, 254, 0, 0, 224, 199, 111, 23, 182, 92, 227, 50, 156, 64, 252, 35, 194, 100, 53, 29, 19, 35, 174, 19, 147, 107, 96, 36, 71, 168, 240, 63, 63, 172, 249, 42, 226, 141, 0, 0, 85, 147, 226, 24, 196, 23, 226, 44, 109, 216, 32, 23, 206, 164, 35, 7, 47, 216, 185, 35, 0, 129, 225, 59, 252, 112, 188, 60, 180, 100, 118, 19, 106, 42, 0, 0, 114, 40, 204, 53, 62, 128, 79, 1, 192, 118, 76, 12, 153, 142, 22, 36, 254, 13, 249, 40, 137, 7, 114, 63, 96, 199, 224, 39, 18, 159, 238, 55, 119, 134, 0, 0, 191, 218, 72, 33, 63, 162, 126, 62, 177, 142, 215, 9, 77, 174, 116, 43, 193, 53, 231, 58, 215, 8, 59, 25, 151, 109, 84, 39, 36, 155, 192, 36, 45, 228, 0, 0, 97, 19, 30, 1, 90, 29, 203, 29, 157, 235, 119, 30, 6, 92, 157, 28, 50, 48, 133, 51, 247, 175, 51, 14, 139, 13, 75, 24, 139, 27, 139, 33, 19, 100, 0, 0, 190, 66, 102, 54, 160, 100, 109, 55, 137, 168, 139, 21, 95, 28, 36, 13, 206, 139, 250, 13, 160, 209, 43, 0, 27, 249, 194, 48, 25, 1, 227, 29, 106, 20, 0, 0, 208, 239, 131, 61, 32, 93, 202, 2, 29, 237, 229, 55, 75, 199, 165, 42, 10, 135, 178, 20, 231, 159, 96, 26, 214, 173, 40, 0, 213, 12, 59, 56, 24, 179, 0, 0, 67, 84, 49, 39, 224, 28, 78, 54, 153, 114, 134, 46, 82, 245, 110, 30, 61, 161, 66, 33, 130, 96, 38, 50, 66, 255, 53, 9, 152, 1, 1, 27, 105, 252, 0, 0, 96, 137, 210, 23, 45, 88, 67, 18, 23, 27, 189, 9, 132, 33, 253, 31, 72, 181, 119, 22, 90, 55, 135, 3, 191, 43, 137, 53, 14, 254, 250, 9, 206, 224, 0, 0, 235, 180, 253, 22, 112, 189, 236, 6, 157, 167, 230, 34, 113, 94, 247, 40, 143, 146, 176, 62, 138, 213, 168, 21, 174, 209, 42, 63, 211, 127, 136, 60, 74, 151, 0, 0, 132, 244, 246, 41, 126, 15, 39, 16, 72, 35, 252, 63, 142, 202, 21, 7, 17, 237, 144, 0, 11, 244, 144, 7, 77, 166, 60, 0, 212, 84, 31, 14, 82, 85, 0, 0, 227, 238, 90, 29, 109, 43, 65, 14, 55, 129, 140, 37, 217, 240, 18, 10, 232, 197, 112, 18, 154, 233, 108, 8, 145, 176, 152, 35, 119, 210, 102, 45, 170, 91, 0, 0, 23, 151, 246, 48, 237, 107, 74, 11, 216, 238, 49, 61, 106, 39, 119, 23, 33, 247, 218, 63, 135, 25, 2, 40, 229, 86, 232, 55, 3, 95, 216, 31, 87, 138, 0, 0, 144, 104, 114, 53, 19, 121, 108, 20, 88, 209, 55, 8, 171, 127, 9, 36, 229, 14, 10, 17, 254, 58, 191, 12, 16, 208, 67, 28, 210, 250, 233, 23, 104, 251, 0, 0, 58, 120, 53, 56, 206, 163, 186, 1, 38, 155, 231, 16, 186, 196, 178, 41, 79, 9, 186, 36, 97, 182, 133, 50, 105, 232, 226, 37, 99, 178, 200, 55, 80, 215, 0, 0, 138, 164, 188, 40, 78, 252, 146, 17, 245, 98, 223, 3, 58, 125, 53, 45, 120, 29, 247, 7, 10, 71, 238, 9, 171, 160, 149, 41, 120, 150, 253, 35, 229, 93, 0, 0, 205, 65, 253, 18, 3, 58, 229, 33, 149, 170, 248, 32, 19, 103, 111, 57, 63, 132, 60, 45, 148, 240, 136, 41], "i8", 4, t.L + 20480);
D([9, 83, 181, 25, 13, 96, 207, 14, 90, 104, 0, 0, 182, 99, 239, 37, 19, 13, 142, 55, 235, 130, 177, 49, 156, 5, 52, 45, 90, 200, 193, 15, 237, 104, 255, 45, 241, 250, 139, 33, 181, 122, 115, 9, 24, 111, 0, 0, 243, 85, 198, 5, 61, 27, 33, 11, 65, 69, 249, 39, 0, 153, 86, 34, 60, 85, 52, 51, 224, 53, 129, 16, 143, 185, 17, 25, 100, 117, 159, 31, 9, 255, 0, 0, 59, 63, 166, 52, 183, 31, 65, 45, 39, 151, 143, 23, 102, 192, 14, 8, 131, 101, 199, 54, 121, 125, 69, 28, 88, 107, 55, 42, 216, 125, 37, 46, 236, 197, 0, 0, 36, 80, 0, 5, 26, 221, 252, 20, 91, 238, 11, 35, 151, 123, 217, 58, 139, 236, 51, 18, 254, 99, 1, 41, 78, 55, 31, 8, 94, 6, 70, 9, 37, 34, 0, 0, 249, 238, 128, 49, 228, 161, 218, 53, 118, 151, 139, 34, 38, 136, 4, 0, 141, 18, 123, 32, 106, 236, 58, 43, 227, 7, 95, 46, 72, 135, 61, 48, 80, 250, 0, 0, 17, 40, 79, 63, 244, 53, 54, 35, 179, 19, 162, 23, 233, 164, 12, 26, 94, 138, 166, 1, 138, 28, 74, 51, 114, 155, 186, 62, 229, 136, 164, 49, 132, 107, 0, 0, 18, 94, 218, 17, 206, 56, 184, 7, 151, 178, 172, 28, 5, 144, 130, 49, 169, 182, 162, 28, 232, 228, 167, 12, 218, 188, 49, 30, 222, 16, 143, 11, 80, 247, 0, 0, 235, 244, 133, 3, 122, 113, 46, 41, 199, 235, 92, 50, 189, 203, 180, 33, 123, 4, 114, 22, 15, 23, 37, 28, 153, 213, 175, 15, 159, 117, 123, 61, 87, 60, 0, 0, 5, 209, 183, 16, 196, 76, 210, 1, 242, 201, 87, 14, 229, 18, 151, 50, 244, 179, 85, 52, 56, 137, 217, 19, 58, 42, 134, 37, 235, 96, 62, 30, 254, 18, 0, 0, 96, 74, 121, 31, 238, 27, 43, 22, 132, 11, 233, 46, 117, 153, 56, 59, 29, 119, 203, 39, 102, 134, 106, 45, 134, 119, 207, 43, 53, 206, 104, 60, 98, 32, 0, 0, 5, 93, 12, 30, 206, 96, 135, 24, 255, 218, 114, 37, 42, 20, 155, 3, 72, 26, 75, 8, 160, 64, 236, 18, 140, 213, 115, 52, 247, 209, 196, 48, 170, 118, 0, 0, 62, 230, 236, 17, 221, 102, 152, 21, 53, 238, 230, 21, 192, 115, 137, 4, 75, 95, 98, 2, 200, 32, 203, 60, 190, 250, 14, 7, 87, 195, 187, 29, 85, 239, 0, 0, 134, 192, 83, 60, 23, 210, 155, 56, 201, 174, 161, 9, 39, 13, 87, 45, 198, 4, 129, 40, 23, 197, 48, 24, 126, 200, 204, 5, 151, 239, 150, 63, 99, 166, 0, 0, 1, 98, 1, 37, 202, 64, 113, 26, 14, 252, 148, 57, 92, 41, 179, 7, 153, 195, 61, 2, 38, 178, 64, 44, 209, 245, 251, 17, 200, 218, 95, 38, 65, 181, 0, 0, 116, 133, 117, 11, 181, 7, 96, 43, 233, 198, 249, 52, 80, 162, 153, 12, 216, 243, 189, 34, 235, 9, 132, 50, 183, 37, 216, 44, 129, 128, 158, 20, 149, 222, 0, 0, 42, 35, 103, 59, 243, 199, 247, 45, 180, 222, 162, 21, 69, 65, 168, 57, 186, 215, 158, 22, 252, 17, 114, 7, 226, 228, 20, 61, 36, 171, 21, 56, 211, 76, 0, 0, 79, 71, 133, 61, 175, 226, 230, 29, 141, 102, 52, 22, 226, 138, 18, 19, 137, 234, 90, 56, 17, 249, 50, 55, 254, 219, 173, 50, 180, 25, 56, 47, 166, 141, 0, 0, 247, 78, 123, 61, 244, 113, 126, 63, 165, 215, 189, 29, 193, 100, 49, 7, 11, 241, 255, 29, 28, 116, 125, 55, 79, 248, 79, 45, 199, 188, 26, 27, 252, 19, 0, 0, 234, 66, 208, 61, 89, 9, 117, 45, 6, 253, 234, 24, 145, 169, 137, 62, 235, 190, 147, 60, 140, 39, 153, 53, 27, 155, 163, 59, 236, 243, 49, 43, 41, 115, 0, 0, 161, 148, 92, 47, 176, 63, 163, 54, 10, 79, 171, 31, 199, 220, 37, 18, 24, 238, 104, 43, 62, 229, 57, 33, 146, 72, 241, 54, 109, 80, 77, 18, 114, 146, 0, 0, 194, 126, 6, 31, 173, 76, 79, 57, 32, 82, 186, 27, 117, 173, 34, 10, 26, 66, 232, 8, 246, 173, 253, 22, 26, 27, 161, 33, 156, 50, 116, 24, 29, 218, 0, 0, 241, 54, 216, 26, 60, 232, 126, 21, 166, 72, 155, 39, 116, 38, 206, 41, 102, 41, 30, 9, 135, 133, 217, 1, 156, 199, 6, 19, 38, 159, 86, 61, 87, 129, 0, 0, 219, 168, 149, 58, 203, 220, 97, 23, 97, 111, 211, 57, 17, 49, 176, 15, 184, 35, 23, 27, 100, 26, 153, 37, 158, 65, 208, 61, 192, 24, 105, 3, 233, 227, 0, 0, 249, 28, 13, 27, 252, 61, 91, 0, 209, 211, 132, 9, 243, 229, 123, 44, 251, 106, 231, 2, 28, 67, 170, 62, 0, 187, 120, 1, 91, 1, 240, 14, 229, 251, 0, 0, 20, 226, 46, 17, 144, 245, 171, 30, 1, 84, 49, 25, 229, 165, 147, 10, 120, 28, 192, 0, 87, 127, 67, 25, 139, 90, 119, 61, 184, 204, 177, 63, 79, 159, 0, 0, 122, 243, 133, 16, 137, 8, 209, 59, 131, 2, 136, 60, 194, 164, 109, 6, 151, 157, 198, 53, 245, 11, 154, 37, 14, 230, 242, 34, 99, 76, 184, 56, 156, 99, 0, 0, 165, 160, 97, 31, 20, 5, 218, 34, 239, 227, 20, 60, 108, 248, 148, 4, 75, 44, 11, 4, 125, 144, 130, 6, 23, 27, 172, 52, 68, 80, 139, 24, 31, 67, 0, 0, 153, 248, 206, 56, 249, 223, 222, 26, 36, 119, 101, 21, 13, 129, 170, 46, 65, 114, 170, 35, 92, 70, 153, 55, 214, 246, 56, 36, 234, 249, 159, 12, 152, 162, 0, 0, 3, 133, 116, 39, 85, 159, 9, 43, 124, 142, 50, 49, 220, 145, 131, 27, 14, 172, 18, 10, 126, 206, 187, 24, 203, 134, 251, 56, 57, 123, 183, 46, 61, 153, 0, 0, 226, 206, 176, 62, 77, 216, 156, 46, 73, 170, 173, 56, 166, 253, 30, 62, 23, 26, 245, 33, 30, 30, 225, 61, 133, 183, 238, 30, 90, 161, 123, 42, 33, 165, 0, 0, 128, 61, 210, 38, 214, 137, 168, 55, 120, 212, 116, 36, 201, 71, 244, 2, 225, 192, 98, 9, 228, 114, 12, 37, 51, 90, 234, 21, 171, 129, 174, 30, 241, 117, 0, 0, 126, 213, 13, 40, 192, 22, 170, 33, 9, 89, 234, 52, 110, 251, 254, 11, 55, 146, 98, 27, 198, 47, 244, 49, 127, 12, 168, 57, 88, 133, 191, 24, 122, 160, 0, 0, 19, 52, 173, 33, 181, 109, 174, 56, 74, 104, 125, 50, 0, 1, 112, 46, 141, 122, 123, 56, 114, 33, 125, 37, 110, 10, 74, 31, 118, 132, 87, 21, 120, 102, 0, 0, 114, 166, 188, 62, 129, 64, 32, 9, 1, 102, 198, 45, 78, 69, 139, 51, 166, 158, 223, 11, 159, 100, 155, 9, 37, 105, 100, 15, 158, 120, 143, 54, 13, 81, 0, 0, 99, 133, 204, 6, 108, 189, 2, 48, 170, 30, 16, 62, 255, 214, 55, 9, 146, 136, 54, 22, 6, 246, 10, 50, 218, 138, 116, 39, 54, 139, 141, 18, 220, 235, 0, 0, 250, 204, 148, 35, 58, 239, 197, 38, 36, 249, 4, 18, 146, 228, 1, 49, 190, 7, 79, 29, 179, 121, 141, 59, 177, 249, 53, 45, 21, 58, 81, 12, 154, 101, 0, 0, 19, 78, 6, 13, 132, 193, 206, 41, 98, 224, 241, 6, 17, 120, 71, 12, 21, 102, 65, 61, 163, 99, 254, 23, 33, 7, 105, 48, 37, 195, 191, 32, 226, 168, 0, 0, 12, 204, 244, 17, 196, 28, 223, 59, 108, 189, 214, 13, 148, 143, 230, 25, 139, 136, 21, 37, 108, 241, 252, 45, 191, 154, 192, 1, 110, 227, 86, 13, 151, 127, 0, 0, 181, 121, 57, 58, 194, 102, 134, 10, 226, 41, 232, 39, 121, 227, 35, 10, 186, 80, 14, 36, 123, 44, 252, 13, 127, 50, 38, 30, 107, 115, 241, 1, 34, 174, 0, 0, 111, 250, 80, 4, 154, 53, 207, 35, 150, 136, 79, 61, 77, 223, 30, 42, 252, 96, 112, 45, 142, 20, 73, 50, 212, 26, 247, 57, 1, 67, 148, 63, 145, 234, 0, 0, 36, 168, 252, 14, 64, 100, 64, 16, 174, 79, 22, 34, 250, 19, 131, 47, 224, 97, 84, 24, 25, 64, 80, 49, 206, 89, 206, 42, 92, 43, 67, 59, 141, 203, 0, 0, 97, 115, 34, 15, 22, 244, 2, 5, 47, 116, 49, 57, 241, 247, 71, 43, 150, 196, 203, 44, 232, 33, 177, 5, 179, 133, 140, 24, 3, 221, 35, 0, 165, 51, 0, 0, 39, 211, 203, 59, 104, 211, 70, 16, 233, 174, 74, 30, 136, 20, 130, 19, 176, 214, 110, 39, 95, 3, 36, 37, 142, 112, 54, 24, 188, 98, 202, 14, 197, 176, 0, 0, 54, 228, 123, 45, 40, 241, 90, 24, 241, 160, 54, 6, 29, 131, 136, 10, 216, 175, 178, 38, 109, 128, 169, 61, 56, 22, 234, 23, 239, 7, 208, 37, 42, 238, 0, 0, 161, 54, 184, 23, 142, 237, 187, 57, 125, 239, 121, 54, 253, 23, 144, 1, 200, 38, 245, 55, 57, 187, 24, 34, 77, 13, 146, 27, 167, 204, 207, 41, 107, 111, 0, 0, 132, 43, 131, 6, 236, 203, 247, 54, 52, 249, 31, 14, 162, 20, 67, 38, 216, 192, 233, 62, 22, 144, 226, 2, 219, 227, 24, 60, 215, 255, 133, 34, 119, 220, 0, 0, 222, 158, 179, 30, 130, 208, 184, 43, 66, 45, 97, 48, 181, 12, 32, 2, 49, 96, 67, 2, 132, 159, 209, 63, 188, 75, 175, 34, 208, 113, 159, 6, 71, 125, 0, 0, 126, 96, 246, 43, 82, 54, 111, 50, 208, 143, 42, 2, 71, 223, 115, 37, 119, 250, 134, 60, 191, 199, 136, 32, 123, 80, 86, 40, 233, 124, 198, 30, 74, 0, 0, 0, 193, 177, 94, 22, 137, 39, 181, 21, 170, 197, 229, 26, 243, 89, 93, 51, 127, 150, 240, 2, 102, 12, 243, 3, 7, 199, 250, 51, 109, 254, 88, 20, 2, 240, 0, 0, 224, 42, 222, 45, 17, 92, 159, 54, 87, 30, 209, 44, 53, 215, 191, 29, 133, 237, 175, 38, 104, 151, 210, 26, 198, 244, 13, 18, 15, 34, 122, 42, 78, 5, 0, 0, 100, 44, 195, 26, 79, 66, 205, 51, 132, 191, 228, 10, 251, 128, 191, 13, 14, 94, 113, 7, 61, 84, 58, 1, 247, 160, 58, 18, 123, 0, 0, 5, 18, 172, 0, 0, 103, 168, 177, 30, 235, 182, 74, 32, 152, 8, 63, 37, 150, 78, 151, 22, 237, 163, 153, 4, 204, 85, 218, 2, 135, 241, 186, 56, 12, 235, 50, 47, 142, 206, 0, 0, 124, 73, 25, 3, 122, 11, 206, 11, 2, 140, 80, 18, 148, 126, 108, 22, 93, 177, 202, 19, 164, 185, 149, 39, 211, 114, 88, 40, 104, 114, 238, 20, 74, 23, 0, 0, 115, 250, 154, 7, 176, 78, 104, 15, 56, 84, 152, 11, 99, 135, 206, 26, 100, 230, 249, 7, 177, 124, 85, 16, 123, 101, 193, 9, 255, 234, 13, 55, 201, 204, 0, 0, 103, 131, 75, 53, 245, 28, 32, 37, 254, 107, 80, 61, 89, 223, 109, 29, 183, 93, 106, 3, 97, 81, 151, 42, 12, 228, 38, 37, 17, 185, 82, 2, 90, 94, 0, 0, 202, 133, 206, 17, 118, 106, 202, 20, 68, 250, 95, 30, 207, 123, 170, 26, 121, 122, 75, 42, 92, 197, 7, 36, 44, 92, 224, 21, 30, 105, 50, 62, 138, 174, 0, 0, 157, 13, 177, 23, 78, 94, 97, 6, 175, 252, 248, 17, 39, 198, 75, 41, 230, 45, 184, 12, 196, 12, 46, 51, 222, 89, 232, 2, 92, 110, 43, 56, 212, 0, 0, 0, 237, 220, 64, 49, 33, 1, 132, 32, 62, 146, 45, 14, 94, 50, 38, 22, 11, 247, 135, 34, 12, 25, 225, 11, 125, 148, 64, 54, 13, 6, 102, 0, 184, 135, 0, 0, 232, 174, 156, 28, 130, 105, 4, 2, 178, 11, 39, 26, 108, 17, 136, 11, 99, 103, 166, 4, 187, 107, 134, 30, 111, 15, 76, 55, 59, 218, 132, 20, 102, 3, 0, 0, 17, 183, 114, 55, 142, 26, 123, 42, 240, 167, 91, 41, 76, 98, 234, 50, 1, 69, 148, 38, 110, 160, 241, 39, 148, 153, 237, 61, 164, 202, 202, 48, 24, 31, 0, 0, 92, 200, 70, 20, 70, 93, 254, 15, 53, 6, 28, 32, 57, 130, 247, 13, 222, 234, 198, 54, 79, 17, 219, 25, 160, 250, 241, 56, 246, 91, 65, 36, 88, 14, 0, 0, 46, 151, 72, 33, 156, 223, 177, 61, 213, 173, 221, 12, 160, 211, 8, 36, 244, 152, 24, 8, 189, 46, 6, 29, 236, 160, 189, 39, 126, 196, 23, 18, 154, 227, 0, 0, 89, 18, 46, 2, 207, 183, 98, 60, 175, 98, 19, 40, 1, 105, 206, 5, 147, 113, 119, 7, 128, 234, 215, 51, 182, 242, 99, 20, 188, 73, 155, 4, 64, 167, 0, 0, 67, 95, 74, 51, 144, 92, 220, 61, 213, 218, 214, 49, 78, 157, 151, 33, 23, 229, 126, 60, 153, 210, 197, 23, 176, 241, 31, 15, 101, 188, 238, 63, 169, 5, 0, 0, 254, 241, 8, 11, 143, 94, 40, 34, 253, 123, 8, 58, 194, 185, 159, 51, 215, 119, 209, 2, 118, 217, 21, 16, 101, 74, 78, 7, 101, 91, 8, 46, 228, 135, 0, 0, 236, 226, 213, 46, 38, 43, 221, 23, 215, 217, 134, 39, 245, 246, 200, 11, 110, 204, 194, 56, 139, 58, 254, 53, 215, 236, 140, 52, 152, 29, 176, 14, 78, 247, 0, 0, 92, 209, 196, 33, 154, 3, 28, 42, 185, 116, 14, 60, 193, 239, 169, 23, 16, 68, 74, 37, 4, 3, 139, 48, 146, 90, 154, 39, 250, 143, 209, 6, 234, 53, 0, 0, 234, 225, 63, 63, 189, 110, 78, 50, 237, 149, 80, 6, 12, 168, 206, 24, 93, 24, 59, 13, 93, 127, 233, 35, 136, 215, 44, 45, 231, 70, 89, 36, 33, 173, 0, 0, 186, 183, 117, 20, 194, 127, 63, 33, 216, 179, 24, 9, 57, 204, 121, 14, 224, 219, 140, 1, 212, 183, 95, 57, 211, 195, 133, 55, 80, 6, 166, 37, 147, 149, 0, 0, 253, 242, 36, 53, 225, 175, 226, 38, 94, 56, 9, 7, 50, 217, 79, 25, 156, 132, 214, 28, 46, 169, 225, 0, 186, 216, 29, 51, 48, 34, 74, 21, 126, 46, 0, 0, 133, 153, 214, 15, 100, 119, 113, 2, 234, 42, 247, 29, 219, 50, 39, 12, 159, 20, 207, 12, 239, 55, 164, 61, 136, 231, 247, 50, 173, 115, 157, 29, 233, 10, 0, 0, 3, 160, 9, 20, 4, 173, 35, 39, 248, 175, 225, 46, 94, 80, 103, 46, 208, 197, 84, 26, 20, 184, 127, 35, 155, 78, 209, 8, 185, 253, 92, 38, 33, 145, 0, 0, 144, 43, 38, 25, 127, 79, 6, 55, 169, 41, 204, 35, 127, 48, 241, 8, 183, 31, 93, 2, 224, 93, 124, 25, 155, 236, 18, 22, 176, 150, 138, 33, 21, 43, 0, 0, 87, 117, 61, 8, 153, 91, 102, 36, 73, 154, 72, 25, 62, 92, 210, 20, 111, 6, 73, 7, 106, 75, 53, 12, 122, 170, 63, 35, 130, 106, 79, 1, 176, 46, 0, 0, 64, 190, 231, 40, 50, 197, 229, 15, 89, 238, 64, 16, 36, 37, 178, 52, 242, 154, 118, 36, 91, 88, 112, 37, 238, 119, 230, 46, 165, 70, 187, 58, 249, 106, 0, 0, 28, 126, 56, 46, 9, 184, 5, 41, 159, 86, 89, 15, 168, 153, 253, 56, 69, 129, 220, 7, 13, 10, 169, 39, 112, 150, 100, 6, 64, 90, 132, 10, 129, 179, 0, 0, 30, 128, 130, 52, 131, 190, 173, 9, 93, 21, 212, 27, 241, 226, 83, 30, 64, 249, 214, 56, 50, 9, 173, 42, 179, 238, 68, 1, 17, 129, 59, 26, 102, 89, 0, 0, 55, 12, 135, 4, 60, 82, 220, 17, 173, 53, 53, 61, 216, 114, 176, 45, 141, 78, 48, 49, 29, 130, 229, 35, 236, 241, 245, 46, 238, 22, 42, 40, 154, 148, 0, 0, 253, 25, 44, 3, 159, 203, 38, 19, 62, 140, 2, 24, 65, 58, 174, 50, 74, 91, 11, 23, 173, 94, 52, 61, 253, 98, 7, 5, 212, 6, 98, 52, 132, 190, 0, 0, 31, 40, 241, 50, 77, 41, 165, 29, 118, 195, 13, 37, 87, 253, 105, 21, 121, 148, 57, 8, 12, 210, 151, 57, 209, 68, 9, 5, 183, 204, 50, 24, 249, 239, 0, 0, 130, 148, 198, 22, 245, 215, 109, 52, 123, 22, 250, 50, 4, 80, 173, 58, 203, 136, 188, 50, 43, 211, 201, 21, 31, 84, 238, 23, 3, 83, 12, 40, 103, 152, 0, 0, 215, 44, 121, 47, 81, 132, 193, 27, 145, 138, 98, 21, 212, 115, 145, 24, 158, 99, 153, 58, 198, 86, 181, 36, 199, 249, 52, 8, 196, 142, 86, 24, 46, 208, 0, 0, 161, 122, 85, 29, 100, 231, 136, 34, 151, 194, 31, 16, 179, 191, 100, 7, 223, 171, 214, 25, 2, 168, 203, 31, 146, 165, 21, 8, 54, 80, 145, 60, 102, 168, 0, 0, 52, 6, 67, 1, 211, 238, 6, 38, 183, 164, 17, 6, 159, 113, 218, 58, 97, 57, 225, 48, 118, 233, 99, 15, 121, 77, 180, 34, 0, 170, 125, 14, 135, 181, 0, 0, 81, 177, 130, 29, 50, 208, 68, 45, 219, 162, 251, 33, 85, 15, 41, 40, 204, 143, 154, 16, 236, 84, 132, 22, 100, 109, 229, 1, 144, 43, 148, 14, 166, 210, 0, 0, 5, 148, 248, 28, 211, 133, 80, 16, 45, 165, 76, 8, 189, 66, 221, 3, 167, 32, 130, 20, 202, 98, 185, 43, 101, 117, 203, 63, 16, 217, 190, 33, 45, 232, 0, 0, 160, 59, 75, 46, 215, 216, 103, 33, 23, 31, 191, 24, 124, 189, 175, 10, 92, 95, 36, 63, 198, 60, 92, 56, 239, 59, 183, 63, 135, 72, 65, 4, 8, 65, 0, 0, 149, 85, 82, 23, 112, 135, 165, 33, 84, 69, 6, 26, 89, 97, 146, 13, 19, 152, 132, 43, 117, 184, 150, 41, 44, 143, 102, 53, 191, 93, 218, 60, 55, 220, 0, 0, 237, 141, 217, 19, 226, 38, 167, 24, 132, 33, 160, 56, 206, 160, 200, 55, 219, 94, 214, 49, 20, 100, 138, 60, 140, 140, 12, 12, 91, 40, 132, 40, 162, 99, 0, 0, 194, 207, 209, 32, 83, 95, 70, 6, 165, 115, 120, 28, 2, 168, 253, 42, 31, 70, 148, 45, 83, 201, 12, 20, 6, 253, 118, 44, 255, 185, 184, 16, 43, 136, 0, 0, 69, 84, 4, 56, 66, 105, 24, 42, 238, 215, 232, 1, 100, 220, 220, 63, 128, 240, 190, 23, 117, 185, 184, 4, 223, 163, 124, 22, 39, 81, 87, 32, 21, 12, 0, 0, 6, 162, 84, 0, 85, 31, 62, 5, 50, 234, 140, 37, 13, 57, 21, 12, 186, 40, 205, 35, 153, 237, 240, 36, 10, 93, 17, 20, 186, 142, 130, 53, 48, 47, 0, 0, 175, 127, 133, 3, 115, 142, 68, 58, 1, 151, 97, 41, 135, 183, 242, 11, 136, 127, 239, 40, 32, 61, 234, 30, 213, 192, 169, 40, 107, 226, 218, 58, 87, 199, 0, 0, 164, 76, 88, 32, 50, 108, 103, 7, 16, 76, 137, 1, 68, 67, 76, 31, 98, 27, 198, 62, 34, 200, 167, 13, 87, 98, 243, 63, 72, 243, 115, 22, 58, 240, 0, 0, 93, 34, 89, 20, 61, 97, 52, 57, 16, 141, 133, 24, 139, 223, 189, 62, 68, 162, 2, 28, 70, 38, 80, 23, 129, 15, 13, 58, 107, 171, 235, 24, 128, 250, 0, 0, 7, 21, 206, 62, 237, 248, 173, 40, 195, 89, 124, 0, 180, 13, 219, 10, 10, 92, 66, 12, 9, 130, 136, 55, 96, 145, 6, 12, 240, 21, 228, 7, 167, 11, 0, 0, 68, 208, 240, 22, 80, 250, 231, 25, 121, 26, 230, 9, 36, 245, 167, 46, 170, 165, 224, 46, 24, 62, 167, 61, 226, 137, 122, 37, 64, 103, 241, 40, 140, 101, 0, 0, 45, 135, 203, 55, 187, 204, 71, 55, 154, 232, 140, 1, 241, 216, 89, 40, 85, 118, 211, 59, 196, 137, 117, 25, 241, 96, 84, 34, 186, 222, 77, 48, 92, 174, 0, 0, 109, 117, 150, 54, 92, 37, 107, 45, 122, 65, 97, 37, 21, 88, 188, 26, 103, 92, 48, 63, 116, 13, 102, 48, 228, 172, 43, 31, 228, 171, 210, 18, 201, 49, 0, 0, 120, 174, 8, 30, 55, 122, 17, 47, 10, 7, 209, 42, 185, 242, 183, 43, 131, 6, 22, 52, 171, 102, 45, 46, 244, 155, 58, 40, 91, 213, 18, 34, 15, 248, 0, 0, 115, 224, 23, 22, 209, 230, 219, 16, 179, 23, 147, 3, 78, 111, 47, 43, 107, 134, 220, 15, 95, 91, 226, 57, 14, 137, 235, 49, 81, 205, 136, 31, 88, 100, 0, 0, 137, 101, 175, 31, 122, 121, 166, 32, 53, 171, 174, 51, 68, 142, 66, 46, 133, 161, 153, 2, 31, 145, 117, 27, 233, 42, 46, 16, 218, 111, 117, 51, 159, 217, 0, 0, 214, 61, 16, 14, 200, 81, 220, 55, 154, 133, 4, 0, 31, 48, 129, 17, 195, 122, 161, 18, 22, 63, 79, 8, 106, 131, 63, 32, 144, 86, 245, 30, 71, 188, 0, 0, 67, 195, 247, 22, 99, 11, 66, 14, 198, 74, 180, 35, 177, 92, 77, 10, 93, 57, 166, 30, 27, 75, 21, 43, 203, 38, 213, 13, 106, 10, 137, 7, 30, 227, 0, 0, 49, 171, 78, 20, 195, 14, 55, 52, 7, 73, 99, 14, 1, 197, 107, 49, 10, 232, 248, 59, 153, 140, 208, 14, 48, 128, 131, 59, 154, 150, 63, 45, 157, 88, 0, 0, 106, 31, 54, 17, 157, 175, 107, 16, 185, 141, 143, 20, 72, 149, 67, 24, 31, 243, 144, 61, 146, 128, 24, 28, 96, 79, 42, 42, 34, 4, 23, 17, 85, 98, 0, 0, 65, 44, 12, 26, 202, 133, 229, 47, 103, 108, 51, 32, 21, 7, 199, 32, 66, 124, 219, 46, 181, 130, 97, 40, 168, 46, 250, 34, 91, 244, 205, 44, 57, 19, 0, 0, 43, 188, 241, 41, 46, 21, 124, 33, 65, 58, 146, 30, 31, 254, 137, 4, 107, 64, 163, 19, 68, 63, 144, 12, 122, 186, 229, 58, 177, 216, 88, 10, 155, 159, 0, 0, 175, 71, 252, 24, 225, 199, 18, 28, 195, 222, 12, 44, 12, 178, 127, 55, 168, 104, 181, 1, 64, 109, 202, 0, 197, 124, 241, 60, 216, 68, 232, 46, 243, 127, 0, 0, 167, 67, 186, 57, 51, 89, 24, 62, 151, 194, 186, 24, 180, 198, 78, 41, 23, 107, 68, 51, 209, 109, 36, 50, 11, 154, 98, 10, 6, 160, 235, 41, 107, 31, 0, 0, 117, 55, 33, 21, 2, 88, 19, 6, 144, 169, 66, 61, 200, 78, 10, 45, 0, 97, 127, 44, 127, 229, 164, 7, 20, 182, 11, 54, 58, 143, 17, 28, 198, 142, 0, 0, 255, 255, 65, 56, 249, 60, 4, 56, 144, 30, 245, 12, 47, 40, 166, 54, 113, 14, 238, 45, 115, 5, 13, 25, 110, 48, 190, 37, 54, 232, 155, 41, 88, 143, 0, 0, 187, 171, 82, 52, 52, 254, 207, 50, 227, 194, 149, 43, 248, 203, 169, 26, 174, 149, 212, 21, 182, 255, 176, 46, 157, 184, 27, 48, 121, 16, 109, 24, 222, 131, 0, 0, 110, 182, 78, 5, 172, 93, 20, 40, 24, 41, 228, 60, 174, 205, 23, 39, 215, 99, 21, 14, 49, 190, 218, 62, 107, 250, 9, 6, 211, 40, 205, 56, 240, 50, 0, 0, 241, 118, 146, 53, 155, 48, 162, 37, 94, 177, 23, 42, 164, 108, 137, 43, 51, 104, 216, 60, 61, 0, 215, 46, 168, 177, 29, 12, 212, 99, 226, 24, 118, 61, 0, 0, 179, 188, 156, 5, 110, 153, 146, 7, 96, 120, 25, 27, 6, 8, 102, 8, 243, 62, 51, 24, 107, 211, 184, 29, 9, 182, 221, 7, 134, 222, 92, 26, 118, 211, 0, 0, 88, 228, 69, 29, 27, 178, 53, 22, 211, 127, 14, 37, 168, 179, 169, 2, 47, 4, 222, 9, 149, 79, 27, 21, 58, 91, 136, 13, 57, 57, 120, 47, 129, 132, 0, 0, 126, 5, 121, 23, 214, 198, 146, 53, 86, 229, 98, 50, 10, 113, 158, 2, 144, 202, 178, 44, 115, 206, 111, 9, 74, 216, 77, 0, 149, 46, 227, 30, 238, 56, 0, 0, 125, 161, 45, 21, 144, 62, 40, 24, 177, 70, 6, 13, 194, 246, 4, 55, 17, 200, 11, 32, 127, 193, 154, 19, 137, 240, 197, 24, 212, 131, 71, 59, 234, 59, 0, 0, 210, 104, 199, 44, 23, 38, 193, 57, 108, 65, 236, 31, 227, 222, 121, 51, 84, 181, 225, 0, 250, 250, 162, 18, 239, 223, 172, 55, 191, 86, 253, 53, 176, 195, 0, 0, 197, 220, 78, 58, 246, 133, 62, 13, 114, 27, 49, 32, 80, 136, 140, 19, 231, 151, 89, 39, 228, 0, 127, 11, 117, 24, 214, 9, 247, 50, 232, 54, 115, 110, 0, 0, 228, 160, 157, 21, 55, 223, 199, 44, 55, 144, 103, 0, 156, 246, 157, 34, 39, 147, 134, 2, 34, 34, 84, 17, 234, 139, 196, 44, 123, 18, 127, 48, 10, 238, 0, 0, 121, 185, 128, 10, 9, 49, 113, 2, 20, 179, 171, 41, 140, 126, 61, 36, 4, 16, 195, 7, 169, 250, 101, 31, 98, 39, 89, 27, 249, 77, 98, 55, 6, 119, 0, 0, 222, 207, 38, 1, 65, 32, 61, 19, 33, 227, 239, 23, 63, 141, 130, 62, 23, 113, 156, 42, 71, 230, 117, 35, 119, 71, 113, 59, 86, 159, 96, 42, 2, 138, 0, 0, 133, 226, 111, 50, 45, 113, 110, 51, 125, 18, 239, 19, 80, 10, 235, 22, 164, 106, 224, 57, 7, 233, 241, 60, 210, 128, 15, 60, 166, 100, 177, 8, 212, 22, 0, 0, 65, 180, 85, 1, 155, 255, 131, 15, 35, 212, 100, 51, 77, 4, 195, 15, 233, 177, 49, 53, 152, 166, 249, 45, 138, 26, 100, 34, 120, 148, 62, 34, 248, 13, 0, 0, 19, 165, 207, 58, 42, 47, 196, 56, 234, 58, 14, 38, 230, 231, 1, 9, 78, 156, 106, 53, 67, 29, 209, 40, 165, 58, 214, 54, 177, 251, 145, 3, 204, 31, 0, 0, 156, 252, 122, 16, 144, 110, 29, 20, 135, 145, 131, 9, 89, 116, 123, 59, 75, 180, 249, 57, 12, 213, 225, 56, 72, 139, 71, 53, 120, 16, 104, 48, 93, 22, 0, 0, 178, 105, 220, 62, 243, 193, 137, 6, 114, 113, 183, 38, 108, 34, 152, 2, 165, 134, 163, 10, 215, 16, 12, 25, 48, 23, 138, 11, 91, 235, 28, 36, 43, 193, 0, 0, 221, 65, 221, 32, 192, 166, 171, 12, 0, 42, 123, 18, 143, 111, 135, 59, 184, 118, 73, 9, 126, 34, 183, 28, 151, 29, 223, 12, 77, 249, 15, 49, 115, 49, 0, 0, 77, 254, 97, 57, 119, 97, 189, 45, 122, 25, 7, 49, 226, 27, 34, 5, 138, 62, 167, 44, 196, 196, 164, 15, 63, 250, 168, 39, 12, 119, 225, 47, 89, 208, 0, 0, 194, 35, 232, 42, 25, 108, 77, 38, 203, 100, 171, 13, 125, 232, 34, 14, 253, 180, 85, 9, 33, 119, 217, 1, 254, 227, 37, 53, 34, 48, 152, 30, 16, 69, 0, 0, 107, 102, 175, 44, 253, 192, 88, 51, 11, 227, 28, 11, 241, 180, 63, 63, 127, 99, 244, 23, 160, 107, 94, 26, 43, 166, 42, 16, 224, 233, 149, 18, 70, 19, 0, 0, 39, 204, 110, 63, 65, 106, 37, 61, 19, 46, 148, 16, 7, 42, 192, 60, 72, 202, 176, 12, 79, 209, 12, 57, 247, 14, 88, 20, 24, 1, 100, 5, 190, 105, 0, 0, 81, 95, 202, 14, 38, 200, 90, 8, 191, 174, 201, 15, 229, 198, 133, 58, 221, 207, 181, 5, 252, 202, 90, 59, 198, 98, 105, 46, 103, 55, 69, 53, 233, 221, 0, 0, 247, 56, 198, 16, 207, 105, 90, 43, 249, 113, 149, 40, 55, 250, 186, 63, 80, 9, 143, 63, 41, 44, 205, 7, 137, 29, 17, 40, 56, 207, 68, 26, 78, 184, 0, 0, 228, 136, 156, 25, 22, 172, 65, 62, 194, 110, 212, 10, 136, 79, 84, 59, 154, 23, 75, 32, 196, 186, 1, 61, 233, 54, 55, 25, 218, 8, 132, 24, 26, 253, 0, 0, 223, 200, 91, 25, 89, 36, 35, 39, 41, 15, 192, 28, 37, 117, 220, 26, 220, 130, 119, 23, 82, 165, 1, 15, 177, 191, 32, 12, 114, 46, 213, 30, 201, 26, 0, 0, 206, 24, 128, 31, 109, 109, 69, 53, 139, 214, 146, 24, 227, 92, 105, 11, 207, 199, 109, 8, 203, 147, 243, 63, 19, 159, 107, 41, 48, 118, 76, 33, 228, 78, 0, 0, 31, 56, 72, 30, 108, 152, 214, 48, 19, 96, 128, 14, 109, 92, 210, 1, 113, 230, 197, 7, 67, 35, 16, 45, 199, 95, 139, 63, 66, 32, 181, 39, 143, 182, 0, 0, 120, 54, 71, 49, 71, 186, 20, 10, 112, 47, 57, 20, 66, 229, 21, 40, 203, 112, 192, 56, 86, 49, 197, 56, 245, 191, 13, 0, 49, 13, 39, 51, 118, 253, 0, 0, 79, 79, 20, 13, 170, 59, 89, 56, 55, 132, 28, 0, 133, 187, 163, 24, 96, 214, 44, 3, 244, 156, 130, 59, 15, 174, 61, 20, 28, 222, 80, 25, 4, 242, 0, 0, 147, 33, 122, 13, 82, 220, 2, 60, 237, 70, 117, 25, 60, 145, 71, 26, 44, 33, 234, 52, 210, 9, 58, 27, 158, 33, 64, 59, 72, 204, 232, 42, 162, 133, 0, 0, 58, 207, 205, 48, 82, 15, 50, 60, 39, 36, 177, 3, 231, 183, 182, 49, 225, 159, 2, 12, 71, 11, 130, 49, 130, 109, 81, 48, 202, 250, 21, 38, 18, 156, 0, 0, 176, 104, 117, 55, 108, 193, 192, 22, 83, 176, 3, 30, 6, 116, 163, 43, 53, 15, 101, 3, 94, 177, 181, 45, 64, 68, 231, 63, 243, 28, 255, 54, 93, 210, 0, 0, 156, 146, 57, 31, 155, 228, 132, 2, 6, 240, 195, 35, 7, 226, 156, 8, 131, 43, 217, 39, 55, 211, 189, 43, 190, 56, 137, 4, 254, 100, 221, 63, 58, 122, 0, 0, 19, 124, 29, 39, 98, 68, 249, 23, 133, 163, 255, 32, 254, 125, 173, 6, 100, 5, 200, 42, 94, 106, 250, 1, 95, 37, 167, 20, 250, 80, 76, 13, 129, 69, 0, 0, 207, 99, 255, 58, 84, 241, 226, 24, 153, 107, 217, 43, 80, 149, 1, 8, 112, 201, 105, 29, 223, 197, 67, 61, 87, 139, 173, 57, 37, 5, 59, 22, 88, 159, 0, 0, 102, 243, 131, 45, 52, 232, 104, 43, 140, 88, 40, 47, 120, 59, 115, 54, 12, 122, 201, 29, 48, 47, 12, 61, 174, 233, 226, 63, 196, 109, 125, 39, 74, 188, 0, 0, 193, 51, 31, 24, 153, 89, 99, 29, 109, 177, 71, 37, 254, 126, 42, 58, 166, 202, 152, 55, 210, 183, 222, 36, 131, 99, 192, 5, 158, 155, 114, 32, 58, 13, 0, 0, 60, 190, 18, 55, 203, 184, 168, 1, 107, 166, 70, 33, 182, 99, 124, 37, 114, 52, 21, 0, 172, 110, 151, 28, 60, 141, 55, 27, 204, 100, 39, 13, 215, 57, 0, 0, 92, 246, 111, 28, 208, 103, 192, 48, 76, 100, 65, 10, 123, 233, 189, 23, 239, 232, 18, 40, 25, 83, 213, 9, 177, 127, 191, 51, 187, 213, 211, 38, 146, 143, 0, 0, 43, 242, 119, 31, 243, 62, 185, 42, 53, 224, 130, 15, 101, 142, 92, 38, 198, 38, 175, 21, 166, 176, 53, 7, 229, 9, 221, 1, 247, 253, 133, 41, 203, 240, 0, 0, 60, 160, 9, 25, 29, 139, 35, 63, 97, 86, 9, 10, 164, 31, 99, 60, 4, 64, 208, 22, 148, 13, 155, 12, 239, 137, 249, 29, 254, 196, 208, 42, 37, 26, 0, 0, 18, 156, 80, 6, 83, 115, 179, 34, 101, 71, 31, 61, 214, 136, 255, 26, 141, 237, 104, 50, 97, 163, 195, 5, 29, 50, 77, 21, 200, 118, 174, 30, 29, 56, 0, 0, 2, 97, 180, 46, 56, 170, 144, 17, 117, 175, 110, 14, 27, 22, 10, 22, 32, 231, 129, 37, 233, 92, 145, 52, 181, 158, 218, 35, 246, 223, 214, 42, 122, 164, 0, 0, 85, 233, 79, 56, 88, 211, 206, 54, 72, 206, 59, 6, 104, 169, 85, 38, 246, 83, 138, 12, 165, 249, 220, 14, 121, 100, 126, 56, 234, 25, 21, 60, 3, 167, 0, 0, 189, 68, 19, 22, 239, 187, 172, 9, 250, 119, 114, 25, 113, 138, 133, 39, 83, 155, 25, 25, 172, 181, 228, 41, 14, 220, 122, 4, 172, 104, 77, 62, 0, 213, 0, 0, 88, 206, 234, 6, 176, 149, 101, 18, 211, 17, 50, 47, 232, 88, 145, 31, 27, 63, 160, 19, 193, 53, 180, 26, 108, 116, 13, 21, 181, 106, 241, 44, 198, 115, 0, 0, 78, 101, 248, 42, 92, 164, 194, 5, 23, 41, 141, 59, 110, 227, 161, 26, 170, 198, 145, 45, 217, 68, 38, 36, 186, 65, 247, 36, 206, 28, 41, 45, 47, 58, 0, 0, 94, 29, 24, 0, 252, 34, 206, 18, 5, 242, 170, 21, 110, 234, 108, 28, 222, 184, 221, 14, 112, 232, 52, 0, 29, 218, 127, 20, 27, 212, 249, 60, 39, 198, 0, 0, 109, 136, 159, 54, 152, 2, 228, 9, 57, 44, 190, 28, 82, 1, 172, 61, 142, 214, 247, 33, 226, 4, 88, 26, 45, 59, 166, 2, 145, 199, 117, 39, 143, 215, 0, 0, 22, 139, 130, 55, 126, 54, 138, 19, 243, 71, 72, 10, 202, 99, 229, 17, 160, 83, 222, 6, 188, 41, 208, 23, 162, 63, 35, 61, 183, 131, 175, 62, 136, 187, 0, 0, 247, 93, 234, 10, 136, 206, 81, 20, 156, 150, 30, 58, 56, 93, 160, 18, 236, 99, 145, 21, 4, 88, 22, 55, 69, 211, 141, 30, 61, 193, 172, 29, 54, 183, 0, 0, 170, 76, 50, 37, 63, 204, 42, 21, 57, 42, 71, 41, 194, 120, 217, 18, 105, 46, 163, 18, 81, 210, 49, 54, 35, 13, 188, 24, 10, 254, 94, 42, 40, 140, 0, 0, 130, 148, 239, 11, 207, 113, 199, 57, 89, 148, 203, 17, 17, 60, 225, 57, 122, 235, 192, 60, 125, 204, 183, 63, 120, 51, 25, 5, 204, 232, 24, 1, 163, 64, 0, 0, 64, 221, 84, 7, 85, 28, 250, 24, 248, 108, 70, 3, 127, 140, 137, 16, 162, 233, 246, 50, 53, 127, 16, 18, 91, 244, 252, 13, 176, 12, 28, 9, 41, 151, 0, 0, 67, 97, 163, 42, 188, 36, 45, 33, 147, 244, 202, 26, 149, 20, 186, 54, 144, 54, 223, 20, 47, 119, 29, 23, 209, 220, 161, 62, 151, 9, 145, 40, 209, 145, 0, 0, 255, 167, 44, 12, 174, 11, 182, 48, 163, 33, 240, 29, 101, 23, 217, 0, 24, 175, 39, 47, 104, 181, 70, 30, 80, 224, 150, 39, 2, 214, 229, 31, 99, 137, 0, 0, 104, 62, 73, 48, 133, 87, 80, 59, 123, 171, 46, 36, 227, 168, 241, 30, 248, 137, 116, 53, 80, 197, 115, 46, 87, 77, 66, 8, 34, 35, 73, 56, 31, 45, 0, 0, 127, 221, 168, 12, 232, 88, 27, 6, 166, 129, 19, 42, 213, 0, 202, 49, 27, 66, 87, 19, 245, 128, 118, 50, 253, 146, 224, 37, 248, 198, 57, 14, 129, 48, 0, 0, 242, 199, 146, 10, 30, 201, 87, 16, 94, 145, 173, 52, 144, 145, 149, 5, 200, 24, 142, 0, 69, 23, 177, 39, 227, 37, 201, 15, 10, 162, 180, 56, 209, 40, 0, 0, 177, 63, 106, 6, 162, 21, 115, 3, 108, 32, 46, 25, 6, 74, 2, 48, 110, 47, 134, 54, 22, 50, 212, 21, 30, 93, 182, 30, 155, 10, 58, 49, 95, 87, 0, 0, 173, 85, 38, 16, 42, 164, 227, 38, 240, 242, 58, 42, 241, 92, 237, 12, 237, 218, 135, 14, 94, 10, 111, 7, 103, 45, 202, 47, 169, 16, 228, 54, 110, 111, 0, 0, 223, 23, 1, 57, 145, 162, 218, 6, 146, 2, 1, 34, 243, 238, 78, 9, 218, 143, 42, 42, 123, 224, 155, 60, 39, 162, 183, 42, 147, 173, 13, 36, 236, 165, 0, 0, 254, 98, 100, 56, 207, 4, 74, 32, 61, 54, 74, 33, 21, 124, 24, 33, 28, 247, 160, 31, 180, 14, 230, 37, 197, 0, 4, 20, 176, 151, 152, 49, 157, 183, 0, 0, 18, 215, 42, 23, 112, 93, 62, 44, 144, 114, 4, 33, 55, 44, 99, 14, 90, 185, 73, 35, 81, 216, 229, 57, 157, 148, 176, 16, 204, 68, 250, 55, 83, 161, 0, 0, 210, 253, 72, 13, 78, 217, 151, 34, 156, 50, 11, 47, 22, 202, 79, 1, 189, 154, 184, 49, 199, 87, 99, 12, 72, 252, 178, 5, 236, 79, 16, 54, 148, 253, 0, 0, 58, 91, 207, 17, 4, 220, 48, 12, 16, 120, 90, 27, 239, 160, 206, 16, 196, 36, 200, 45, 35, 66, 211, 48, 53, 89, 97, 20, 222, 171, 177, 6, 84, 154, 0, 0, 228, 74, 164, 54, 124, 93, 213, 15, 214, 82, 234, 33, 148, 184, 63, 18, 85, 95, 71, 15, 162, 205, 107, 56, 175, 124, 171, 6, 196, 114, 48, 18, 97, 182, 0, 0, 224, 202, 172, 31, 68, 232, 18, 35, 116, 51, 187, 36, 22, 67, 205, 34, 60, 210, 31, 7, 60, 57, 83, 54, 29, 140, 122, 18, 229, 132, 153, 37, 234, 8, 0, 0, 69, 185, 98, 14, 140, 210, 188, 22, 149, 142, 15, 15, 167, 239, 224, 45, 53, 215, 197, 21, 238, 51, 240, 57, 36, 46, 120, 34, 59, 242, 174, 62, 14, 98, 0, 0, 94, 111, 160, 38, 101, 45, 144, 6, 2, 55, 8, 42, 91, 148, 100, 16, 163, 22, 183, 35, 73, 8, 53, 44, 55, 172, 83, 2, 133, 250, 62, 9, 59, 56, 0, 0, 114, 231, 198, 19, 27, 30, 125, 34, 64, 176, 194, 56, 46, 157, 171, 61, 232, 25, 90, 42, 83, 181, 89, 61, 76, 4, 162, 27, 59, 177, 26, 28, 207, 84, 0, 0, 54, 161, 56, 6, 117, 112, 93, 30, 92, 25, 56, 40, 205, 56, 71, 3, 43, 12, 121, 13, 216, 26, 103, 57, 137, 215, 214, 46, 128, 15, 180, 12, 132, 230, 0, 0, 132, 37, 108, 12, 66, 96, 244, 43, 106, 51, 87, 51, 246, 250, 120, 2, 46, 71, 230, 1, 232, 192, 156, 10, 77, 98, 166, 53, 56, 230, 4, 57, 91, 202, 0, 0, 12, 193, 232, 22, 16, 241, 161, 51, 7, 104, 189, 17, 206, 23, 166, 28, 180, 127, 110, 48, 156, 179, 247, 62, 238, 160, 194, 37, 191, 120, 86, 53, 93, 57, 0, 0, 142, 99, 254, 5, 76, 182, 245, 48, 203, 34, 105, 6, 55, 1, 39, 36, 76, 39, 78, 58, 191, 30, 250, 4, 4, 93, 172, 18, 22, 45, 53, 55, 98, 253, 0, 0, 239, 20, 108, 13, 200, 54, 153, 5, 245, 200, 147, 47, 65, 29, 63, 22, 8, 128, 100, 34, 187, 111, 181, 59, 246, 185, 220, 37, 84, 13, 183, 18, 81, 122, 0, 0, 19, 189, 63, 11, 28, 134, 79, 43, 247, 36, 110, 42, 202, 189, 171, 47, 41, 55, 92, 15, 50, 229, 194, 31, 137, 142, 77, 46, 84, 180, 127, 52, 237, 86, 0, 0, 235, 101, 109, 15, 65, 143, 81, 42, 36, 21, 2, 4, 213, 29, 68, 38, 90, 35, 143, 16, 210, 239, 188, 35, 234, 216, 144, 29, 201, 16, 86, 63, 225, 30, 0, 0, 28, 148, 34, 29, 73, 174, 13, 56, 17, 43, 88, 35, 97, 58, 189, 12, 202, 250, 252, 2, 61, 241, 231, 42, 207, 193, 115, 44, 117, 111, 36, 10, 105, 187, 0, 0, 68, 203, 54, 14, 188, 67, 101, 60, 145, 1, 162, 28, 35, 219, 162, 31, 97, 125, 53, 3, 98, 67, 63, 22, 192, 139, 170, 58, 227, 52, 141, 21, 81, 21, 0, 0, 104, 90, 73, 31, 148, 209, 107, 10, 83, 30, 12, 2, 124, 93, 220, 48, 168, 93, 32, 35, 209, 194, 143, 3, 55, 94, 33, 53, 85, 213, 241, 63, 79, 171, 0, 0, 204, 186, 39, 52, 65, 24, 229, 7, 21, 46, 214, 18, 55, 89, 204, 28, 158, 170, 196, 13, 86, 194, 58, 22, 99, 19, 32, 53, 175, 17, 25, 47, 198, 59, 0, 0, 166, 253, 214, 42, 87, 255, 12, 19, 113, 180, 190, 40, 72, 105, 221, 6, 215, 43, 192, 22, 155, 136, 187, 24, 219, 92, 48, 44, 93, 28, 48, 23, 48, 142, 0, 0, 103, 230, 9, 106, 133, 174, 103, 187, 114, 243, 110, 60, 58, 245, 79, 165, 127, 82, 14, 81, 140, 104, 5, 155, 171, 217, 131, 31, 25, 205, 224, 91, 152, 47, 138, 66, 145, 68, 55, 113, 207, 251, 192, 181, 165, 219, 181, 233, 91, 194, 86, 57, 241, 17, 241, 89, 164, 130, 63, 146, 213, 94, 28, 171, 152, 170, 7, 216, 1, 91, 131, 18, 190, 133, 49, 36, 195, 125, 12, 85, 116, 93, 190, 114, 254, 177, 222, 128, 167, 6, 220, 155, 116, 241, 155, 193, 193, 105, 155, 228, 134, 71, 190, 239, 198, 157, 193, 15, 204, 161, 12, 36, 111, 44, 233, 45, 170, 132, 116, 74, 220, 169, 176, 92, 218, 136, 249, 118, 82, 81, 62, 152, 109, 198, 49, 168, 200, 39, 3, 176, 199, 127, 89, 191, 243, 11, 224, 198, 71, 145, 167, 213, 81, 99, 202, 6, 103, 41, 41, 20, 133, 10, 183, 39, 56, 33, 27, 46, 252, 109, 44, 77, 19, 13, 56, 83, 84, 115, 10, 101, 187, 10, 106, 118, 46, 201, 194, 129, 133, 44, 114, 146, 161, 232, 191, 162, 75, 102, 26, 168, 112, 139, 75, 194, 163, 81, 108, 199, 25, 232, 146, 209, 36, 6, 153, 214, 133, 53, 14, 244, 112, 160, 106, 16, 22, 193, 164, 25, 8, 108, 55, 30, 76, 119, 72, 39, 181, 188, 176, 52, 179, 12, 28, 57, 74, 170, 216, 78, 79, 202, 156, 91, 243, 111, 46, 104, 238, 130, 143, 116, 111, 99, 165, 120, 20, 120, 200, 132, 8, 2, 199, 140, 250, 255, 190, 144, 235, 108, 80, 164, 247, 163, 249, 190, 242, 120, 113, 198, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 244, 153, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 148, 0, 0, 99, 111, 110, 100, 32, 61, 61, 32, 49, 32, 124, 124, 32, 99, 111, 110, 100, 32, 61, 61, 32, 48, 0, 46, 46, 47, 98, 105, 103, 110, 117, 109, 46, 99, 0, 98, 110, 95, 99, 109, 111, 118, 0, 99, 111, 101, 102, 32, 60, 32, 48, 120, 56, 48, 48, 48, 48, 48, 48, 48, 117, 0, 98, 110, 95, 109, 117, 108, 116, 105, 112, 108, 121, 95, 114, 101, 100, 117, 99, 101, 95, 115, 116, 101, 112, 0, 114, 101, 115, 91, 105, 32, 43, 32, 49, 93, 32, 61, 61, 32, 48, 0, 98, 110, 95, 109, 117, 108, 116, 105, 112, 108, 121, 95, 114, 101, 100, 117, 99, 101, 0, 111, 100, 100, 45, 62, 97, 91, 48, 93, 32, 38, 32, 49, 0, 98, 110, 95, 105, 110, 118, 101, 114, 115, 101, 0, 111, 100, 100, 45, 62, 97, 91, 56, 93, 32, 38, 32, 49, 0, 101, 118, 101, 110, 45, 62, 97, 91, 48, 93, 32, 38, 32, 49, 0, 40, 101, 118, 101, 110, 45, 62, 97, 91, 56, 93, 32, 38, 32, 49, 41, 32, 61, 61, 32, 48, 0, 40, 101, 118, 101, 110, 45, 62, 97, 91, 48, 93, 32, 38, 32, 49, 41, 32, 61, 61, 32, 48, 0, 112, 112, 91, 48, 93, 32, 38, 32, 49, 0, 40, 116, 101, 109, 112, 32, 38, 32, 48, 120, 102, 102, 102, 102, 102, 102, 102, 102, 41, 32, 61, 61, 32, 48, 0, 40, 40, 117, 115, 46, 97, 91, 56, 93, 32, 43, 32, 112, 112, 91, 48, 93, 32, 42, 32, 102, 97, 99, 116, 111, 114, 41, 32, 38, 32, 109, 97, 115, 107, 41, 32, 61, 61, 32, 48, 0, 98, 32, 60, 61, 32, 112, 114, 105, 109, 101, 45, 62, 118, 97, 108, 91, 48, 93, 0, 98, 110, 95, 115, 117, 98, 105, 0, 97, 45, 62, 118, 97, 108, 91, 56, 93, 32, 60, 32, 48, 120, 50, 48, 48, 48, 48, 0, 46, 46, 47, 101, 99, 100, 115, 97, 46, 99, 0, 99, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 95, 110, 101, 103, 97, 116, 101, 0, 45, 51, 32, 60, 61, 32, 97, 32, 38, 38, 32, 97, 32, 60, 61, 32, 48, 0, 112, 111, 105, 110, 116, 95, 106, 97, 99, 111, 98, 105, 97, 110, 95, 97, 100, 100, 0, 98, 110, 95, 105, 115, 95, 108, 101, 115, 115, 40, 107, 44, 32, 38, 99, 117, 114, 118, 101, 45, 62, 111, 114, 100, 101, 114, 41, 0, 40, 97, 46, 118, 97, 108, 91, 48, 93, 32, 38, 32, 49, 41, 32, 33, 61, 32, 48, 0, 115, 99, 97, 108, 97, 114, 95, 109, 117, 108, 116, 105, 112, 108, 121, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 100, 101, 118, 47, 117, 114, 97, 110, 100, 111, 109, 0, 114, 0, 108, 101, 110, 95, 114, 101, 97, 100, 32, 61, 61, 32, 108, 101, 110, 0, 46, 46, 47, 114, 97, 110, 100, 46, 99, 0, 114, 97, 110, 100, 111, 109, 51, 50, 0, 114, 119, 97, 0], "i8", 4, t.L + 30720);var cb = v;v += 16;e._i64Subtract = db;e._memset = eb;function fb(a, b) {
  J.push(function () {
    t.t("vi", a, [b]);
  });fb.level = J.length;
}e._bitshift64Lshr = gb;e._bitshift64Shl = hb;
var K = { s: 1, m: 2, Jc: 3, Gb: 4, p: 5, la: 6, Za: 7, dc: 8, J: 9, nb: 10, ha: 11, Tc: 11, Ea: 12, R: 13, zb: 14, pc: 15, S: 16, ia: 17, Uc: 18, U: 19, ja: 20, B: 21, g: 22, Zb: 23, Da: 24, C: 25, Qc: 26, Ab: 27, lc: 28, K: 29, Gc: 30, Sb: 31, zc: 32, wb: 33, Dc: 34, hc: 42, Db: 43, ob: 44, Jb: 45, Kb: 46, Lb: 47, Rb: 48, Rc: 49, bc: 50, Ib: 51, tb: 35, ec: 37, fb: 52, ib: 53, Vc: 54, $b: 55, jb: 56, kb: 57, ub: 35, lb: 59, nc: 60, cc: 61, Nc: 62, mc: 63, ic: 64, jc: 65, Fc: 66, fc: 67, bb: 68, Kc: 69, pb: 70, Ac: 71, Ub: 72, xb: 73, hb: 74, uc: 76, gb: 77, Ec: 78, Mb: 79, Nb: 80, Qb: 81, Pb: 82, Ob: 83, oc: 38, ka: 39, Vb: 36, T: 40, vc: 95, yc: 96, sb: 104, ac: 105,
  cb: 97, Cc: 91, sc: 88, kc: 92, Hc: 108, rb: 111, $a: 98, qb: 103, Yb: 101, Wb: 100, Oc: 110, Bb: 112, Cb: 113, Fb: 115, eb: 114, vb: 89, Tb: 90, Bc: 93, Ic: 94, ab: 99, Xb: 102, Hb: 106, qc: 107, Pc: 109, Sc: 87, yb: 122, Lc: 116, tc: 95, gc: 123, Eb: 84, wc: 75, mb: 125, rc: 131, xc: 130, Mc: 86 },
    ib = { 0: "Success", 1: "Not super-user", 2: "No such file or directory", 3: "No such process", 4: "Interrupted system call", 5: "I/O error", 6: "No such device or address", 7: "Arg list too long", 8: "Exec format error", 9: "Bad file number", 10: "No children", 11: "No more processes", 12: "Not enough core",
  13: "Permission denied", 14: "Bad address", 15: "Block device required", 16: "Mount device busy", 17: "File exists", 18: "Cross-device link", 19: "No such device", 20: "Not a directory", 21: "Is a directory", 22: "Invalid argument", 23: "Too many open files in system", 24: "Too many open files", 25: "Not a typewriter", 26: "Text file busy", 27: "File too large", 28: "No space left on device", 29: "Illegal seek", 30: "Read only file system", 31: "Too many links", 32: "Broken pipe", 33: "Math arg out of domain of func", 34: "Math result not representable",
  35: "File locking deadlock error", 36: "File or path name too long", 37: "No record locks available", 38: "Function not implemented", 39: "Directory not empty", 40: "Too many symbolic links", 42: "No message of desired type", 43: "Identifier removed", 44: "Channel number out of range", 45: "Level 2 not synchronized", 46: "Level 3 halted", 47: "Level 3 reset", 48: "Link number out of range", 49: "Protocol driver not attached", 50: "No CSI structure available", 51: "Level 2 halted", 52: "Invalid exchange", 53: "Invalid request descriptor",
  54: "Exchange full", 55: "No anode", 56: "Invalid request code", 57: "Invalid slot", 59: "Bad font file fmt", 60: "Device not a stream", 61: "No data (for no delay io)", 62: "Timer expired", 63: "Out of streams resources", 64: "Machine is not on the network", 65: "Package not installed", 66: "The object is remote", 67: "The link has been severed", 68: "Advertise error", 69: "Srmount error", 70: "Communication error on send", 71: "Protocol error", 72: "Multihop attempted", 73: "Cross mount point (not really error)", 74: "Trying to read unreadable message",
  75: "Value too large for defined data type", 76: "Given log. name not unique", 77: "f.d. invalid for this operation", 78: "Remote address changed", 79: "Can   access a needed shared lib", 80: "Accessing a corrupted shared lib", 81: ".lib section in a.out corrupted", 82: "Attempting to link in too many libs", 83: "Attempting to exec a shared library", 84: "Illegal byte sequence", 86: "Streams pipe error", 87: "Too many users", 88: "Socket operation on non-socket", 89: "Destination address required", 90: "Message too long", 91: "Protocol wrong type for socket",
  92: "Protocol not available", 93: "Unknown protocol", 94: "Socket type not supported", 95: "Not supported", 96: "Protocol family not supported", 97: "Address family not supported by protocol family", 98: "Address already in use", 99: "Address not available", 100: "Network interface is not configured", 101: "Network is unreachable", 102: "Connection reset by network", 103: "Connection aborted", 104: "Connection reset by peer", 105: "No buffer space available", 106: "Socket is already connected", 107: "Socket is not connected", 108: "Can't send after socket shutdown",
  109: "Too many references", 110: "Connection timed out", 111: "Connection refused", 112: "Host is down", 113: "Host is unreachable", 114: "Socket already connected", 115: "Connection already in progress", 116: "Stale file handle", 122: "Quota exceeded", 123: "No medium (in tape drive)", 125: "Operation canceled", 130: "Previous owner died", 131: "State not recoverable" };function jb(a) {
  e.___errno_location && (w[e.___errno_location() >> 2] = a);return a;
}
function kb(a, b) {
  for (var c = 0, d = a.length - 1; 0 <= d; d--) {
    var f = a[d];"." === f ? a.splice(d, 1) : ".." === f ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
  }if (b) for (; c--; c) {
    a.unshift("..");
  }return a;
}function lb(a) {
  var b = "/" === a.charAt(0),
      c = "/" === a.substr(-1);(a = kb(a.split("/").filter(function (a) {
    return !!a;
  }), !b).join("/")) || b || (a = ".");a && c && (a += "/");return (b ? "/" : "") + a;
}
function mb(a) {
  var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);a = b[0];b = b[1];if (!a && !b) return ".";b && (b = b.substr(0, b.length - 1));return a + b;
}function nb(a) {
  if ("/" === a) return "/";var b = a.lastIndexOf("/");return -1 === b ? a : a.substr(b + 1);
}function pb() {
  var a = Array.prototype.slice.call(arguments, 0);return lb(a.join("/"));
}function L(a, b) {
  return lb(a + "/" + b);
}
function qb() {
  for (var a = "", b = !1, c = arguments.length - 1; -1 <= c && !b; c--) {
    b = 0 <= c ? arguments[c] : "/";if ("string" !== typeof b) throw new TypeError("Arguments to path.resolve must be strings");if (!b) return "";a = b + "/" + a;b = "/" === b.charAt(0);
  }a = kb(a.split("/").filter(function (a) {
    return !!a;
  }), !b).join("/");return (b ? "/" : "") + a || ".";
}var rb = [];function sb(a, b) {
  rb[a] = { input: [], output: [], v: b };tb(a, ub);
}
var ub = { open: function open(a) {
    var b = rb[a.c.rdev];if (!b) throw new M(K.U);a.tty = b;a.seekable = !1;
  }, close: function close(a) {
    a.tty.v.flush(a.tty);
  }, flush: function flush(a) {
    a.tty.v.flush(a.tty);
  }, read: function read(a, b, c, d) {
    if (!a.tty || !a.tty.v.wa) throw new M(K.la);for (var f = 0, g = 0; g < d; g++) {
      var h;try {
        h = a.tty.v.wa(a.tty);
      } catch (n) {
        throw new M(K.p);
      }if (void 0 === h && 0 === f) throw new M(K.ha);if (null === h || void 0 === h) break;f++;b[c + g] = h;
    }f && (a.c.timestamp = Date.now());return f;
  }, write: function write(a, b, c, d) {
    if (!a.tty || !a.tty.v.da) throw new M(K.la);
    for (var f = 0; f < d; f++) {
      try {
        a.tty.v.da(a.tty, b[c + f]);
      } catch (g) {
        throw new M(K.p);
      }
    }d && (a.c.timestamp = Date.now());return f;
  } },
    vb = { wa: function wa(a) {
    if (!a.input.length) {
      var b = null;if (m) {
        var c = new Buffer(256),
            d = 0,
            f = process.stdin.fd;if ("win32" != process.platform) {
          var g = !1;try {
            f = fs.openSync("/dev/stdin", "r"), g = !0;
          } catch (h) {}
        }try {
          d = fs.readSync(f, c, 0, 256, null);
        } catch (n) {
          if (-1 != n.toString().indexOf("EOF")) d = 0;else throw n;
        }g && fs.closeSync(f);0 < d ? b = c.slice(0, d).toString("utf-8") : b = null;
      } else "undefined" != typeof window && "function" == typeof window.prompt ? (b = window.prompt("Input: "), null !== b && (b += "\n")) : "function" == typeof readline && (b = readline(), null !== b && (b += "\n"));if (!b) return null;a.input = Xa(b, !0);
    }return a.input.shift();
  }, da: function da(a, b) {
    null === b || 10 === b ? (e.print(Ca(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
  }, flush: function flush(a) {
    a.output && 0 < a.output.length && (e.print(Ca(a.output, 0)), a.output = []);
  } },
    wb = { da: function da(a, b) {
    null === b || 10 === b ? (e.printErr(Ca(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
  }, flush: function flush(a) {
    a.output && 0 < a.output.length && (e.printErr(Ca(a.output, 0)), a.output = []);
  } },
    N = { k: null, i: function i() {
    return N.createNode(null, "/", 16895, 0);
  }, createNode: function createNode(a, b, c, d) {
    if (24576 === (c & 61440) || 4096 === (c & 61440)) throw new M(K.s);N.k || (N.k = { dir: { c: { l: N.d.l, h: N.d.h, lookup: N.d.lookup, F: N.d.F, rename: N.d.rename, unlink: N.d.unlink, rmdir: N.d.rmdir, readdir: N.d.readdir, symlink: N.d.symlink }, stream: { o: N.e.o } }, file: { c: { l: N.d.l, h: N.d.h }, stream: { o: N.e.o, read: N.e.read, write: N.e.write, na: N.e.na, Aa: N.e.Aa, Ca: N.e.Ca } }, link: { c: { l: N.d.l,
          h: N.d.h, readlink: N.d.readlink }, stream: {} }, pa: { c: { l: N.d.l, h: N.d.h }, stream: xb } });c = yb(a, b, c, d);P(c.mode) ? (c.d = N.k.dir.c, c.e = N.k.dir.stream, c.b = {}) : 32768 === (c.mode & 61440) ? (c.d = N.k.file.c, c.e = N.k.file.stream, c.f = 0, c.b = null) : 40960 === (c.mode & 61440) ? (c.d = N.k.link.c, c.e = N.k.link.stream) : 8192 === (c.mode & 61440) && (c.d = N.k.pa.c, c.e = N.k.pa.stream);c.timestamp = Date.now();a && (a.b[b] = c);return c;
  }, La: function La(a) {
    if (a.b && a.b.subarray) {
      for (var b = [], c = 0; c < a.f; ++c) {
        b.push(a.b[c]);
      }return b;
    }return a.b;
  }, hd: function hd(a) {
    return a.b ? a.b.subarray ? a.b.subarray(0, a.f) : new Uint8Array(a.b) : new Uint8Array();
  }, ra: function ra(a, b) {
    a.b && a.b.subarray && b > a.b.length && (a.b = N.La(a), a.f = a.b.length);if (!a.b || a.b.subarray) {
      var c = a.b ? a.b.length : 0;c >= b || (b = Math.max(b, c * (1048576 > c ? 2 : 1.125) | 0), 0 != c && (b = Math.max(b, 256)), c = a.b, a.b = new Uint8Array(b), 0 < a.f && a.b.set(c.subarray(0, a.f), 0));
    } else for (!a.b && 0 < b && (a.b = []); a.b.length < b;) {
      a.b.push(0);
    }
  }, Ta: function Ta(a, b) {
    if (a.f != b) if (0 == b) a.b = null, a.f = 0;else {
      if (!a.b || a.b.subarray) {
        var c = a.b;a.b = new Uint8Array(new ArrayBuffer(b));
        c && a.b.set(c.subarray(0, Math.min(b, a.f)));
      } else if (a.b || (a.b = []), a.b.length > b) a.b.length = b;else for (; a.b.length < b;) {
        a.b.push(0);
      }a.f = b;
    }
  }, d: { l: function l(a) {
      var b = {};b.dev = 8192 === (a.mode & 61440) ? a.id : 1;b.ino = a.id;b.mode = a.mode;b.nlink = 1;b.uid = 0;b.gid = 0;b.rdev = a.rdev;P(a.mode) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.f : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;b.atime = new Date(a.timestamp);b.mtime = new Date(a.timestamp);b.ctime = new Date(a.timestamp);b.q = 4096;b.blocks = Math.ceil(b.size / b.q);return b;
    },
    h: function h(a, b) {
      void 0 !== b.mode && (a.mode = b.mode);void 0 !== b.timestamp && (a.timestamp = b.timestamp);void 0 !== b.size && N.Ta(a, b.size);
    }, lookup: function lookup() {
      throw zb[K.m];
    }, F: function F(a, b, c, d) {
      return N.createNode(a, b, c, d);
    }, rename: function rename(a, b, c) {
      if (P(a.mode)) {
        var d;try {
          d = Ab(b, c);
        } catch (f) {}if (d) for (var g in d.b) {
          throw new M(K.ka);
        }
      }delete a.parent.b[a.name];a.name = c;b.b[c] = a;a.parent = b;
    }, unlink: function unlink(a, b) {
      delete a.b[b];
    }, rmdir: function rmdir(a, b) {
      var c = Ab(a, b),
          d;for (d in c.b) {
        throw new M(K.ka);
      }delete a.b[b];
    }, readdir: function readdir(a) {
      var b = [".", ".."],
          c;for (c in a.b) {
        a.b.hasOwnProperty(c) && b.push(c);
      }return b;
    }, symlink: function symlink(a, b, c) {
      a = N.createNode(a, b, 41471, 0);a.link = c;return a;
    }, readlink: function readlink(a) {
      if (40960 !== (a.mode & 61440)) throw new M(K.g);return a.link;
    } }, e: { read: function read(a, b, c, d, f) {
      var g = a.c.b;if (f >= a.c.f) return 0;a = Math.min(a.c.f - f, d);assert(0 <= a);if (8 < a && g.subarray) b.set(g.subarray(f, f + a), c);else for (d = 0; d < a; d++) {
        b[c + d] = g[f + d];
      }return a;
    }, write: function write(a, b, c, d, f, g) {
      if (!d) return 0;a = a.c;a.timestamp = Date.now();if (b.subarray && (!a.b || a.b.subarray)) {
        if (g) return a.b = b.subarray(c, c + d), a.f = d;if (0 === a.f && 0 === f) return a.b = new Uint8Array(b.subarray(c, c + d)), a.f = d;if (f + d <= a.f) return a.b.set(b.subarray(c, c + d), f), d;
      }N.ra(a, f + d);if (a.b.subarray && b.subarray) a.b.set(b.subarray(c, c + d), f);else for (g = 0; g < d; g++) {
        a.b[f + g] = b[c + g];
      }a.f = Math.max(a.f, f + d);return d;
    }, o: function o(a, b, c) {
      1 === c ? b += a.position : 2 === c && 32768 === (a.c.mode & 61440) && (b += a.c.f);if (0 > b) throw new M(K.g);return b;
    }, na: function na(a, b, c) {
      N.ra(a.c, b + c);a.c.f = Math.max(a.c.f, b + c);
    }, Aa: function Aa(a, b, c, d, f, g, h) {
      if (32768 !== (a.c.mode & 61440)) throw new M(K.U);c = a.c.b;if (h & 2 || c.buffer !== b && c.buffer !== b.buffer) {
        if (0 < f || f + d < a.c.f) c.subarray ? c = c.subarray(f, f + d) : c = Array.prototype.slice.call(c, f, f + d);a = !0;d = E(d);if (!d) throw new M(K.Ea);b.set(c, d);
      } else a = !1, d = c.byteOffset;return { sd: d, Yc: a };
    }, Ca: function Ca(a, b, c, d, f) {
      if (32768 !== (a.c.mode & 61440)) throw new M(K.U);if (f & 2) return 0;N.e.write(a, b, 0, d, c, !1);return 0;
    } } },
    Q = { O: !1, Xa: function Xa() {
    Q.O = !!process.platform.match(/^win/);
  }, i: function i(a) {
    assert(m);return Q.createNode(null, "/", Q.ua(a.aa.root), 0);
  }, createNode: function createNode(a, b, c) {
    if (!P(c) && 32768 !== (c & 61440) && 40960 !== (c & 61440)) throw new M(K.g);a = yb(a, b, c);a.d = Q.d;a.e = Q.e;return a;
  }, ua: function ua(a) {
    var b;try {
      b = fs.lstatSync(a), Q.O && (b.mode = b.mode | (b.mode & 146) >> 1);
    } catch (c) {
      if (!c.code) throw c;throw new M(K[c.code]);
    }return b.mode;
  }, j: function j(a) {
    for (var b = []; a.parent !== a;) {
      b.push(a.name), a = a.parent;
    }b.push(a.i.aa.root);b.reverse();return pb.apply(null, b);
  }, sa: { 0: "r", 1: "r+", 2: "r+", 64: "r", 65: "r+", 66: "r+", 129: "rx+", 193: "rx+", 514: "w+", 577: "w",
    578: "w+", 705: "wx", 706: "wx+", 1024: "a", 1025: "a", 1026: "a+", 1089: "a", 1090: "a+", 1153: "ax", 1154: "ax+", 1217: "ax", 1218: "ax+", 4096: "rs", 4098: "rs+" }, Ka: function Ka(a) {
    a &= -2099201;a &= -32769;a &= -524289;if (a in Q.sa) return Q.sa[a];throw new M(K.g);
  }, d: { l: function l(a) {
      a = Q.j(a);var b;try {
        b = fs.lstatSync(a);
      } catch (c) {
        if (!c.code) throw c;throw new M(K[c.code]);
      }Q.O && !b.q && (b.q = 4096);Q.O && !b.blocks && (b.blocks = (b.size + b.q - 1) / b.q | 0);return { dev: b.dev, ino: b.ino, mode: b.mode, nlink: b.nlink, uid: b.uid, gid: b.gid, rdev: b.rdev, size: b.size,
        atime: b.atime, mtime: b.mtime, ctime: b.ctime, q: b.q, blocks: b.blocks };
    }, h: function h(a, b) {
      var c = Q.j(a);try {
        void 0 !== b.mode && (fs.chmodSync(c, b.mode), a.mode = b.mode), void 0 !== b.size && fs.truncateSync(c, b.size);
      } catch (d) {
        if (!d.code) throw d;throw new M(K[d.code]);
      }
    }, lookup: function lookup(a, b) {
      var c = L(Q.j(a), b),
          c = Q.ua(c);return Q.createNode(a, b, c);
    }, F: function F(a, b, c, d) {
      a = Q.createNode(a, b, c, d);b = Q.j(a);try {
        P(a.mode) ? fs.mkdirSync(b, a.mode) : fs.writeFileSync(b, "", { mode: a.mode });
      } catch (f) {
        if (!f.code) throw f;throw new M(K[f.code]);
      }return a;
    }, rename: function rename(a, b, c) {
      a = Q.j(a);b = L(Q.j(b), c);try {
        fs.renameSync(a, b);
      } catch (d) {
        if (!d.code) throw d;throw new M(K[d.code]);
      }
    }, unlink: function unlink(a, b) {
      var c = L(Q.j(a), b);try {
        fs.unlinkSync(c);
      } catch (d) {
        if (!d.code) throw d;throw new M(K[d.code]);
      }
    }, rmdir: function rmdir(a, b) {
      var c = L(Q.j(a), b);try {
        fs.rmdirSync(c);
      } catch (d) {
        if (!d.code) throw d;throw new M(K[d.code]);
      }
    }, readdir: function readdir(a) {
      a = Q.j(a);try {
        return fs.readdirSync(a);
      } catch (b) {
        if (!b.code) throw b;throw new M(K[b.code]);
      }
    }, symlink: function symlink(a, b, c) {
      a = L(Q.j(a), b);try {
        fs.symlinkSync(c, a);
      } catch (d) {
        if (!d.code) throw d;throw new M(K[d.code]);
      }
    }, readlink: function readlink(a) {
      var b = Q.j(a);try {
        return b = fs.readlinkSync(b), b = Bb.relative(Bb.resolve(a.i.aa.root), b);
      } catch (c) {
        if (!c.code) throw c;throw new M(K[c.code]);
      }
    } }, e: { open: function open(a) {
      var b = Q.j(a.c);try {
        32768 === (a.c.mode & 61440) && (a.H = fs.openSync(b, Q.Ka(a.flags)));
      } catch (c) {
        if (!c.code) throw c;throw new M(K[c.code]);
      }
    }, close: function close(a) {
      try {
        32768 === (a.c.mode & 61440) && a.H && fs.closeSync(a.H);
      } catch (b) {
        if (!b.code) throw b;throw new M(K[b.code]);
      }
    }, read: function read(a, b, c, d, f) {
      if (0 === d) return 0;var g = new Buffer(d),
          h;try {
        h = fs.readSync(a.H, g, 0, d, f);
      } catch (n) {
        throw new M(K[n.code]);
      }if (0 < h) for (a = 0; a < h; a++) {
        b[c + a] = g[a];
      }return h;
    }, write: function write(a, b, c, d, f) {
      b = new Buffer(b.subarray(c, c + d));var g;try {
        g = fs.writeSync(a.H, b, 0, d, f);
      } catch (h) {
        throw new M(K[h.code]);
      }return g;
    }, o: function o(a, b, c) {
      if (1 === c) b += a.position;else if (2 === c && 32768 === (a.c.mode & 61440)) try {
        b += fs.fstatSync(a.H).size;
      } catch (d) {
        throw new M(K[d.code]);
      }if (0 > b) throw new M(K.g);return b;
    } } };v += 16;
v += 16;v += 16;var Cb = null,
    Db = [null],
    Eb = [],
    Fb = 1,
    R = null,
    Gb = !0,
    S = {},
    M = null,
    zb = {};
function T(a, b) {
  a = qb("/", a);b = b || {};if (!a) return { path: "", c: null };var c = { ta: !0, ea: 0 },
      d;for (d in c) {
    void 0 === b[d] && (b[d] = c[d]);
  }if (8 < b.ea) throw new M(K.T);var c = kb(a.split("/").filter(function (a) {
    return !!a;
  }), !1),
      f = Cb;d = "/";for (var g = 0; g < c.length; g++) {
    var h = g === c.length - 1;if (h && b.parent) break;f = Ab(f, c[g]);d = L(d, c[g]);f.G && (!h || h && b.ta) && (f = f.G.root);if (!h || b.X) for (h = 0; 40960 === (f.mode & 61440);) {
      if (f = Hb(d), d = qb(mb(d), f), f = T(d, { ea: b.ea }).c, 40 < h++) throw new M(K.T);
    }
  }return { path: d, c: f };
}
function U(a) {
  for (var b;;) {
    if (a === a.parent) return a = a.i.Ba, b ? "/" !== a[a.length - 1] ? a + "/" + b : a + b : a;b = b ? a.name + "/" + b : a.name;a = a.parent;
  }
}function Ib(a, b) {
  for (var c = 0, d = 0; d < b.length; d++) {
    c = (c << 5) - c + b.charCodeAt(d) | 0;
  }return (a + c >>> 0) % R.length;
}function Jb(a) {
  var b = Ib(a.parent.id, a.name);a.u = R[b];R[b] = a;
}function Ab(a, b) {
  var c;if (c = (c = Kb(a, "x")) ? c : a.d.lookup ? 0 : K.R) throw new M(c, a);for (c = R[Ib(a.id, b)]; c; c = c.u) {
    var d = c.name;if (c.parent.id === a.id && d === b) return c;
  }return a.d.lookup(a, b);
}
function yb(a, b, c, d) {
  Lb || (Lb = function Lb(a, b, c, d) {
    a || (a = this);this.parent = a;this.i = a.i;this.G = null;this.id = Fb++;this.name = b;this.mode = c;this.d = {};this.e = {};this.rdev = d;
  }, Lb.prototype = {}, Object.defineProperties(Lb.prototype, { read: { get: function get() {
        return 365 === (this.mode & 365);
      }, set: function set(a) {
        a ? this.mode |= 365 : this.mode &= -366;
      } }, write: { get: function get() {
        return 146 === (this.mode & 146);
      }, set: function set(a) {
        a ? this.mode |= 146 : this.mode &= -147;
      } }, Qa: { get: function get() {
        return P(this.mode);
      } }, Pa: { get: function get() {
        return 8192 === (this.mode & 61440);
      } } }));a = new Lb(a, b, c, d);Jb(a);return a;
}function P(a) {
  return 16384 === (a & 61440);
}var Mb = { r: 0, rs: 1052672, "r+": 2, w: 577, wx: 705, xw: 705, "w+": 578, "wx+": 706, "xw+": 706, a: 1089, ax: 1217, xa: 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 };function Nb(a) {
  var b = ["r", "w", "rw"][a & 3];a & 512 && (b += "w");return b;
}function Kb(a, b) {
  if (Gb) return 0;if (-1 === b.indexOf("r") || a.mode & 292) {
    if (-1 !== b.indexOf("w") && !(a.mode & 146) || -1 !== b.indexOf("x") && !(a.mode & 73)) return K.R;
  } else return K.R;return 0;
}
function Ob(a, b) {
  try {
    return Ab(a, b), K.ia;
  } catch (c) {}return Kb(a, "wx");
}function Pb(a) {
  var b;b = 4096;for (a = a || 0; a <= b; a++) {
    if (!Eb[a]) return a;
  }throw new M(K.Da);
}
function Qb(a, b) {
  Rb || (Rb = function Rb() {}, Rb.prototype = {}, Object.defineProperties(Rb.prototype, { object: { get: function get() {
        return this.c;
      }, set: function set(a) {
        this.c = a;
      } }, od: { get: function get() {
        return 1 !== (this.flags & 2097155);
      } }, pd: { get: function get() {
        return 0 !== (this.flags & 2097155);
      } }, nd: { get: function get() {
        return this.flags & 1024;
      } } }));var c = new Rb(),
      d;for (d in a) {
    c[d] = a[d];
  }a = c;c = Pb(b);a.fd = c;return Eb[c] = a;
}var xb = { open: function open(a) {
    a.e = Db[a.c.rdev].e;a.e.open && a.e.open(a);
  }, o: function o() {
    throw new M(K.K);
  } };
function tb(a, b) {
  Db[a] = { e: b };
}function Sb(a, b) {
  var c = "/" === b,
      d = !b,
      f;if (c && Cb) throw new M(K.S);if (!c && !d) {
    f = T(b, { ta: !1 });b = f.path;f = f.c;if (f.G) throw new M(K.S);if (!P(f.mode)) throw new M(K.ja);
  }var d = { type: a, aa: {}, Ba: b, Ra: [] },
      g = a.i(d);g.i = d;d.root = g;c ? Cb = g : f && (f.G = d, f.i && f.i.Ra.push(d));
}function Tb(a, b, c) {
  var d = T(a, { parent: !0 }).c;a = nb(a);if (!a || "." === a || ".." === a) throw new M(K.g);var f = Ob(d, a);if (f) throw new M(f);if (!d.d.F) throw new M(K.s);return d.d.F(d, a, b, c);
}
function Ub(a, b) {
  b = (void 0 !== b ? b : 438) & 4095;b |= 32768;return Tb(a, b, 0);
}function V(a, b) {
  b = (void 0 !== b ? b : 511) & 1023;b |= 16384;return Tb(a, b, 0);
}function Vb(a, b, c) {
  "undefined" === typeof c && (c = b, b = 438);return Tb(a, b | 8192, c);
}function Wb(a, b) {
  if (!qb(a)) throw new M(K.m);var c = T(b, { parent: !0 }).c;if (!c) throw new M(K.m);var d = nb(b),
      f = Ob(c, d);if (f) throw new M(f);if (!c.d.symlink) throw new M(K.s);return c.d.symlink(c, d, a);
}
function Hb(a) {
  a = T(a).c;if (!a) throw new M(K.m);if (!a.d.readlink) throw new M(K.g);return qb(U(a.parent), a.d.readlink(a));
}function Xb(a, b) {
  var c;"string" === typeof a ? c = T(a, { X: !0 }).c : c = a;if (!c.d.h) throw new M(K.s);c.d.h(c, { mode: b & 4095 | c.mode & -4096, timestamp: Date.now() });
}
function Yb(a, b, c, d) {
  if ("" === a) throw new M(K.m);if ("string" === typeof b) {
    var f = Mb[b];if ("undefined" === typeof f) throw Error("Unknown file open mode: " + b);b = f;
  }c = b & 64 ? ("undefined" === typeof c ? 438 : c) & 4095 | 32768 : 0;var g;if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a))) g = a;else {
    a = lb(a);try {
      g = T(a, { X: !(b & 131072) }).c;
    } catch (h) {}
  }f = !1;if (b & 64) if (g) {
    if (b & 128) throw new M(K.ia);
  } else g = Tb(a, c, 0), f = !0;if (!g) throw new M(K.m);8192 === (g.mode & 61440) && (b &= -513);if (b & 65536 && !P(g.mode)) throw new M(K.ja);if (!f && (c = g ? 40960 === (g.mode & 61440) ? K.T : P(g.mode) && ("r" !== Nb(b) || b & 512) ? K.B : Kb(g, Nb(b)) : K.m)) throw new M(c);if (b & 512) {
    c = g;var n;"string" === typeof c ? n = T(c, { X: !0 }).c : n = c;if (!n.d.h) throw new M(K.s);if (P(n.mode)) throw new M(K.B);if (32768 !== (n.mode & 61440)) throw new M(K.g);if (c = Kb(n, "w")) throw new M(c);n.d.h(n, { size: 0, timestamp: Date.now() });
  }b &= -641;d = Qb({ c: g, path: U(g), flags: b, seekable: !0, position: 0, e: g.e, Ya: [], error: !1 }, d);d.e.open && d.e.open(d);!e.logReadFiles || b & 1 || (Zb || (Zb = {}), a in Zb || (Zb[a] = 1, e.printErr("read file: " + a)));try {
    S.onOpenFile && (g = 0, 1 !== (b & 2097155) && (g |= 1), 0 !== (b & 2097155) && (g |= 2), S.onOpenFile(a, g));
  } catch (u) {
    console.log("FS.trackingDelegate['onOpenFile']('" + a + "', flags) threw an exception: " + u.message);
  }return d;
}function $b(a) {
  a.Z && (a.Z = null);try {
    a.e.close && a.e.close(a);
  } catch (b) {
    throw b;
  } finally {
    Eb[a.fd] = null;
  }
}function ac(a, b, c) {
  if (!a.seekable || !a.e.o) throw new M(K.K);a.position = a.e.o(a, b, c);a.Ya = [];
}
function bc(a, b, c, d, f, g) {
  if (0 > d || 0 > f) throw new M(K.g);if (0 === (a.flags & 2097155)) throw new M(K.J);if (P(a.c.mode)) throw new M(K.B);if (!a.e.write) throw new M(K.g);a.flags & 1024 && ac(a, 0, 2);var h = !0;if ("undefined" === typeof f) f = a.position, h = !1;else if (!a.seekable) throw new M(K.K);b = a.e.write(a, b, c, d, f, g);h || (a.position += b);try {
    if (a.path && S.onWriteToFile) S.onWriteToFile(a.path);
  } catch (n) {
    console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + n.message);
  }return b;
}
function cc() {
  M || (M = function M(a, b) {
    this.c = b;this.Va = function (a) {
      this.n = a;for (var b in K) {
        if (K[b] === a) {
          this.code = b;break;
        }
      }
    };this.Va(a);this.message = ib[a];
  }, M.prototype = Error(), M.prototype.constructor = M, [K.m].forEach(function (a) {
    zb[a] = new M(a);zb[a].stack = "<generic error, no stack>";
  }));
}var dc;function ec(a, b) {
  var c = 0;a && (c |= 365);b && (c |= 146);return c;
}function fc(a, b, c, d) {
  a = L("string" === typeof a ? a : U(a), b);return Ub(a, ec(c, d));
}
function gc(a, b, c, d, f, g) {
  a = b ? L("string" === typeof a ? a : U(a), b) : a;d = ec(d, f);f = Ub(a, d);if (c) {
    if ("string" === typeof c) {
      a = Array(c.length);b = 0;for (var h = c.length; b < h; ++b) {
        a[b] = c.charCodeAt(b);
      }c = a;
    }Xb(f, d | 146);a = Yb(f, "w");bc(a, c, 0, c.length, 0, g);$b(a);Xb(f, d);
  }return f;
}
function W(a, b, c, d) {
  a = L("string" === typeof a ? a : U(a), b);b = ec(!!c, !!d);W.za || (W.za = 64);var f = W.za++ << 8 | 0;tb(f, { open: function open(a) {
      a.seekable = !1;
    }, close: function close() {
      d && d.buffer && d.buffer.length && d(10);
    }, read: function read(a, b, d, f) {
      for (var r = 0, q = 0; q < f; q++) {
        var y;try {
          y = c();
        } catch (H) {
          throw new M(K.p);
        }if (void 0 === y && 0 === r) throw new M(K.ha);if (null === y || void 0 === y) break;r++;b[d + q] = y;
      }r && (a.c.timestamp = Date.now());return r;
    }, write: function write(a, b, c, f) {
      for (var r = 0; r < f; r++) {
        try {
          d(b[c + r]);
        } catch (q) {
          throw new M(K.p);
        }
      }f && (a.c.timestamp = Date.now());return r;
    } });return Vb(a, b, f);
}
function hc(a) {
  if (a.Pa || a.Qa || a.link || a.b) return !0;var b = !0;if ("undefined" !== typeof XMLHttpRequest) throw Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if (e.read) try {
    a.b = Xa(e.read(a.url), !0), a.f = a.b.length;
  } catch (c) {
    b = !1;
  } else throw Error("Cannot load without read() or XMLHttpRequest.");b || jb(K.p);return b;
}var ic = {},
    Lb,
    Rb,
    Zb,
    X = 0;
function Y() {
  X += 4;return w[X - 4 >> 2];
}function jc() {
  var a;a = Y();a = Eb[a];if (!a) throw new M(K.J);return a;
}e.___muldsi3 = kc;e.___muldi3 = lc;e._i64Add = mc;e._sbrk = nc;function oc() {
  oc.D || (oc.D = []);oc.D.push(t.Q());return oc.D.length - 1;
}e._llvm_bswap_i32 = pc;e._memcpy = qc;e._pthread_self = rc;cc();R = Array(4096);Sb(N, "/");V("/tmp");V("/home");V("/home/web_user");
(function () {
  V("/dev");tb(259, { read: function read() {
      return 0;
    }, write: function write(a, b, f, g) {
      return g;
    } });Vb("/dev/null", 259);sb(1280, vb);sb(1536, wb);Vb("/dev/tty", 1280);Vb("/dev/tty1", 1536);var a;if ("undefined" !== typeof crypto) {
    var b = new Uint8Array(1);a = function a() {
      crypto.getRandomValues(b);return b[0];
    };
  } else a = m ? function () {
    return __webpack_require__(75).randomBytes(1)[0];
  } : function () {
    return 256 * Math.random() | 0;
  };W("/dev", "random", a);W("/dev", "urandom", a);V("/dev/shm");V("/dev/shm/tmp");
})();V("/proc");V("/proc/self");V("/proc/self/fd");
Sb({ i: function i() {
    var a = yb("/proc/self", "fd", 16895, 73);a.d = { lookup: function lookup(a, c) {
        var d = Eb[+c];if (!d) throw new M(K.J);var f = { parent: null, i: { Ba: "fake" }, d: { readlink: function readlink() {
              return d.path;
            } } };return f.parent = f;
      } };return a;
  } }, "/proc/self/fd");
Sa.unshift(function () {
  if (!e.noFSInit && !dc) {
    assert(!dc, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");dc = !0;cc();e.stdin = e.stdin;e.stdout = e.stdout;e.stderr = e.stderr;e.stdin ? W("/dev", "stdin", e.stdin) : Wb("/dev/tty", "/dev/stdin");e.stdout ? W("/dev", "stdout", null, e.stdout) : Wb("/dev/tty", "/dev/stdout");e.stderr ? W("/dev", "stderr", null, e.stderr) : Wb("/dev/tty1", "/dev/stderr");var a = Yb("/dev/stdin", "r");assert(0 === a.fd, "invalid handle for stdin (" + a.fd + ")");a = Yb("/dev/stdout", "w");assert(1 === a.fd, "invalid handle for stdout (" + a.fd + ")");a = Yb("/dev/stderr", "w");assert(2 === a.fd, "invalid handle for stderr (" + a.fd + ")");
  }
});Ta.push(function () {
  Gb = !1;
});J.push(function () {
  dc = !1;var a = e._fflush;a && a(0);for (a = 0; a < Eb.length; a++) {
    var b = Eb[a];b && $b(b);
  }
});e.FS_createFolder = function (a, b, c, d) {
  a = L("string" === typeof a ? a : U(a), b);return V(a, ec(c, d));
};
e.FS_createPath = function (a, b) {
  a = "string" === typeof a ? a : U(a);for (var c = b.split("/").reverse(); c.length;) {
    var d = c.pop();if (d) {
      var f = L(a, d);try {
        V(f);
      } catch (g) {}a = f;
    }
  }return f;
};e.FS_createDataFile = gc;
e.FS_createPreloadedFile = function (a, b, c, d, f, g, h, n, u, r) {
  function q(c) {
    function q(c) {
      r && r();n || gc(a, b, c, d, f, u);g && g();bb();
    }var I = !1;e.preloadPlugins.forEach(function (a) {
      !I && a.canHandle(y) && (a.handle(c, y, q, function () {
        h && h();bb();
      }), I = !0);
    });I || q(c);
  }Browser.md();var y = b ? qb(L(a, b)) : a;ab();"string" == typeof c ? Browser.$c(c, function (a) {
    q(a);
  }, h) : q(c);
};
e.FS_createLazyFile = function (a, b, c, d, f) {
  var g, h;function n() {
    this.$ = !1;this.M = [];
  }n.prototype.get = function (a) {
    if (!(a > this.length - 1 || 0 > a)) {
      var b = a % this.chunkSize;return this.ya(a / this.chunkSize | 0)[b];
    }
  };n.prototype.Ua = function (a) {
    this.ya = a;
  };n.prototype.oa = function () {
    var a = new XMLHttpRequest();a.open("HEAD", c, !1);a.send(null);if (!(200 <= a.status && 300 > a.status || 304 === a.status)) throw Error("Couldn't load " + c + ". Status: " + a.status);var b = Number(a.getResponseHeader("Content-length")),
        d,
        f = (d = a.getResponseHeader("Accept-Ranges")) && "bytes" === d,
        a = (d = a.getResponseHeader("Content-Encoding")) && "gzip" === d,
        g = 1048576;f || (g = b);var h = this;h.Ua(function (a) {
      var d = a * g,
          f = (a + 1) * g - 1,
          f = Math.min(f, b - 1);if ("undefined" === typeof h.M[a]) {
        var n = h.M;if (d > f) throw Error("invalid range (" + d + ", " + f + ") or no bytes requested!");if (f > b - 1) throw Error("only " + b + " bytes available! programmer error!");var q = new XMLHttpRequest();q.open("GET", c, !1);b !== g && q.setRequestHeader("Range", "bytes=" + d + "-" + f);"undefined" != typeof Uint8Array && (q.responseType = "arraybuffer");
        q.overrideMimeType && q.overrideMimeType("text/plain; charset=x-user-defined");q.send(null);if (!(200 <= q.status && 300 > q.status || 304 === q.status)) throw Error("Couldn't load " + c + ". Status: " + q.status);d = void 0 !== q.response ? new Uint8Array(q.response || []) : Xa(q.responseText || "", !0);n[a] = d;
      }if ("undefined" === typeof h.M[a]) throw Error("doXHR failed!");return h.M[a];
    });if (a || !b) g = b = 1, g = b = this.ya(0).length, console.log("LazyFiles on gzip forces download of the whole file when length is accessed");this.Ga = b;this.Fa = g;this.$ = !0;
  };if ("undefined" !== typeof XMLHttpRequest) {
    if (!l) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";g = new n();Object.defineProperties(g, { length: { get: function get() {
          this.$ || this.oa();return this.Ga;
        } }, chunkSize: { get: function get() {
          this.$ || this.oa();return this.Fa;
        } } });h = void 0;
  } else h = c, g = void 0;var u = fc(a, b, d, f);g ? u.b = g : h && (u.b = null, u.url = h);Object.defineProperties(u, { f: { get: function get() {
        return this.b.length;
      } } });var r = {};Object.keys(u.e).forEach(function (a) {
    var b = u.e[a];r[a] = function () {
      if (!hc(u)) throw new M(K.p);return b.apply(null, arguments);
    };
  });r.read = function (a, b, c, d, f) {
    if (!hc(u)) throw new M(K.p);a = a.c.b;if (f >= a.length) return 0;d = Math.min(a.length - f, d);assert(0 <= d);if (a.slice) for (var g = 0; g < d; g++) {
      b[c + g] = a[f + g];
    } else for (g = 0; g < d; g++) {
      b[c + g] = a.get(f + g);
    }return d;
  };u.e = r;return u;
};e.FS_createLink = function (a, b, c) {
  a = L("string" === typeof a ? a : U(a), b);return Wb(c, a);
};e.FS_createDevice = W;
e.FS_unlink = function (a) {
  var b = T(a, { parent: !0 }).c,
      c = nb(a),
      d = Ab(b, c),
      f;a: {
    try {
      f = Ab(b, c);
    } catch (g) {
      f = g.n;break a;
    }var h = Kb(b, "wx");f = h ? h : P(f.mode) ? K.B : 0;
  }if (f) throw new M(f);if (!b.d.unlink) throw new M(K.s);if (d.G) throw new M(K.S);try {
    S.willDeletePath && S.willDeletePath(a);
  } catch (n) {
    console.log("FS.trackingDelegate['willDeletePath']('" + a + "') threw an exception: " + n.message);
  }b.d.unlink(b, c);b = Ib(d.parent.id, d.name);if (R[b] === d) R[b] = d.u;else for (b = R[b]; b;) {
    if (b.u === d) {
      b.u = d.u;break;
    }b = b.u;
  }try {
    if (S.onDeletePath) S.onDeletePath(a);
  } catch (u) {
    console.log("FS.trackingDelegate['onDeletePath']('" + a + "') threw an exception: " + u.message);
  }
};Sa.unshift(function () {});J.push(function () {});if (m) {
  var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
      Bb = __webpack_require__(27);Q.Xa();
}x = D(1, "i32", 2);La = p = t.ma(v);Ma = La + Pa;Oa = t.ma(Ma);w[x >> 2] = Oa;ya = !0;e.Ia = { Math: Math, Int8Array: Int8Array, Int16Array: Int16Array, Int32Array: Int32Array, Uint8Array: Uint8Array, Uint16Array: Uint16Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array, NaN: NaN, Infinity: Infinity };
e.Ja = { abort: z, assert: assert, enlargeMemory: function enlargeMemory() {
    ia();
  }, getTotalMemory: function getTotalMemory() {
    return ha;
  }, abortOnCannotGrowMemory: ia, invoke_ii: function invoke_ii(a, b) {
    try {
      return e.dynCall_ii(a, b);
    } catch (c) {
      if ("number" !== typeof c && "longjmp" !== c) throw c;Z.setThrew(1, 0);
    }
  }, invoke_iiii: function invoke_iiii(a, b, c, d) {
    try {
      return e.dynCall_iiii(a, b, c, d);
    } catch (f) {
      if ("number" !== typeof f && "longjmp" !== f) throw f;Z.setThrew(1, 0);
    }
  }, invoke_vi: function invoke_vi(a, b) {
    try {
      e.dynCall_vi(a, b);
    } catch (c) {
      if ("number" !== typeof c && "longjmp" !== c) throw c;Z.setThrew(1, 0);
    }
  }, _pthread_cleanup_pop: function _pthread_cleanup_pop() {
    assert(fb.level == J.length, "cannot pop if something else added meanwhile!");J.pop();fb.level = J.length;
  }, ___syscall221: function ___syscall221(a, b) {
    X = b;try {
      var c = jc();switch (Y()) {case 0:
          var d = Y();return 0 > d ? -K.g : Yb(c.path, c.flags, 0, d).fd;case 1:case 2:
          return 0;case 3:
          return c.flags;case 4:
          return d = Y(), c.flags |= d, 0;case 12:case 12:
          return d = Y(), qa[d + 0 >> 1] = 2, 0;case 13:case 14:case 13:case 14:
          return 0;case 16:case 8:
          return -K.g;case 9:
          return jb(K.g), -1;default:
          return -K.g;}
    } catch (f) {
      return "undefined" !== typeof ic && f instanceof M || z(f), -f.n;
    }
  }, ___syscall54: function ___syscall54(a, b) {
    X = b;try {
      var c = jc(),
          d = Y();switch (d) {case 21505:
          return c.tty ? 0 : -K.C;case 21506:
          return c.tty ? 0 : -K.C;case 21519:
          if (!c.tty) return -K.C;var f = Y();return w[f >> 2] = 0;case 21520:
          return c.tty ? -K.g : -K.C;case 21531:
          f = Y();if (!c.e.Oa) throw new M(K.C);return c.e.Oa(c, d, f);default:
          z("bad ioctl syscall " + d);}
    } catch (g) {
      return "undefined" !== typeof ic && g instanceof M || z(g), -g.n;
    }
  }, ___lock: function ___lock() {}, _abort: function _abort() {
    e.abort();
  }, _pthread_cleanup_push: fb, ___syscall6: function ___syscall6(a, b) {
    X = b;try {
      var c = jc();$b(c);return 0;
    } catch (d) {
      return "undefined" !== typeof ic && d instanceof M || z(d), -d.n;
    }
  }, _llvm_stacksave: oc, ___syscall140: function ___syscall140(a, b) {
    X = b;try {
      var c = jc(),
          d = Y(),
          f = Y(),
          g = Y(),
          h = Y();assert(0 === d);ac(c, f, h);w[g >> 2] = c.position;c.Z && 0 === f && 0 === h && (c.Z = null);return 0;
    } catch (n) {
      return "undefined" !== typeof ic && n instanceof M || z(n), -n.n;
    }
  }, ___syscall5: function ___syscall5(a, b) {
    X = b;try {
      var c = B(Y()),
          d = Y(),
          f = Y();return Yb(c, d, f).fd;
    } catch (g) {
      return "undefined" !== typeof ic && g instanceof M || z(g), -g.n;
    }
  }, _emscripten_memcpy_big: function _emscripten_memcpy_big(a, b, c) {
    F.set(F.subarray(b, b + c), a);return a;
  }, _llvm_bswap_i64: function _llvm_bswap_i64(a, b) {
    var c = pc(b) >>> 0,
        d = pc(a) >>> 0;return (Z.setTempRet0(d), c) | 0;
  }, ___unlock: function ___unlock() {}, _llvm_stackrestore: function _llvm_stackrestore(a) {
    var b = oc.D[a];oc.D.splice(a, 1);t.I(b);
  }, ___assert_fail: function ___assert_fail(a, b, c, d) {
    ja = !0;throw "Assertion failed: " + B(a) + ", at: " + [b ? B(b) : "unknown filename", c, d ? B(d) : "unknown function"] + " at " + Ha();
  }, ___syscall145: function ___syscall145(a, b) {
    X = b;try {
      var c = jc(),
          d = Y(),
          f;a: {
        for (var g = Y(), h = 0, n = 0; n < g; n++) {
          var u = w[d + (8 * n + 4) >> 2],
              r,
              q = c,
              y = w[d + 8 * n >> 2],
              H = u,
              A = void 0,
              I = C;if (0 > H || 0 > A) throw new M(K.g);if (1 === (q.flags & 2097155)) throw new M(K.J);if (P(q.c.mode)) throw new M(K.B);if (!q.e.read) throw new M(K.g);var O = !0;if ("undefined" === typeof A) A = q.position, O = !1;else if (!q.seekable) throw new M(K.K);var ob = q.e.read(q, I, y, H, A);O || (q.position += ob);r = ob;if (0 > r) {
            f = -1;break a;
          }h += r;if (r < u) break;
        }f = h;
      }return f;
    } catch (Na) {
      return "undefined" !== typeof ic && Na instanceof M || z(Na), -Na.n;
    }
  }, ___syscall146: function ___syscall146(a, b) {
    X = b;try {
      var c = jc(),
          d = Y(),
          f;a: {
        for (var g = Y(), h = 0, n = 0; n < g; n++) {
          var u = bc(c, C, w[d + 8 * n >> 2], w[d + (8 * n + 4) >> 2], void 0);if (0 > u) {
            f = -1;break a;
          }h += u;
        }f = h;
      }return f;
    } catch (r) {
      return "undefined" !== typeof ic && r instanceof M || z(r), -r.n;
    }
  }, ___setErrNo: jb, STACKTOP: p, STACK_MAX: Ma, DYNAMICTOP_PTR: x, tempDoublePtr: cb, ABORT: ja }; // EMSCRIPTEN_START_ASM
var Z = function (global, env, buffer) {
  "use asm";
  var a = new global.Int8Array(buffer);var b = new global.Int16Array(buffer);var c = new global.Int32Array(buffer);var d = new global.Uint8Array(buffer);var e = new global.Uint16Array(buffer);var f = new global.Uint32Array(buffer);var g = new global.Float32Array(buffer);var h = new global.Float64Array(buffer);var i = env.STACKTOP | 0;var j = env.STACK_MAX | 0;var k = env.DYNAMICTOP_PTR | 0;var l = env.tempDoublePtr | 0;var m = env.ABORT | 0;var n = 0;var o = 0;var p = 0;var q = 0;var r = global.NaN,
      s = global.Infinity;var t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0.0,
      y = 0,
      z = 0,
      A = 0,
      B = 0.0;var C = 0;var D = global.Math.floor;var E = global.Math.abs;var F = global.Math.sqrt;var G = global.Math.pow;var H = global.Math.cos;var I = global.Math.sin;var J = global.Math.tan;var K = global.Math.acos;var L = global.Math.asin;var M = global.Math.atan;var N = global.Math.atan2;var O = global.Math.exp;var P = global.Math.log;var Q = global.Math.ceil;var R = global.Math.imul;var S = global.Math.min;var T = global.Math.max;var U = global.Math.clz32;var V = env.abort;var W = env.assert;var X = env.enlargeMemory;var Y = env.getTotalMemory;var Z = env.abortOnCannotGrowMemory;var _ = env.invoke_ii;var $ = env.invoke_iiii;var aa = env.invoke_vi;var ba = env._pthread_cleanup_pop;var ca = env.___syscall221;var da = env.___syscall54;var ea = env.___lock;var fa = env._abort;var ga = env._pthread_cleanup_push;var ha = env.___syscall6;var ia = env._llvm_stacksave;var ja = env.___syscall140;var ka = env.___syscall5;var la = env._emscripten_memcpy_big;var ma = env._llvm_bswap_i64;var na = env.___unlock;var oa = env._llvm_stackrestore;var pa = env.___assert_fail;var qa = env.___syscall145;var ra = env.___syscall146;var sa = env.___setErrNo;var ta = 0.0;
  // EMSCRIPTEN_START_FUNCS
  function xa(a) {
    a = a | 0;var b = 0;b = i;i = i + a | 0;i = i + 15 & -16;return b | 0;
  }function ya() {
    return i | 0;
  }function za(a) {
    a = a | 0;i = a;
  }function Aa(a, b) {
    a = a | 0;b = b | 0;i = a;j = b;
  }function Ba(a, b) {
    a = a | 0;b = b | 0;if (!n) {
      n = a;o = b;
    }
  }function Ca(a) {
    a = a | 0;C = a;
  }function Da() {
    return C | 0;
  }function Ea(b, c) {
    b = b | 0;c = c | 0;a[b >> 0] = c >>> 24;a[b + 1 >> 0] = c >>> 16;a[b + 2 >> 0] = c >>> 8;a[b + 3 >> 0] = c;return;
  }function Fa(a, b) {
    a = a | 0;b = b | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;e = 0;f = 0;do {
      h = a + (7 - f << 2) | 0;h = (d[h + 1 >> 0] | 0) << 16 | (d[h >> 0] | 0) << 24 | (d[h + 2 >> 0] | 0) << 8 | (d[h + 3 >> 0] | 0);g = f << 1;c[b + (f << 2) >> 2] = (h << g | e) & 1073741823;e = h >>> (30 - g | 0);f = f + 1 | 0;
    } while ((f | 0) != 8);c[b + 32 >> 2] = e;return;
  }function Ga(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0;e = c[b + 32 >> 2] << 16;f = 0;while (1) {
      g = c[b + (7 - f << 2) >> 2] | 0;h = f << 1;i = g >>> (14 - h | 0) | e;e = d + (f << 2) | 0;a[e >> 0] = i >>> 24;a[e + 1 >> 0] = i >>> 16;a[e + 2 >> 0] = i >>> 8;a[e + 3 >> 0] = i;f = f + 1 | 0;if ((f | 0) == 8) break;else e = g << h + 18;
    }return;
  }function Ha(a) {
    a = a | 0;var b = 0;b = a + 36 | 0;do {
      c[a >> 2] = 0;a = a + 4 | 0;
    } while ((a | 0) < (b | 0));return;
  }function Ia(a) {
    a = a | 0;return (c[a + 32 >> 2] | (c[a + 28 >> 2] | (c[a + 24 >> 2] | (c[a + 20 >> 2] | (c[a + 16 >> 2] | (c[a + 12 >> 2] | (c[a + 8 >> 2] | (c[a + 4 >> 2] | c[a >> 2]))))))) | 0) == 0 | 0;
  }function Ja(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0;d = 0;e = 8;f = 0;while (1) {
      h = c[a + (e << 2) >> 2] | 0;g = c[b + (e << 2) >> 2] | 0;d = h >>> 0 < g >>> 0 | d << 1;f = h >>> 0 > g >>> 0 | f << 1;if ((e | 0) <= 0) break;else e = e + -1 | 0;
    }return d >>> 0 > f >>> 0 | 0;
  }function Ka(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0;d = 0;e = 0;do {
      e = c[b + (d << 2) >> 2] ^ c[a + (d << 2) >> 2] | e;d = d + 1 | 0;
    } while ((d | 0) != 9);return (e | 0) == 0 | 0;
  }function La(a, b, d, e) {
    a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0;g = 0 - b | 0;h = b + -1 | 0;if ((b | 1 | 0) == 1) f = 0;else pa(38200, 38223, 270, 38235);do {
      c[a + (f << 2) >> 2] = c[e + (f << 2) >> 2] & h | c[d + (f << 2) >> 2] & g;f = f + 1 | 0;
    } while ((f | 0) != 9);return;
  }function Ma(a) {
    a = a | 0;var b = 0,
        d = 0,
        e = 0,
        f = 0;b = 8;d = c[a + 32 >> 2] | 0;do {
      e = b;b = b + -1 | 0;f = d;d = c[a + (b << 2) >> 2] | 0;c[a + (e << 2) >> 2] = d >>> 29 & 1 | f << 1 & 1073741822;
    } while ((e | 0) > 1);c[a >> 2] = c[a >> 2] << 1 & 1073741822;return;
  }function Na(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0;d = c[a >> 2] | 0;f = 0 - (d & 1) | 0;d = ((c[b >> 2] & f) + d | 0) >>> 1;e = 0;do {
      i = e;e = e + 1 | 0;g = (c[b + (e << 2) >> 2] & f) + (c[a + (e << 2) >> 2] | 0) | 0;h = (g << 29 & 536870912) + d | 0;c[a + (i << 2) >> 2] = h & 1073741823;d = (h >>> 30) + (g >>> 1) | 0;
    } while ((e | 0) != 8);c[a + 32 >> 2] = d;return;
  }function Oa(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0;e = b & 255;b = 0;do {
      f = a + (b << 2) | 0;c[f >> 2] = R(c[f >> 2] | 0, e) | 0;b = b + 1 | 0;
    } while ((b | 0) != 9);Pa(a, d);return;
  }function Pa(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0;g = (c[a + 32 >> 2] | 0) >>> 16;i = c[a >> 2] | 0;h = pc(c[b >> 2] | 0, 0, g | 0, 0) | 0;d = C;e = kc(i | 0, 536870912, h | 0, d | 0) | 0;f = C;d = kc(i | 0, 0, h | 0, d | 0) | 0;c[a >> 2] = d & 1073741823;d = 1;while (1) {
      l = mc(e | 0, f | 0, 30) | 0;k = C;i = a + (d << 2) | 0;j = c[i >> 2] | 0;f = pc(c[b + (d << 2) >> 2] | 0, 0, g | 0, 0) | 0;h = C;k = qc(l | 0, k | 0, -2147483648, 536870911) | 0;j = qc(k | 0, C | 0, j | 0, 0) | 0;e = kc(j | 0, C | 0, f | 0, h | 0) | 0;c[i >> 2] = e & 1073741823;d = d + 1 | 0;if ((d | 0) == 9) break;else f = C;
    }return;
  }function Qa(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0;h = i;i = i + 48 | 0;g = h;d = 0;e = 8;f = 0;while (1) {
      k = c[a + (e << 2) >> 2] | 0;j = c[b + (e << 2) >> 2] | 0;d = k >>> 0 < j >>> 0 | d << 1;f = k >>> 0 > j >>> 0 | f << 1;if ((e | 0) <= 0) break;else e = e + -1 | 0;
    }f = d >>> 0 > f >>> 0;e = 0;d = 1;while (1) {
      d = d + 1073741823 + (c[a + (e << 2) >> 2] | 0) - (c[b + (e << 2) >> 2] | 0) | 0;c[g + (e << 2) >> 2] = d & 1073741823;e = e + 1 | 0;if ((e | 0) == 9) break;else d = d >>> 30;
    }La(a, f & 1, a, g);i = h;return;
  }function Ra(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0;f = 0;e = 1;while (1) {
      e = e + 1073741823 + (c[a + (f << 2) >> 2] | 0) - (c[b + (f << 2) >> 2] | 0) | 0;c[d + (f << 2) >> 2] = e & 1073741823;f = f + 1 | 0;if ((f | 0) == 9) break;else e = e >>> 30;
    }return;
  }function Sa(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0;h = 0;g = 0;e = 0;i = 1;while (1) {
      f = 0;do {
        j = pc(c[b + (h - f << 2) >> 2] | 0, 0, c[a + (f << 2) >> 2] | 0, 0) | 0;g = qc(j | 0, C | 0, g | 0, e | 0) | 0;e = C;f = f + 1 | 0;
      } while ((f | 0) != (i | 0));c[d + (h << 2) >> 2] = g & 1073741823;g = mc(g | 0, e | 0, 30) | 0;e = C;h = h + 1 | 0;if ((h | 0) == 9) {
        h = 9;break;
      } else i = i + 1 | 0;
    }while (1) {
      f = h + -8 | 0;if ((f | 0) < 9) do {
        j = pc(c[b + (h - f << 2) >> 2] | 0, 0, c[a + (f << 2) >> 2] | 0, 0) | 0;g = qc(j | 0, C | 0, g | 0, e | 0) | 0;e = C;f = f + 1 | 0;
      } while ((f | 0) != 9);c[d + (h << 2) >> 2] = g & 1073741823;g = mc(g | 0, e | 0, 30) | 0;h = h + 1 | 0;if ((h | 0) == 17) break;else e = C;
    }c[d + 68 >> 2] = g;return;
  }function Ta(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0;l = a + (d + 1 << 2) | 0;j = (c[l >> 2] << 14) + ((c[a + (d << 2) >> 2] | 0) >>> 16) | 0;k = d + -8 | 0;e = a + (k << 2) | 0;f = c[e >> 2] | 0;g = pc(c[b >> 2] | 0, 0, j | 0, 0) | 0;h = C;if ((j | 0) <= -1) pa(38243, 38223, 417, 38262);i = kc(f | 0, 536870912, g | 0, h | 0) | 0;m = C;h = kc(f | 0, 0, g | 0, h | 0) | 0;c[e >> 2] = h & 1073741823;h = mc(i | 0, m | 0, 30) | 0;m = C;i = a + (d + -7 << 2) | 0;f = qc(c[i >> 2] | 0, 0, -2147483648, 536870911) | 0;e = 1;g = C;d = m;do {
      m = pc(c[b + (e << 2) >> 2] | 0, 0, j | 0, 0) | 0;m = kc(f | 0, g | 0, m | 0, C | 0) | 0;m = qc(m | 0, C | 0, h | 0, d | 0) | 0;c[i >> 2] = m & 1073741823;e = e + 1 | 0;h = mc(m | 0, C | 0, 30) | 0;d = C;i = a + (e + k << 2) | 0;f = qc(c[i >> 2] | 0, 0, -2147483648, 536870911) | 0;g = C;
    } while ((e | 0) != 9);m = qc(f | 0, g | 0, h | 0, d | 0) | 0;c[l >> 2] = m & 1073741823;return;
  }function Ua(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0;e = 16;while (1) {
      Ta(b, d, e);if (c[b + (e + 1 << 2) >> 2] | 0) {
        g = 4;break;
      }e = e + -1 | 0;if ((e | 0) <= 7) {
        f = 0;break;
      }
    }if ((g | 0) == 4) pa(38286, 38223, 451, 38302);do {
      c[a + (f << 2) >> 2] = c[b + (f << 2) >> 2];f = f + 1 | 0;
    } while ((f | 0) != 9);return;
  }function Va(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;g = i;i = i + 80 | 0;e = g;f = e;h = f + 72 | 0;do {
      c[f >> 2] = 0;f = f + 4 | 0;
    } while ((f | 0) < (h | 0));Sa(a, b, e);Ua(b, e, d);i = g;return;
  }function Wa(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0;n = i;i = i + 144 | 0;k = n + 72 | 0;l = n + 36 | 0;m = n;c[l >> 2] = 1;h = l + 4 | 0;c[h >> 2] = 0;c[h + 4 >> 2] = 0;c[h + 8 >> 2] = 0;c[h + 12 >> 2] = 0;c[h + 16 >> 2] = 0;c[h + 20 >> 2] = 0;c[h + 24 >> 2] = 0;c[h + 28 >> 2] = 0;h = m;d = b;j = h + 36 | 0;do {
      c[h >> 2] = c[d >> 2];h = h + 4 | 0;d = d + 4 | 0;
    } while ((h | 0) < (j | 0));e = 0;d = 1;while (1) {
      j = m + (e << 2) | 0;d = (c[j >> 2] | 0) + d | 0;c[j >> 2] = d & 1073741823;e = e + 1 | 0;if ((e | 0) == 9) break;else d = d >>> 30;
    }d = 0;e = c[m >> 2] | 0;do {
      j = d;d = d + 1 | 0;h = e;e = c[m + (d << 2) >> 2] | 0;c[m + (j << 2) >> 2] = e << 29 & 536870912 | h >>> 1;
    } while ((d | 0) != 8);e = m + 32 | 0;c[e >> 2] = (c[e >> 2] | 0) >>> 1;d = 0;f = c[m >> 2] | 0;do {
      j = d;d = d + 1 | 0;h = f;f = c[m + (d << 2) >> 2] | 0;c[m + (j << 2) >> 2] = f << 29 & 536870912 | h >>> 1;
    } while ((d | 0) != 8);c[e >> 2] = (c[e >> 2] | 0) >>> 1;e = 0;do {
      g = (e | 0) == 8;d = 0;f = c[m + (e << 2) >> 2] | 0;do {
        if (g & (f | 0) == 0) break;if (f & 1 | 0) {
          h = k;j = h + 72 | 0;do {
            c[h >> 2] = 0;h = h + 4 | 0;
          } while ((h | 0) < (j | 0));Sa(a, l, k);Ua(l, k, b);
        }f = f >>> 1;h = k;j = h + 72 | 0;do {
          c[h >> 2] = 0;h = h + 4 | 0;
        } while ((h | 0) < (j | 0));Sa(a, a, k);Ua(a, k, b);d = d + 1 | 0;
      } while (d >>> 0 < 30);e = e + 1 | 0;
    } while ((e | 0) != 9);Qa(l, b);h = a;d = l;j = h + 36 | 0;do {
      c[h >> 2] = c[d >> 2];h = h + 4 | 0;d = d + 4 | 0;
    } while ((h | 0) < (j | 0));i = n;return;
  }function Xa(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0,
        v = 0,
        w = 0;v = i;i = i + 112 | 0;d = v + 72 | 0;u = v + 32 | 0;t = v;Pa(a, b);Qa(a, b);e = c[b >> 2] | 0;f = 0;while (1) {
      r = f;f = f + 1 | 0;g = c[b + (f << 2) >> 2] | 0;h = r << 1;p = g << 30 - h | e;c[t + (r << 2) >> 2] = p;c[d + (r << 2) >> 2] = p;if ((f | 0) == 8) break;else e = g >>> (h + 2 | 0);
    }e = c[a >> 2] | 0;f = 0;while (1) {
      r = f;f = f + 1 | 0;b = c[a + (f << 2) >> 2] | 0;g = r << 1;c[u + (r << 2) >> 2] = b << 30 - g | e;if ((f | 0) == 8) break;else e = b >>> (g + 2 | 0);
    }o = d + 36 | 0;c[o >> 2] = 8;p = u + 36 | 0;c[p >> 2] = 8;r = d + 32 | 0;c[r >> 2] = 1;c[u + 32 >> 2] = 0;f = 0;n = u;e = 8;g = c[d >> 2] | 0;b = 1;a: while (1) {
      if (!(g & 1)) {
        q = 7;break;
      }if (!(b & 1)) {
        q = 10;break;
      }l = n + 36 | 0;b = e;while (1) {
        e = b + -1 | 0;if (c[n + (e << 2) >> 2] | 0) break;c[l >> 2] = e;if ((b | 0) < 1) break a;else b = e;
      }e = c[n >> 2] | 0;if (!e) {
        g = n + 32 | 0;do {
          e = 0;do {
            m = e;e = e + 1 | 0;c[n + (m << 2) >> 2] = c[n + (e << 2) >> 2];
          } while ((e | 0) != 8);c[g >> 2] = 0;b = (c[l >> 2] | 0) + -1 | 0;c[l >> 2] = b;f = f + 32 | 0;e = c[n >> 2] | 0;
        } while ((e | 0) == 0);
      }k = 0;while (1) {
        if (!(e & 1 << k)) k = k + 1 | 0;else break;
      }if ((k | 0) > 0) {
        e = e >>> k;if ((b | 0) > 1) {
          j = 32 - k | 0;g = 1;h = n;while (1) {
            b = n + (g << 2) | 0;c[h >> 2] = c[b >> 2] << j | e;e = g + 1 | 0;h = (c[b >> 2] | 0) >>> k;if ((e | 0) < (c[l >> 2] | 0)) {
              g = e;e = h;h = b;
            } else break;
          }
        } else {
          g = 0;h = e;b = n;e = 1;
        }c[b >> 2] = h;if (!h) c[l >> 2] = (c[l >> 2] | 0) + -1;else g = e;e = n + (g << 2) | 0;b = c[e >> 2] << k;if ((g | 0) < 8) {
          h = 32 - k | 0;do {
            g = g + 1 | 0;m = e;e = n + (g << 2) | 0;c[m >> 2] = (c[e >> 2] | 0) >>> h | b;b = c[e >> 2] << k;
          } while ((g | 0) != 8);e = n + 32 | 0;
        }c[e >> 2] = b;m = k + f | 0;
      } else m = f;if (!(c[n >> 2] & 1)) {
        q = 32;break;
      }if (c[n + 32 >> 2] & 1 | 0) {
        q = 34;break;
      }f = c[o >> 2] | 0;e = f - (c[p >> 2] | 0) | 0;if (!e) {
        e = f;while (1) {
          b = e + -1 | 0;if ((e | 0) <= 0) {
            q = 38;break;
          }e = c[d + (b << 2) >> 2] | 0;f = u + (b << 2) | 0;if ((e | 0) == (c[f >> 2] | 0)) e = b;else break;
        }if ((q | 0) == 38) {
          q = 0;if (!e) {
            q = 56;break;
          }f = u + (b << 2) | 0;e = c[d + (b << 2) >> 2] | 0;
        }e = e >>> 0 > (c[f >> 2] | 0) >>> 0 ? 1 : -1;
      }n = (e | 0) > 0;l = n ? u : d;n = n ? d : u;k = l + 36 | 0;h = c[k >> 2] | 0;if ((h | 0) > 0) {
        e = 0;f = 1;b = 0;while (1) {
          j = n + (e << 2) | 0;w = c[j >> 2] | 0;g = c[l + (e << 2) >> 2] | 0;f = qc(f | 0, b | 0, -1, 0) | 0;f = qc(f | 0, C | 0, w | 0, 0) | 0;g = kc(f | 0, C | 0, g | 0, 0) | 0;f = C;c[j >> 2] = g;e = e + 1 | 0;if ((e | 0) < (h | 0)) b = 0;else {
            b = e;g = 0;break;
          }
        }
      } else {
        b = 0;f = 1;g = 0;
      }j = n + 36 | 0;e = c[j >> 2] | 0;if ((b | 0) < (e | 0)) {
        e = g;while (1) {
          w = n + (b << 2) | 0;g = c[w >> 2] | 0;e = qc(f | 0, e | 0, -1, 0) | 0;e = qc(e | 0, C | 0, g | 0, 0) | 0;c[w >> 2] = e;b = b + 1 | 0;e = c[j >> 2] | 0;if ((b | 0) >= (e | 0)) break;else {
            f = C;e = 0;
          }
        }
      }if ((e | 0) > 8) {
        f = 8;g = 0;b = 0;
      } else {
        f = 8;g = 0;b = 0;while (1) {
          w = l + (f << 2) | 0;j = c[n + (f << 2) >> 2] | 0;h = qc(c[w >> 2] | 0, 0, g | 0, b | 0) | 0;j = qc(h | 0, C | 0, j | 0, 0) | 0;g = C;c[w >> 2] = j;w = f;f = f + -1 | 0;if ((w | 0) <= (e | 0)) break;else b = 0;
        }h = c[k >> 2] | 0;b = 0;
      }if ((f | 0) >= (h | 0)) while (1) {
        w = l + (f << 2) | 0;j = qc(c[w >> 2] | 0, 0, g | 0, b | 0) | 0;c[w >> 2] = j;if ((f | 0) > (c[k >> 2] | 0)) {
          f = f + -1 | 0;g = C;b = 0;
        } else break;
      }g = c[l >> 2] | 0;if (!(g & 1)) {
        q = 51;break;
      }b = c[l + 32 >> 2] | 0;if (!(b & 1)) {
        q = 53;break;
      }if (c[n >> 2] & 1 | 0) {
        q = 55;break;
      } else f = m;
    }if ((q | 0) == 7) pa(38321, 38223, 646, 38335);else if ((q | 0) == 10) pa(38346, 38223, 647, 38335);else if ((q | 0) == 32) pa(38360, 38223, 699, 38335);else if ((q | 0) == 34) pa(38375, 38223, 700, 38335);else if ((q | 0) == 51) pa(38321, 38223, 757, 38335);else if ((q | 0) == 53) pa(38346, 38223, 758, 38335);else if ((q | 0) == 55) pa(38397, 38223, 759, 38335);else if ((q | 0) == 56) {
      l = c[t >> 2] | 0;if (!(l & 1)) pa(38419, 38223, 786, 38335);f = l + -1 | 0;e = l + -2 | 0;if (!f) k = e;else {
        do {
          f = R(f, f) | 0;e = R(f + 1 | 0, e) | 0;
        } while ((f | 0) != 0);k = e;
      }b: do {
        if ((m | 0) > 31) {
          j = d + 4 | 0;e = m;while (1) {
            w = c[r >> 2] | 0;b = R(w, k) | 0;q = pc(l | 0, 0, b | 0, 0) | 0;w = qc(q | 0, C | 0, w | 0, 0) | 0;if (!((w | 0) == 0 & 0 == 0)) break;f = 0;g = C;h = 0;while (1) {
              w = f;f = f + 1 | 0;o = c[d + (7 - w << 2) >> 2] | 0;p = pc(c[t + (f << 2) >> 2] | 0, 0, b | 0, 0) | 0;q = C;o = qc(o | 0, 0, g | 0, h | 0) | 0;q = qc(o | 0, C | 0, p | 0, q | 0) | 0;g = C;c[d + (8 - w << 2) >> 2] = q;if ((f | 0) == 7) break;else h = 0;
            }c[j >> 2] = g;e = e + -32 | 0;if ((e | 0) <= 31) {
              s = e;break b;
            }
          }pa(38429, 38223, 802, 38335);
        } else s = m;
      } while (0);if ((s | 0) > 0) {
        w = (1 << s) + -1 | 0;e = c[r >> 2] | 0;h = (R(e, k) | 0) & w;if ((R(h, l) | 0) + e & w | 0) pa(38454, 38223, 821, 38335);b = pc(h | 0, 0, l | 0, 0) | 0;b = qc(b | 0, C | 0, e | 0, 0) | 0;b = mc(b | 0, C | 0, s | 0) | 0;f = 32 - s | 0;e = 0;g = C;while (1) {
          w = e;e = e + 1 | 0;s = c[d + (7 - w << 2) >> 2] | 0;r = pc(c[t + (e << 2) >> 2] | 0, 0, h | 0, 0) | 0;s = qc(r | 0, C | 0, s | 0, 0) | 0;s = nc(s | 0, C | 0, f | 0) | 0;s = qc(s | 0, C | 0, b | 0, g | 0) | 0;b = C;c[d + (8 - w << 2) >> 2] = s;if ((e | 0) == 7) break;else g = 0;
        }c[d + 4 >> 2] = b;e = 0;f = 0;
      } else {
        e = 0;f = 0;
      }do {
        s = c[d + (8 - e << 2) >> 2] | 0;w = e << 1;c[a + (e << 2) >> 2] = s << w & 1073741823 | f;f = s >>> (30 - w | 0);e = e + 1 | 0;
      } while ((e | 0) != 8);c[a + 32 >> 2] = f;c[t >> 2] = 0;c[t + 4 >> 2] = 0;c[t + 8 >> 2] = 0;c[t + 12 >> 2] = 0;c[t + 16 >> 2] = 0;c[t + 20 >> 2] = 0;c[t + 24 >> 2] = 0;c[t + 28 >> 2] = 0;e = d + 40 | 0;do {
        c[d >> 2] = 0;d = d + 4 | 0;
      } while ((d | 0) < (e | 0));d = u;e = d + 40 | 0;do {
        c[d >> 2] = 0;d = d + 4 | 0;
      } while ((d | 0) < (e | 0));
    }i = v;return;
  }function Ya(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0;e = 0;d = 0;while (1) {
      f = a + (e << 2) | 0;d = (c[f >> 2] | 0) + d + (c[b + (e << 2) >> 2] | 0) | 0;c[f >> 2] = d & 1073741823;e = e + 1 | 0;if ((e | 0) == 9) break;else d = d >>> 30;
    }return;
  }function Za(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0;e = 0;do {
      f = a + (e << 2) | 0;c[f >> 2] = (c[f >> 2] | 0) + (c[b + (e << 2) >> 2] | 0);e = e + 1 | 0;
    } while ((e | 0) != 9);Pa(a, d);return;
  }function _a(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0;if ((c[d >> 2] | 0) >>> 0 < b >>> 0) pa(38495, 38223, 883, 38514);b = (c[a >> 2] | 0) - b | 0;c[a >> 2] = b;b = b + (c[d >> 2] | 0) | 0;c[a >> 2] = b & 1073741823;e = 1;do {
      b = (c[a + (e << 2) >> 2] | 0) + (b >>> 30) + (c[d + (e << 2) >> 2] | 0) | 0;c[a + (e << 2) >> 2] = b & 1073741823;e = e + 1 | 0;
    } while ((e | 0) != 9);return;
  }function $a(a, b, d, e) {
    a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0;g = 0;f = 1;while (1) {
      f = f + 1073741823 + (c[a + (g << 2) >> 2] | 0) + (c[e + (g << 2) >> 2] << 1) - (c[b + (g << 2) >> 2] | 0) | 0;c[d + (g << 2) >> 2] = f & 1073741823;g = g + 1 | 0;if ((g | 0) == 9) break;else f = f >>> 30;
    }return;
  }function ab(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0;n = i;i = i + 144 | 0;k = n + 108 | 0;e = n + 72 | 0;l = n + 36 | 0;m = n;do {
      if (!(bb(b) | 0)) {
        if (bb(d) | 0) {
          e = d;f = b;g = e + 72 | 0;do {
            c[e >> 2] = c[f >> 2];e = e + 4 | 0;f = f + 4 | 0;
          } while ((e | 0) < (g | 0));break;
        }if (cb(b, d) | 0) {
          db(a, d);break;
        }if (!(eb(b, d) | 0)) {
          $a(d, b, e, a);Xa(e, a);h = d + 36 | 0;j = b + 36 | 0;$a(h, j, k, a);Va(e, k, a);e = l;f = k;g = e + 36 | 0;do {
            c[e >> 2] = c[f >> 2];e = e + 4 | 0;f = f + 4 | 0;
          } while ((e | 0) < (g | 0));Va(l, l, a);e = m;f = b;g = e + 36 | 0;do {
            c[e >> 2] = c[f >> 2];e = e + 4 | 0;f = f + 4 | 0;
          } while ((e | 0) < (g | 0));Za(m, d, a);$a(l, m, l, a);Pa(l, a);Qa(l, a);$a(b, l, m, a);Va(k, m, a);$a(m, j, m, a);Pa(m, a);Qa(m, a);e = d;f = l;g = e + 36 | 0;do {
            c[e >> 2] = c[f >> 2];e = e + 4 | 0;f = f + 4 | 0;
          } while ((e | 0) < (g | 0));e = h;f = m;g = e + 36 | 0;do {
            c[e >> 2] = c[f >> 2];e = e + 4 | 0;f = f + 4 | 0;
          } while ((e | 0) < (g | 0));break;
        } else {
          Ha(d);Ha(d + 36 | 0);break;
        }
      }
    } while (0);i = n;return;
  }function bb(a) {
    a = a | 0;if (!(Ia(a) | 0)) a = 0;else a = (Ia(a + 36 | 0) | 0) != 0;return a & 1 | 0;
  }function cb(a, b) {
    a = a | 0;b = b | 0;if (!(Ka(a, b) | 0)) a = 0;else a = (Ka(a + 36 | 0, b + 36 | 0) | 0) != 0;return a & 1 | 0;
  }function db(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0;j = i;i = i + 112 | 0;d = j + 72 | 0;e = j + 36 | 0;f = j;do {
      if (!(bb(b) | 0)) {
        g = b + 36 | 0;if (!(Ia(g) | 0)) {
          h = d;k = g;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));Oa(d, 2, a);Xa(d, a);h = e;k = b;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));Va(e, e, a);Oa(e, 3, a);_a(e, 0 - (c[a + 180 >> 2] | 0) | 0, a);Va(e, d, a);h = e;k = d;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));Va(e, e, a);h = f;k = b;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));Ma(f);$a(e, f, e, a);Pa(e, a);Qa(e, a);$a(b, e, f, a);Va(d, f, a);$a(f, g, f, a);Pa(f, a);Qa(f, a);h = b;k = e;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));h = g;k = f;l = h + 36 | 0;do {
            c[h >> 2] = c[k >> 2];h = h + 4 | 0;k = k + 4 | 0;
          } while ((h | 0) < (l | 0));break;
        } else {
          Ha(b);Ha(g);break;
        }
      }
    } while (0);i = j;return;
  }function eb(a, b) {
    a = a | 0;b = b | 0;var c = 0;if ((Ka(a, b) | 0) != 0 ? (c = a + 36 | 0, (Ia(c) | 0) == 0) : 0) a = (Ka(c, b + 36 | 0) | 0) == 0 & 1;else a = 0;return a | 0;
  }function fb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0;g = b + 32 | 0;if ((c[g >> 2] | 0) >>> 0 >= 131072) pa(38522, 38542, 181, 38553);h = a & 1073741823;f = ~a;a = c[b >> 2] | 0;e = (c[d >> 2] << 1) + 1073741824 - a | 0;c[b >> 2] = h & e | a & f;a = 0;do {
      a = a + 1 | 0;i = b + (a << 2) | 0;j = c[i >> 2] | 0;e = (e >>> 30) + 1073741823 + (c[d + (a << 2) >> 2] << 1) - j | 0;c[i >> 2] = h & e | j & f;
    } while ((a | 0) != 8);if ((c[g >> 2] | 0) >>> 0 < 131072) return;else pa(38522, 38542, 189, 38553);
  }function gb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0;e = b + 72 | 0;hb(e, d);g = b;h = e;i = g + 36 | 0;do {
      c[g >> 2] = c[h >> 2];g = g + 4 | 0;h = h + 4 | 0;
    } while ((g | 0) < (i | 0));Va(e, b, d);f = b + 36 | 0;g = f;h = b;i = g + 36 | 0;do {
      c[g >> 2] = c[h >> 2];g = g + 4 | 0;h = h + 4 | 0;
    } while ((g | 0) < (i | 0));Va(e, f, d);Va(a, b, d);Va(a + 36 | 0, f, d);return;
  }function hb(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0;e = a + 32 | 0;while (1) {
      d = 0;f = Kb() | 0;do {
        c[a + (d << 2) >> 2] = f & 1073741823;d = d + 1 | 0;f = Kb() | 0;
      } while ((d | 0) != 8);c[e >> 2] = f & 65535;if (Ia(a) | 0) continue;if (Ja(a, b) | 0) break;
    }return;
  }function ib(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;e = b + 36 | 0;f = e;g = a + 72 | 0;h = f + 36 | 0;do {
      c[f >> 2] = c[g >> 2];f = f + 4 | 0;g = g + 4 | 0;
    } while ((f | 0) < (h | 0));Xa(e, d);f = b;g = e;h = f + 36 | 0;do {
      c[f >> 2] = c[g >> 2];f = f + 4 | 0;g = g + 4 | 0;
    } while ((f | 0) < (h | 0));Va(b, b, d);Va(b, e, d);Va(a, b, d);Va(a + 36 | 0, e, d);Qa(b, d);Qa(e, d);return;
  }function jb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0;s = i;i = i + 288 | 0;k = s + 252 | 0;l = s + 216 | 0;m = s + 180 | 0;n = s + 144 | 0;o = s + 108 | 0;p = s + 72 | 0;q = s + 36 | 0;g = s;e = c[d + 180 >> 2] | 0;if ((e + 3 | 0) >>> 0 >= 4) pa(38572, 38542, 248, 38590);h = b + 72 | 0;r = p;t = h;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(p, p, d);r = q;t = h;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(p, q, d);j = (e | 0) != 0;if (j) {
      e = 0 - e | 0;r = g;t = p;u = r + 36 | 0;do {
        c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
      } while ((r | 0) < (u | 0));Va(g, g, d);Oa(g, e & 255, d);
    }Va(a, p, d);r = l;t = p;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));$a(l, b, l, d);Pa(l, d);Ya(p, b);f = Ka(l, d) | 0;Va(a + 36 | 0, q, d);e = b + 36 | 0;$a(q, e, k, d);Ya(q, e);r = m;t = b;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(m, m, d);Oa(m, 3, d);if (j) $a(m, g, m, d);La(k, f, m, k);La(l, f, q, l);r = o;t = l;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(o, o, d);r = n;t = l;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(o, n, d);Va(p, o, d);Va(q, n, d);Va(l, h, d);r = b;t = k;u = r + 36 | 0;do {
      c[r >> 2] = c[t >> 2];r = r + 4 | 0;t = t + 4 | 0;
    } while ((r | 0) < (u | 0));Va(b, b, d);$a(b, o, b, d);Pa(b, d);$a(o, b, e, d);$a(e, b, e, d);Va(k, e, d);$a(e, n, e, d);Na(e, d);Pa(e, d);i = s;return;
  }function kb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0;n = i;i = i + 144 | 0;l = n + 108 | 0;m = n;if (!(Ja(b, a + 108 | 0) | 0)) pa(38609, 38542, 553, 38658);j = c[b >> 2] | 0;g = (j & 1) + -1 | 0;f = 1;e = 0;h = j;do {
      k = f + 1073741823 + h - (c[a + 108 + (e << 2) >> 2] & g) | 0;c[l + (e << 2) >> 2] = k & 1073741823;f = k >>> 30;e = e + 1 | 0;h = c[b + (e << 2) >> 2] | 0;j = h | j;
    } while ((e | 0) != 8);k = l + 32 | 0;c[k >> 2] = f + 65535 + h - (c[a + 140 >> 2] & g);e = c[l >> 2] | 0;if (!(e & 1)) pa(38638, 38542, 576, 38658);if (!j) {
      Ha(d);Ha(d + 36 | 0);
    } else {
      gb(a + 220 + ((((e >>> 4 & 1) + 15 ^ e) >>> 1 & 7) * 72 | 0) | 0, m, a);h = m + 36 | 0;g = 1;do {
        f = 0;e = e >>> 4;b = l;do {
          f = f + 1 | 0;j = b;b = l + (f << 2) | 0;c[j >> 2] = c[b >> 2] << 26 & 1006632960 | e;e = (c[b >> 2] | 0) >>> 4;
        } while ((f | 0) != 8);c[k >> 2] = e;e = c[l >> 2] | 0;b = e >>> 4 & 1;j = b + 15 ^ e;fb((j & 1) + -1 | 0, h, a);jb(a + 220 + (g * 576 | 0) + ((j >>> 1 & 7) * 72 | 0) | 0, m, a);g = g + 1 | 0;
      } while ((g | 0) != 64);fb(b + -1 | 0, h, a);ib(m, d, a);
    }i = n;return;
  }function lb(b, c, d) {
    b = b | 0;c = c | 0;d = d | 0;b = (b | 0) == 0 ? 712 : b;switch (a[c >> 0] | 0) {case 4:
        {
          Fa(c + 1 | 0, d);Fa(c + 33 | 0, d + 36 | 0);b = mb(b, d) | 0;break;
        }case 3:case 2:
        {
          Fa(c + 1 | 0, d);nb(b, a[c >> 0] | 0, d, d + 36 | 0);b = mb(b, d) | 0;break;
        }default:
        b = 0;}return b | 0;
  }function mb(a, b) {
    a = a | 0;b = b | 0;var d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0;k = i;i = i + 80 | 0;d = k + 36 | 0;e = k;if (((bb(b) | 0) == 0 ? (Ja(b, a) | 0) != 0 : 0) ? (f = b + 36 | 0, (Ja(f, a) | 0) != 0) : 0) {
      g = d;h = f;j = g + 36 | 0;do {
        c[g >> 2] = c[h >> 2];g = g + 4 | 0;h = h + 4 | 0;
      } while ((g | 0) < (j | 0));g = e;h = b;j = g + 36 | 0;do {
        c[g >> 2] = c[h >> 2];g = g + 4 | 0;h = h + 4 | 0;
      } while ((g | 0) < (j | 0));Va(f, d, a);Qa(d, a);Va(b, e, a);_a(e, 0 - (c[a + 180 >> 2] | 0) | 0, a);Va(b, e, a);Za(e, a + 184 | 0, a);Qa(e, a);a = (Ka(e, d) | 0) != 0 & 1;
    } else a = 0;i = k;return a | 0;
  }function nb(a, b, d, e) {
    a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0;f = e;g = d;h = f + 36 | 0;do {
      c[f >> 2] = c[g >> 2];f = f + 4 | 0;g = g + 4 | 0;
    } while ((f | 0) < (h | 0));Va(d, e, a);_a(e, 0 - (c[a + 180 >> 2] | 0) | 0, a);Va(d, e, a);Ya(e, a + 184 | 0);Wa(e, a);if ((c[e >> 2] ^ b & 255) & 1 | 0) Ra(a, e, e);return;
  }function ob(b, c) {
    b = b | 0;c = c | 0;var d = 0,
        e = 0;e = i;i = i + 32 | 0;d = e;switch (a[b >> 0] | 0) {case 4:
        {
          Eb(b, 65, d);break;
        }case 0:
        {
          Eb(b, 1, d);break;
        }default:
        Eb(b, 33, d);}Ab(d, 32, c);i = e;return;
  }function pb(a, b, c, d) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;e = i;i = i + 48 | 0;g = e;f = Lb(b) | 0;h = Lb(b) | 0;Mb(b, g);ob(a, g + h | 0);wb(g, f + 20 | 0, c, d) | 0;i = e;return;
  }function qb(b, c, e) {
    b = b | 0;c = c | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        j = 0;j = i;i = i + 128 | 0;h = j;f = h;g = f + 128 | 0;do {
      a[f >> 0] = 0;f = f + 1 | 0;
    } while ((f | 0) < (g | 0));if (e >>> 0 > 128) {
      Jb(c, e, h);c = 0;
    } else {
      tc(h | 0, c | 0, e | 0) | 0;c = 0;
    }do {
      g = h + c | 0;f = d[g >> 0] | 0;a[b + c >> 0] = f ^ 92;a[g >> 0] = f ^ 54;c = c + 1 | 0;
    } while ((c | 0) != 128);b = b + 128 | 0;Fb(b);Hb(b, h, 128);i = j;return;
  }function rb(a, b) {
    a = a | 0;b = b | 0;var c = 0,
        d = 0,
        e = 0;c = i;i = i + 64 | 0;e = c;d = a + 128 | 0;Ib(d, e);Fb(d);Hb(d, a, 128);Hb(d, e, 64);Ib(d, b);lc(a | 0, 0, 336) | 0;i = c;return;
  }function sb(a, b, c, d, e) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0;f = i;i = i + 336 | 0;g = f;qb(g, a, b);Hb(g + 128 | 0, c, d);rb(g, e);i = f;return;
  }function tb(b, d, e, f, g, h) {
    b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;var j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0;r = i;i = i + 144 | 0;o = r + 104 | 0;p = r + 40 | 0;q = r;if ((f | 0) < 0) f = 0;else {
      a[o >> 0] = c[d + 36 >> 2] & 1 | 2;n = o + 1 | 0;Ga(d, n);Ea(o + 33 | 0, f);f = b + 108 | 0;j = p + 32 | 0;while (1) {
        sb(e, 32, o, 37, p);Fa(p, q);if (Ja(q, f) | 0 ? (kb(b, q, g), ab(b, d, g), (bb(g) | 0) == 0) : 0) break;a[o >> 0] = 1;k = n;l = j;m = k + 32 | 0;do {
          a[k >> 0] = a[l >> 0] | 0;k = k + 1 | 0;l = l + 1 | 0;
        } while ((k | 0) < (m | 0));
      }if (h | 0) {
        k = h;l = j;m = k + 32 | 0;do {
          a[k >> 0] = a[l >> 0] | 0;k = k + 1 | 0;l = l + 1 | 0;
        } while ((k | 0) < (m | 0));
      }k = o;m = k + 37 | 0;do {
        a[k >> 0] = 0;k = k + 1 | 0;
      } while ((k | 0) < (m | 0));k = p;m = k + 64 | 0;do {
        a[k >> 0] = 0;k = k + 1 | 0;
      } while ((k | 0) < (m | 0));k = q;m = k + 36 | 0;do {
        c[k >> 2] = 0;k = k + 4 | 0;
      } while ((k | 0) < (m | 0));f = 1;
    }i = r;return f | 0;
  }function ub(b, d, e, f, g, h, j) {
    b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0;n = i;i = i + 192 | 0;l = n + 152 | 0;o = n;m = n + 120 | 0;k = n + 72 | 0;tb(712, b, d, e, o, 0) | 0;a[l >> 0] = c[o + 36 >> 2] & 1 | 2;Ga(o, l + 1 | 0);if (j) {
      b = Lb(f) | 0;a[m >> 0] = 0;a[m + 1 >> 0] = 20;ob(l, m + 2 | 0);Eb(m, 22, k);Mb(f, m);Ab(k, 32, m + b | 0);b = (wb(m, b + 20 | 0, g, 54) | 0) != 0 & 1;
    } else {
      pb(l, f, g, h);b = 1;
    }i = n;return b | 0;
  }function vb(b, e, f, g) {
    b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0;q = i;a: do {
      if ((g | 0) > 0) {
        h = 0;do {
          if (a[f + h >> 0] | 0) break a;h = h + 1 | 0;
        } while ((h | 0) < (g | 0));
      } else h = 0;
    } while (0);o = (((g - h | 0) * 138 | 0) >>> 0) / 100 | 0;n = o + 1 | 0;p = i;i = i + ((1 * n | 0) + 15 & -16) | 0;lc(p | 0, 0, n | 0) | 0;if ((h | 0) < (g | 0)) {
      j = o;m = h;do {
        k = a[f + m >> 0] | 0;if ((o | 0) > (j | 0) | k << 24 >> 24 != 0) {
          k = k & 255;l = o;while (1) {
            r = p + l | 0;k = (d[r >> 0] << 8) + k | 0;a[r >> 0] = (k | 0) % 58 | 0;l = l + -1 | 0;if ((l | 0) > (j | 0) | (k + 57 | 0) >>> 0 > 114) k = (k | 0) / 58 | 0;else {
              j = l;break;
            }
          }
        } else j = o;m = m + 1 | 0;
      } while ((m | 0) != (g | 0));j = 0;
    } else j = 0;while (1) {
      if (a[p + j >> 0] | 0) break;k = j + 1 | 0;if ((j | 0) < (o | 0)) j = k;else {
        j = k;break;
      }
    }k = n + h - j | 0;if ((c[e >> 2] | 0) >>> 0 > k >>> 0) {
      if (!h) h = 0;else lc(b | 0, 49, h | 0) | 0;if ((j | 0) <= (o | 0)) while (1) {
        a[b + h >> 0] = a[38674 + (d[p + j >> 0] | 0) >> 0] | 0;h = h + 1 | 0;if ((j | 0) < (o | 0)) j = j + 1 | 0;else break;
      }a[b + h >> 0] = 0;j = 1;
    } else {
      j = 0;h = k;
    }c[e >> 2] = h + 1;i = q;return j | 0;
  }function wb(a, b, d, e) {
    a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0;g = i;i = i + 16 | 0;f = g;if ((b | 0) > 128) a = 0;else {
      j = b + 32 | 0;h = ia() | 0;k = i;i = i + ((1 * j | 0) + 15 & -16) | 0;l = k + b | 0;tc(k | 0, a | 0, b | 0) | 0;Eb(a, b, l);Eb(l, 32, l);c[f >> 2] = e;a = vb(d, f, k, b + 4 | 0) | 0;lc(k | 0, 0, j | 0) | 0;a = a ? c[f >> 2] | 0 : 0;oa(h | 0);
    }i = g;return a | 0;
  }function xb(a, b) {
    a = a | 0;b = b | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0,
        v = 0,
        w = 0,
        x = 0,
        y = 0,
        z = 0,
        A = 0,
        B = 0,
        C = 0,
        D = 0,
        E = 0,
        F = 0,
        G = 0,
        H = 0,
        I = 0,
        J = 0;s = (d[b + 1 >> 0] | 0) << 8 | (d[b >> 0] | 0) | (d[b + 2 >> 0] | 0) << 16 | (d[b + 3 >> 0] | 0) << 24;D = (d[b + 5 >> 0] | 0) << 8 | (d[b + 4 >> 0] | 0) | (d[b + 6 >> 0] | 0) << 16 | (d[b + 7 >> 0] | 0) << 24;v = (d[b + 9 >> 0] | 0) << 8 | (d[b + 8 >> 0] | 0) | (d[b + 10 >> 0] | 0) << 16 | (d[b + 11 >> 0] | 0) << 24;f = (d[b + 13 >> 0] | 0) << 8 | (d[b + 12 >> 0] | 0) | (d[b + 14 >> 0] | 0) << 16 | (d[b + 15 >> 0] | 0) << 24;x = (d[b + 17 >> 0] | 0) << 8 | (d[b + 16 >> 0] | 0) | (d[b + 18 >> 0] | 0) << 16 | (d[b + 19 >> 0] | 0) << 24;t = (d[b + 21 >> 0] | 0) << 8 | (d[b + 20 >> 0] | 0) | (d[b + 22 >> 0] | 0) << 16 | (d[b + 23 >> 0] | 0) << 24;y = (d[b + 25 >> 0] | 0) << 8 | (d[b + 24 >> 0] | 0) | (d[b + 26 >> 0] | 0) << 16 | (d[b + 27 >> 0] | 0) << 24;z = (d[b + 29 >> 0] | 0) << 8 | (d[b + 28 >> 0] | 0) | (d[b + 30 >> 0] | 0) << 16 | (d[b + 31 >> 0] | 0) << 24;B = (d[b + 33 >> 0] | 0) << 8 | (d[b + 32 >> 0] | 0) | (d[b + 34 >> 0] | 0) << 16 | (d[b + 35 >> 0] | 0) << 24;i = (d[b + 37 >> 0] | 0) << 8 | (d[b + 36 >> 0] | 0) | (d[b + 38 >> 0] | 0) << 16 | (d[b + 39 >> 0] | 0) << 24;F = (d[b + 41 >> 0] | 0) << 8 | (d[b + 40 >> 0] | 0) | (d[b + 42 >> 0] | 0) << 16 | (d[b + 43 >> 0] | 0) << 24;l = (d[b + 45 >> 0] | 0) << 8 | (d[b + 44 >> 0] | 0) | (d[b + 46 >> 0] | 0) << 16 | (d[b + 47 >> 0] | 0) << 24;H = (d[b + 49 >> 0] | 0) << 8 | (d[b + 48 >> 0] | 0) | (d[b + 50 >> 0] | 0) << 16 | (d[b + 51 >> 0] | 0) << 24;u = (d[b + 53 >> 0] | 0) << 8 | (d[b + 52 >> 0] | 0) | (d[b + 54 >> 0] | 0) << 16 | (d[b + 55 >> 0] | 0) << 24;m = (d[b + 57 >> 0] | 0) << 8 | (d[b + 56 >> 0] | 0) | (d[b + 58 >> 0] | 0) << 16 | (d[b + 59 >> 0] | 0) << 24;w = (d[b + 61 >> 0] | 0) << 8 | (d[b + 60 >> 0] | 0) | (d[b + 62 >> 0] | 0) << 16 | (d[b + 63 >> 0] | 0) << 24;b = a + 8 | 0;A = c[b >> 2] | 0;p = a + 12 | 0;e = c[p >> 2] | 0;n = a + 16 | 0;r = c[n >> 2] | 0;k = a + 20 | 0;I = c[k >> 2] | 0;g = a + 24 | 0;E = c[g >> 2] | 0;j = A + s + (r ^ e ^ I) | 0;j = (j << 11 | j >>> 21) + E | 0;C = r << 10 | r >>> 22;A = t + 1352829926 + A + ((r | ~I) ^ e) | 0;A = (A << 8 | A >>> 24) + E | 0;o = E + D + (C ^ e ^ j) | 0;o = (o << 14 | o >>> 18) + I | 0;G = e << 10 | e >>> 22;E = m + 1352829926 + E + (A ^ (e | ~C)) | 0;E = (E << 9 | E >>> 23) + I | 0;J = I + v + (j ^ G ^ o) | 0;J = (J << 15 | J >>> 17) + C | 0;j = j << 10 | j >>> 22;I = z + 1352829926 + I + (E ^ (A | ~G)) | 0;I = (I << 9 | I >>> 23) + C | 0;A = A << 10 | A >>> 22;a = C + f + (o ^ j ^ J) | 0;a = (a << 12 | a >>> 20) + G | 0;o = o << 10 | o >>> 22;C = s + 1352829926 + C + (I ^ (E | ~A)) | 0;C = (C << 11 | C >>> 21) + G | 0;E = E << 10 | E >>> 22;h = G + x + (J ^ o ^ a) | 0;h = (h << 5 | h >>> 27) + j | 0;J = J << 10 | J >>> 22;G = i + 1352829926 + G + (C ^ (I | ~E)) | 0;G = (G << 13 | G >>> 19) + A | 0;I = I << 10 | I >>> 22;j = j + t + (a ^ J ^ h) | 0;j = (j << 8 | j >>> 24) + o | 0;a = a << 10 | a >>> 22;A = v + 1352829926 + A + (G ^ (C | ~I)) | 0;A = (A << 15 | A >>> 17) + E | 0;C = C << 10 | C >>> 22;o = o + y + (h ^ a ^ j) | 0;o = (o << 7 | o >>> 25) + J | 0;h = h << 10 | h >>> 22;E = l + 1352829926 + E + (A ^ (G | ~C)) | 0;E = (E << 15 | E >>> 17) + I | 0;G = G << 10 | G >>> 22;J = J + z + (j ^ h ^ o) | 0;J = (J << 9 | J >>> 23) + a | 0;j = j << 10 | j >>> 22;I = x + 1352829926 + I + (E ^ (A | ~G)) | 0;I = (I << 5 | I >>> 27) + C | 0;A = A << 10 | A >>> 22;a = a + B + (o ^ j ^ J) | 0;a = (a << 11 | a >>> 21) + h | 0;o = o << 10 | o >>> 22;C = u + 1352829926 + C + (I ^ (E | ~A)) | 0;C = (C << 7 | C >>> 25) + G | 0;E = E << 10 | E >>> 22;h = h + i + (J ^ o ^ a) | 0;h = (h << 13 | h >>> 19) + j | 0;J = J << 10 | J >>> 22;G = y + 1352829926 + G + (C ^ (I | ~E)) | 0;G = (G << 7 | G >>> 25) + A | 0;I = I << 10 | I >>> 22;j = j + F + (a ^ J ^ h) | 0;j = (j << 14 | j >>> 18) + o | 0;a = a << 10 | a >>> 22;A = w + 1352829926 + A + (G ^ (C | ~I)) | 0;A = (A << 8 | A >>> 24) + E | 0;C = C << 10 | C >>> 22;o = o + l + (h ^ a ^ j) | 0;o = (o << 15 | o >>> 17) + J | 0;h = h << 10 | h >>> 22;E = B + 1352829926 + E + (A ^ (G | ~C)) | 0;E = (E << 11 | E >>> 21) + I | 0;G = G << 10 | G >>> 22;J = J + H + (j ^ h ^ o) | 0;J = (J << 6 | J >>> 26) + a | 0;j = j << 10 | j >>> 22;I = D + 1352829926 + I + (E ^ (A | ~G)) | 0;I = (I << 14 | I >>> 18) + C | 0;A = A << 10 | A >>> 22;a = a + u + (o ^ j ^ J) | 0;a = (a << 7 | a >>> 25) + h | 0;o = o << 10 | o >>> 22;C = F + 1352829926 + C + (I ^ (E | ~A)) | 0;C = (C << 14 | C >>> 18) + G | 0;E = E << 10 | E >>> 22;h = h + m + (J ^ o ^ a) | 0;h = (h << 9 | h >>> 23) + j | 0;J = J << 10 | J >>> 22;G = f + 1352829926 + G + (C ^ (I | ~E)) | 0;G = (G << 12 | G >>> 20) + A | 0;I = I << 10 | I >>> 22;j = j + w + (a ^ J ^ h) | 0;j = (j << 8 | j >>> 24) + o | 0;a = a << 10 | a >>> 22;A = H + 1352829926 + A + (G ^ (C | ~I)) | 0;A = (A << 6 | A >>> 26) + E | 0;C = C << 10 | C >>> 22;o = z + 1518500249 + o + (j & h | a & ~j) | 0;o = (o << 7 | o >>> 25) + J | 0;h = h << 10 | h >>> 22;E = y + 1548603684 + E + (A & C | G & ~C) | 0;E = (E << 9 | E >>> 23) + I | 0;G = G << 10 | G >>> 22;J = x + 1518500249 + J + (o & j | h & ~o) | 0;J = (J << 6 | J >>> 26) + a | 0;j = j << 10 | j >>> 22;I = l + 1548603684 + I + (E & G | A & ~G) | 0;I = (I << 13 | I >>> 19) + C | 0;A = A << 10 | A >>> 22;a = u + 1518500249 + a + (J & o | j & ~J) | 0;a = (a << 8 | a >>> 24) + h | 0;o = o << 10 | o >>> 22;C = f + 1548603684 + C + (I & A | E & ~A) | 0;C = (C << 15 | C >>> 17) + G | 0;E = E << 10 | E >>> 22;h = D + 1518500249 + h + (a & J | o & ~a) | 0;h = (h << 13 | h >>> 19) + j | 0;J = J << 10 | J >>> 22;G = z + 1548603684 + G + (C & E | I & ~E) | 0;G = (G << 7 | G >>> 25) + A | 0;I = I << 10 | I >>> 22;j = F + 1518500249 + j + (h & a | J & ~h) | 0;j = (j << 11 | j >>> 21) + o | 0;a = a << 10 | a >>> 22;A = s + 1548603684 + A + (G & I | C & ~I) | 0;A = (A << 12 | A >>> 20) + E | 0;C = C << 10 | C >>> 22;o = y + 1518500249 + o + (j & h | a & ~j) | 0;o = (o << 9 | o >>> 23) + J | 0;h = h << 10 | h >>> 22;E = u + 1548603684 + E + (A & C | G & ~C) | 0;E = (E << 8 | E >>> 24) + I | 0;G = G << 10 | G >>> 22;J = w + 1518500249 + J + (o & j | h & ~o) | 0;J = (J << 7 | J >>> 25) + a | 0;j = j << 10 | j >>> 22;I = t + 1548603684 + I + (E & G | A & ~G) | 0;I = (I << 9 | I >>> 23) + C | 0;A = A << 10 | A >>> 22;a = f + 1518500249 + a + (J & o | j & ~J) | 0;a = (a << 15 | a >>> 17) + h | 0;o = o << 10 | o >>> 22;C = F + 1548603684 + C + (I & A | E & ~A) | 0;C = (C << 11 | C >>> 21) + G | 0;E = E << 10 | E >>> 22;h = H + 1518500249 + h + (a & J | o & ~a) | 0;h = (h << 7 | h >>> 25) + j | 0;J = J << 10 | J >>> 22;G = m + 1548603684 + G + (C & E | I & ~E) | 0;G = (G << 7 | G >>> 25) + A | 0;I = I << 10 | I >>> 22;j = s + 1518500249 + j + (h & a | J & ~h) | 0;j = (j << 12 | j >>> 20) + o | 0;a = a << 10 | a >>> 22;A = w + 1548603684 + A + (G & I | C & ~I) | 0;A = (A << 7 | A >>> 25) + E | 0;C = C << 10 | C >>> 22;o = i + 1518500249 + o + (j & h | a & ~j) | 0;o = (o << 15 | o >>> 17) + J | 0;h = h << 10 | h >>> 22;E = B + 1548603684 + E + (A & C | G & ~C) | 0;E = (E << 12 | E >>> 20) + I | 0;G = G << 10 | G >>> 22;J = t + 1518500249 + J + (o & j | h & ~o) | 0;J = (J << 9 | J >>> 23) + a | 0;j = j << 10 | j >>> 22;I = H + 1548603684 + I + (E & G | A & ~G) | 0;I = (I << 7 | I >>> 25) + C | 0;A = A << 10 | A >>> 22;a = v + 1518500249 + a + (J & o | j & ~J) | 0;a = (a << 11 | a >>> 21) + h | 0;o = o << 10 | o >>> 22;C = x + 1548603684 + C + (I & A | E & ~A) | 0;C = (C << 6 | C >>> 26) + G | 0;E = E << 10 | E >>> 22;h = m + 1518500249 + h + (a & J | o & ~a) | 0;h = (h << 7 | h >>> 25) + j | 0;J = J << 10 | J >>> 22;G = i + 1548603684 + G + (C & E | I & ~E) | 0;G = (G << 15 | G >>> 17) + A | 0;I = I << 10 | I >>> 22;j = l + 1518500249 + j + (h & a | J & ~h) | 0;j = (j << 13 | j >>> 19) + o | 0;a = a << 10 | a >>> 22;A = D + 1548603684 + A + (G & I | C & ~I) | 0;A = (A << 13 | A >>> 19) + E | 0;C = C << 10 | C >>> 22;q = ~j;o = B + 1518500249 + o + (j & h | a & q) | 0;o = (o << 12 | o >>> 20) + J | 0;h = h << 10 | h >>> 22;E = v + 1548603684 + E + (A & C | G & ~C) | 0;E = (E << 11 | E >>> 21) + I | 0;G = G << 10 | G >>> 22;q = f + 1859775393 + J + ((o | q) ^ h) | 0;q = (q << 11 | q >>> 21) + a | 0;j = j << 10 | j >>> 22;I = w + 1836072691 + I + ((E | ~A) ^ G) | 0;I = (I << 9 | I >>> 23) + C | 0;A = A << 10 | A >>> 22;a = F + 1859775393 + a + ((q | ~o) ^ j) | 0;a = (a << 13 | a >>> 19) + h | 0;o = o << 10 | o >>> 22;C = t + 1836072691 + C + ((I | ~E) ^ A) | 0;C = (C << 7 | C >>> 25) + G | 0;E = E << 10 | E >>> 22;h = m + 1859775393 + h + ((a | ~q) ^ o) | 0;h = (h << 6 | h >>> 26) + j | 0;q = q << 10 | q >>> 22;G = D + 1836072691 + G + ((C | ~I) ^ E) | 0;G = (G << 15 | G >>> 17) + A | 0;I = I << 10 | I >>> 22;j = x + 1859775393 + j + ((h | ~a) ^ q) | 0;j = (j << 7 | j >>> 25) + o | 0;a = a << 10 | a >>> 22;A = f + 1836072691 + A + ((G | ~C) ^ I) | 0;A = (A << 11 | A >>> 21) + E | 0;C = C << 10 | C >>> 22;o = i + 1859775393 + o + ((j | ~h) ^ a) | 0;o = (o << 14 | o >>> 18) + q | 0;h = h << 10 | h >>> 22;E = z + 1836072691 + E + ((A | ~G) ^ C) | 0;E = (E << 8 | E >>> 24) + I | 0;G = G << 10 | G >>> 22;q = w + 1859775393 + q + ((o | ~j) ^ h) | 0;q = (q << 9 | q >>> 23) + a | 0;j = j << 10 | j >>> 22;I = m + 1836072691 + I + ((E | ~A) ^ G) | 0;I = (I << 6 | I >>> 26) + C | 0;A = A << 10 | A >>> 22;a = B + 1859775393 + a + ((q | ~o) ^ j) | 0;a = (a << 13 | a >>> 19) + h | 0;o = o << 10 | o >>> 22;C = y + 1836072691 + C + ((I | ~E) ^ A) | 0;C = (C << 6 | C >>> 26) + G | 0;E = E << 10 | E >>> 22;h = D + 1859775393 + h + ((a | ~q) ^ o) | 0;h = (h << 15 | h >>> 17) + j | 0;q = q << 10 | q >>> 22;G = i + 1836072691 + G + ((C | ~I) ^ E) | 0;G = (G << 14 | G >>> 18) + A | 0;I = I << 10 | I >>> 22;j = v + 1859775393 + j + ((h | ~a) ^ q) | 0;j = (j << 14 | j >>> 18) + o | 0;a = a << 10 | a >>> 22;A = l + 1836072691 + A + ((G | ~C) ^ I) | 0;A = (A << 12 | A >>> 20) + E | 0;C = C << 10 | C >>> 22;o = z + 1859775393 + o + ((j | ~h) ^ a) | 0;o = (o << 8 | o >>> 24) + q | 0;h = h << 10 | h >>> 22;E = B + 1836072691 + E + ((A | ~G) ^ C) | 0;E = (E << 13 | E >>> 19) + I | 0;G = G << 10 | G >>> 22;q = s + 1859775393 + q + ((o | ~j) ^ h) | 0;q = (q << 13 | q >>> 19) + a | 0;j = j << 10 | j >>> 22;I = H + 1836072691 + I + ((E | ~A) ^ G) | 0;I = (I << 5 | I >>> 27) + C | 0;A = A << 10 | A >>> 22;a = y + 1859775393 + a + ((q | ~o) ^ j) | 0;a = (a << 6 | a >>> 26) + h | 0;o = o << 10 | o >>> 22;C = v + 1836072691 + C + ((I | ~E) ^ A) | 0;C = (C << 14 | C >>> 18) + G | 0;E = E << 10 | E >>> 22;h = u + 1859775393 + h + ((a | ~q) ^ o) | 0;h = (h << 5 | h >>> 27) + j | 0;q = q << 10 | q >>> 22;G = F + 1836072691 + G + ((C | ~I) ^ E) | 0;G = (G << 13 | G >>> 19) + A | 0;I = I << 10 | I >>> 22;j = l + 1859775393 + j + ((h | ~a) ^ q) | 0;j = (j << 12 | j >>> 20) + o | 0;a = a << 10 | a >>> 22;A = s + 1836072691 + A + ((G | ~C) ^ I) | 0;A = (A << 13 | A >>> 19) + E | 0;C = C << 10 | C >>> 22;o = t + 1859775393 + o + ((j | ~h) ^ a) | 0;o = (o << 7 | o >>> 25) + q | 0;h = h << 10 | h >>> 22;E = x + 1836072691 + E + ((A | ~G) ^ C) | 0;E = (E << 7 | E >>> 25) + I | 0;G = G << 10 | G >>> 22;q = H + 1859775393 + q + ((o | ~j) ^ h) | 0;q = (q << 5 | q >>> 27) + a | 0;j = j << 10 | j >>> 22;I = u + 1836072691 + I + ((E | ~A) ^ G) | 0;I = (I << 5 | I >>> 27) + C | 0;A = A << 10 | A >>> 22;a = D + -1894007588 + a + (q & j | o & ~j) | 0;a = (a << 11 | a >>> 21) + h | 0;o = o << 10 | o >>> 22;C = B + 2053994217 + C + (I & E | A & ~I) | 0;C = (C << 15 | C >>> 17) + G | 0;E = E << 10 | E >>> 22;h = i + -1894007588 + h + (a & o | q & ~o) | 0;h = (h << 12 | h >>> 20) + j | 0;q = q << 10 | q >>> 22;G = y + 2053994217 + G + (C & I | E & ~C) | 0;G = (G << 5 | G >>> 27) + A | 0;I = I << 10 | I >>> 22;j = l + -1894007588 + j + (h & q | a & ~q) | 0;j = (j << 14 | j >>> 18) + o | 0;a = a << 10 | a >>> 22;A = x + 2053994217 + A + (G & C | I & ~G) | 0;A = (A << 8 | A >>> 24) + E | 0;C = C << 10 | C >>> 22;o = F + -1894007588 + o + (j & a | h & ~a) | 0;o = (o << 15 | o >>> 17) + q | 0;h = h << 10 | h >>> 22;E = D + 2053994217 + E + (A & G | C & ~A) | 0;E = (E << 11 | E >>> 21) + I | 0;G = G << 10 | G >>> 22;q = s + -1894007588 + q + (o & h | j & ~h) | 0;q = (q << 14 | q >>> 18) + a | 0;j = j << 10 | j >>> 22;I = f + 2053994217 + I + (E & A | G & ~E) | 0;I = (I << 14 | I >>> 18) + C | 0;A = A << 10 | A >>> 22;a = B + -1894007588 + a + (q & j | o & ~j) | 0;a = (a << 15 | a >>> 17) + h | 0;o = o << 10 | o >>> 22;C = l + 2053994217 + C + (I & E | A & ~I) | 0;C = (C << 14 | C >>> 18) + G | 0;E = E << 10 | E >>> 22;h = H + -1894007588 + h + (a & o | q & ~o) | 0;h = (h << 9 | h >>> 23) + j | 0;q = q << 10 | q >>> 22;G = w + 2053994217 + G + (C & I | E & ~C) | 0;G = (G << 6 | G >>> 26) + A | 0;I = I << 10 | I >>> 22;j = x + -1894007588 + j + (h & q | a & ~q) | 0;j = (j << 8 | j >>> 24) + o | 0;a = a << 10 | a >>> 22;A = s + 2053994217 + A + (G & C | I & ~G) | 0;A = (A << 14 | A >>> 18) + E | 0;C = C << 10 | C >>> 22;o = u + -1894007588 + o + (j & a | h & ~a) | 0;o = (o << 9 | o >>> 23) + q | 0;h = h << 10 | h >>> 22;E = t + 2053994217 + E + (A & G | C & ~A) | 0;E = (E << 6 | E >>> 26) + I | 0;G = G << 10 | G >>> 22;q = f + -1894007588 + q + (o & h | j & ~h) | 0;q = (q << 14 | q >>> 18) + a | 0;j = j << 10 | j >>> 22;I = H + 2053994217 + I + (E & A | G & ~E) | 0;I = (I << 9 | I >>> 23) + C | 0;A = A << 10 | A >>> 22;a = z + -1894007588 + a + (q & j | o & ~j) | 0;a = (a << 5 | a >>> 27) + h | 0;o = o << 10 | o >>> 22;C = v + 2053994217 + C + (I & E | A & ~I) | 0;C = (C << 12 | C >>> 20) + G | 0;E = E << 10 | E >>> 22;h = w + -1894007588 + h + (a & o | q & ~o) | 0;h = (h << 6 | h >>> 26) + j | 0;q = q << 10 | q >>> 22;G = u + 2053994217 + G + (C & I | E & ~C) | 0;G = (G << 9 | G >>> 23) + A | 0;I = I << 10 | I >>> 22;j = m + -1894007588 + j + (h & q | a & ~q) | 0;j = (j << 8 | j >>> 24) + o | 0;a = a << 10 | a >>> 22;A = i + 2053994217 + A + (G & C | I & ~G) | 0;A = (A << 12 | A >>> 20) + E | 0;C = C << 10 | C >>> 22;o = t + -1894007588 + o + (j & a | h & ~a) | 0;o = (o << 6 | o >>> 26) + q | 0;h = h << 10 | h >>> 22;E = z + 2053994217 + E + (A & G | C & ~A) | 0;E = (E << 5 | E >>> 27) + I | 0;G = G << 10 | G >>> 22;q = y + -1894007588 + q + (o & h | j & ~h) | 0;q = (q << 5 | q >>> 27) + a | 0;j = j << 10 | j >>> 22;I = F + 2053994217 + I + (E & A | G & ~E) | 0;I = (I << 15 | I >>> 17) + C | 0;A = A << 10 | A >>> 22;a = v + -1894007588 + a + (q & j | o & ~j) | 0;a = (a << 12 | a >>> 20) + h | 0;o = o << 10 | o >>> 22;C = m + 2053994217 + C + (I & E | A & ~I) | 0;C = (C << 8 | C >>> 24) + G | 0;E = E << 10 | E >>> 22;h = x + -1454113458 + h + (a ^ (q | ~o)) | 0;h = (h << 9 | h >>> 23) + j | 0;q = q << 10 | q >>> 22;G = G + H + (I ^ E ^ C) | 0;G = (G << 8 | G >>> 24) + A | 0;I = I << 10 | I >>> 22;j = s + -1454113458 + j + (h ^ (a | ~q)) | 0;j = (j << 15 | j >>> 17) + o | 0;a = a << 10 | a >>> 22;A = A + w + (C ^ I ^ G) | 0;A = (A << 5 | A >>> 27) + E | 0;C = C << 10 | C >>> 22;o = t + -1454113458 + o + (j ^ (h | ~a)) | 0;o = (o << 5 | o >>> 27) + q | 0;h = h << 10 | h >>> 22;E = E + F + (G ^ C ^ A) | 0;E = (E << 12 | E >>> 20) + I | 0;G = G << 10 | G >>> 22;q = i + -1454113458 + q + (o ^ (j | ~h)) | 0;q = (q << 11 | q >>> 21) + a | 0;j = j << 10 | j >>> 22;x = I + x + (A ^ G ^ E) | 0;x = (x << 9 | x >>> 23) + C | 0;A = A << 10 | A >>> 22;a = z + -1454113458 + a + (q ^ (o | ~j)) | 0;a = (a << 6 | a >>> 26) + h | 0;o = o << 10 | o >>> 22;C = C + D + (E ^ A ^ x) | 0;C = (C << 12 | C >>> 20) + G | 0;E = E << 10 | E >>> 22;h = H + -1454113458 + h + (a ^ (q | ~o)) | 0;h = (h << 8 | h >>> 24) + j | 0;q = q << 10 | q >>> 22;t = G + t + (x ^ E ^ C) | 0;t = (t << 5 | t >>> 27) + A | 0;x = x << 10 | x >>> 22;j = v + -1454113458 + j + (h ^ (a | ~q)) | 0;j = (j << 13 | j >>> 19) + o | 0;a = a << 10 | a >>> 22;A = A + B + (C ^ x ^ t) | 0;A = (A << 14 | A >>> 18) + E | 0;C = C << 10 | C >>> 22;o = F + -1454113458 + o + (j ^ (h | ~a)) | 0;o = (o << 12 | o >>> 20) + q | 0;h = h << 10 | h >>> 22;z = E + z + (t ^ C ^ A) | 0;z = (z << 6 | z >>> 26) + x | 0;t = t << 10 | t >>> 22;q = m + -1454113458 + q + (o ^ (j | ~h)) | 0;q = (q << 5 | q >>> 27) + a | 0;j = j << 10 | j >>> 22;x = x + y + (A ^ t ^ z) | 0;x = (x << 8 | x >>> 24) + C | 0;A = A << 10 | A >>> 22;a = D + -1454113458 + a + (q ^ (o | ~j)) | 0;a = (a << 12 | a >>> 20) + h | 0;o = o << 10 | o >>> 22;v = C + v + (z ^ A ^ x) | 0;v = (v << 13 | v >>> 19) + t | 0;z = z << 10 | z >>> 22;h = f + -1454113458 + h + (a ^ (q | ~o)) | 0;h = (h << 13 | h >>> 19) + j | 0;q = q << 10 | q >>> 22;t = t + u + (x ^ z ^ v) | 0;t = (t << 6 | t >>> 26) + A | 0;x = x << 10 | x >>> 22;j = B + -1454113458 + j + (h ^ (a | ~q)) | 0;j = (j << 14 | j >>> 18) + o | 0;a = a << 10 | a >>> 22;m = A + m + (v ^ x ^ t) | 0;m = (m << 5 | m >>> 27) + z | 0;v = v << 10 | v >>> 22;o = l + -1454113458 + o + (j ^ (h | ~a)) | 0;o = (o << 11 | o >>> 21) + q | 0;h = h << 10 | h >>> 22;s = z + s + (t ^ v ^ m) | 0;s = (s << 15 | s >>> 17) + x | 0;t = t << 10 | t >>> 22;q = y + -1454113458 + q + (o ^ (j | ~h)) | 0;q = (q << 8 | q >>> 24) + a | 0;j = j << 10 | j >>> 22;f = x + f + (m ^ t ^ s) | 0;f = (f << 13 | f >>> 19) + v | 0;m = m << 10 | m >>> 22;a = w + -1454113458 + a + (q ^ (o | ~j)) | 0;a = (a << 5 | a >>> 27) + h | 0;o = o << 10 | o >>> 22;i = v + i + (s ^ m ^ f) | 0;i = (i << 11 | i >>> 21) + t | 0;s = s << 10 | s >>> 22;h = u + -1454113458 + h + (a ^ (q | ~o)) | 0;l = t + l + (f ^ s ^ i) | 0;c[p >> 2] = s + r + (q << 10 | q >>> 22);c[n >> 2] = m + (c[k >> 2] | 0) + o;c[k >> 2] = j + (c[g >> 2] | 0) + m + (l << 11 | l >>> 21);c[g >> 2] = j + (c[b >> 2] | 0) + i + (h << 6 | h >>> 26);c[b >> 2] = (f << 10 | f >>> 22) + e + a;return;
  }function yb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;if (d | 0) {
      h = c[a >> 2] | 0;e = h & 63;f = 64 - e | 0;h = h + d | 0;c[a >> 2] = h;if (h >>> 0 < d >>> 0) {
        h = a + 4 | 0;c[h >> 2] = (c[h >> 2] | 0) + 1;
      }if (!((e | 0) == 0 | f >>> 0 > d >>> 0)) {
        tc(a + 28 + e | 0, b | 0, f | 0) | 0;xb(a, a + 28 | 0);e = 0;b = b + f | 0;d = d - f | 0;
      }if (d >>> 0 > 63) {
        g = d + -64 | 0;h = g & -64;f = b + (h + 64) | 0;while (1) {
          xb(a, b);d = d + -64 | 0;if (d >>> 0 <= 63) break;else b = b + 64 | 0;
        }b = f;d = g - h | 0;
      }if (d | 0) tc(a + 28 + e | 0, b | 0, d | 0) | 0;
    }return;
  }function zb(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;e = i;i = i + 16 | 0;f = e;g = c[b >> 2] | 0;h = c[b + 4 >> 2] | 0;a[f >> 0] = g << 3;a[f + 1 >> 0] = g >>> 5;a[f + 2 >> 0] = g >>> 13;a[f + 3 >> 0] = g >>> 21;a[f + 4 >> 0] = h << 3 | g >>> 29;a[f + 5 >> 0] = h >>> 5;a[f + 6 >> 0] = h >>> 13;a[f + 7 >> 0] = h >>> 21;g = g & 63;yb(b, 38733, (g >>> 0 < 56 ? 56 : 120) - g | 0);yb(b, f, 8);f = b + 8 | 0;a[d >> 0] = c[f >> 2];a[d + 1 >> 0] = (c[f >> 2] | 0) >>> 8;a[d + 2 >> 0] = (c[f >> 2] | 0) >>> 16;a[d + 3 >> 0] = (c[f >> 2] | 0) >>> 24;f = b + 12 | 0;a[d + 4 >> 0] = c[f >> 2];a[d + 5 >> 0] = (c[f >> 2] | 0) >>> 8;a[d + 6 >> 0] = (c[f >> 2] | 0) >>> 16;a[d + 7 >> 0] = (c[f >> 2] | 0) >>> 24;f = b + 16 | 0;a[d + 8 >> 0] = c[f >> 2];a[d + 9 >> 0] = (c[f >> 2] | 0) >>> 8;a[d + 10 >> 0] = (c[f >> 2] | 0) >>> 16;a[d + 11 >> 0] = (c[f >> 2] | 0) >>> 24;f = b + 20 | 0;a[d + 12 >> 0] = c[f >> 2];a[d + 13 >> 0] = (c[f >> 2] | 0) >>> 8;a[d + 14 >> 0] = (c[f >> 2] | 0) >>> 16;a[d + 15 >> 0] = (c[f >> 2] | 0) >>> 24;b = b + 24 | 0;a[d + 16 >> 0] = c[b >> 2];a[d + 17 >> 0] = (c[b >> 2] | 0) >>> 8;a[d + 18 >> 0] = (c[b >> 2] | 0) >>> 16;a[d + 19 >> 0] = (c[b >> 2] | 0) >>> 24;i = e;return;
  }function Ab(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0;h = i;i = i + 96 | 0;e = h;f = e + 8 | 0;g = e;j = g + 92 | 0;do {
      c[g >> 2] = 0;g = g + 4 | 0;
    } while ((g | 0) < (j | 0));c[f >> 2] = 1732584193;c[e + 12 >> 2] = -271733879;c[e + 16 >> 2] = -1732584194;c[e + 20 >> 2] = 271733878;c[e + 24 >> 2] = -1009589776;yb(e, a, b);zb(e, d);i = h;return;
  }function Bb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0,
        v = 0,
        w = 0,
        x = 0,
        y = 0,
        z = 0,
        A = 0,
        B = 0,
        C = 0;y = i;i = i + 64 | 0;t = y;u = c[a >> 2] | 0;v = a + 4 | 0;w = a + 8 | 0;x = a + 12 | 0;q = a + 16 | 0;r = a + 20 | 0;s = a + 24 | 0;p = a + 28 | 0;g = 0;o = u;a = c[p >> 2] | 0;h = c[s >> 2] | 0;j = c[r >> 2] | 0;k = c[q >> 2] | 0;e = c[x >> 2] | 0;l = c[w >> 2] | 0;f = c[v >> 2] | 0;while (1) {
      n = ((k >>> 6 | k << 26) ^ (k >>> 11 | k << 21) ^ (k >>> 25 | k << 7)) + a + (h & ~k ^ j & k) + (c[37828 + (g << 2) >> 2] | 0) | 0;a = c[b >> 2] | 0;c[t + (g << 2) >> 2] = a;a = n + a | 0;e = a + e | 0;a = ((o >>> 2 | o << 30) ^ (o >>> 13 | o << 19) ^ (o >>> 22 | o << 10)) + (o & (l ^ f) ^ l & f) + a | 0;g = g + 1 | 0;if ((g | 0) == 16) {
        n = 16;m = a;g = e;a = l;e = o;break;
      } else {
        C = o;B = f;A = l;z = k;m = j;n = h;b = b + 4 | 0;o = a;k = e;f = C;l = B;e = A;j = z;h = m;a = n;
      }
    }while (1) {
      A = n;n = n + 1 | 0;z = c[t + ((n & 15) << 2) >> 2] | 0;b = c[t + ((A + 14 & 15) << 2) >> 2] | 0;C = ((g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7)) + h + (j & ~g ^ k & g) + (c[37828 + (A << 2) >> 2] | 0) | 0;B = t + ((A & 15) << 2) | 0;b = ((z >>> 18 | z << 14) ^ z >>> 3 ^ (z >>> 7 | z << 25)) + (c[t + ((A + 9 & 15) << 2) >> 2] | 0) + (c[B >> 2] | 0) + ((b >>> 19 | b << 13) ^ b >>> 10 ^ (b >>> 17 | b << 15)) | 0;c[B >> 2] = b;b = C + b | 0;a = b + a | 0;b = ((m >>> 2 | m << 30) ^ (m >>> 13 | m << 19) ^ (m >>> 22 | m << 10)) + (m & (f ^ e) ^ f & e) + b | 0;if ((n | 0) == 64) break;else {
        o = m;z = e;A = f;B = g;C = k;h = j;m = b;g = a;e = o;f = z;a = A;k = B;j = C;
      }
    }c[d >> 2] = u + b;c[d + 4 >> 2] = (c[v >> 2] | 0) + m;c[d + 8 >> 2] = (c[w >> 2] | 0) + e;c[d + 12 >> 2] = (c[x >> 2] | 0) + f;c[d + 16 >> 2] = (c[q >> 2] | 0) + a;c[d + 20 >> 2] = (c[r >> 2] | 0) + g;c[d + 24 >> 2] = (c[s >> 2] | 0) + k;c[d + 28 >> 2] = (c[p >> 2] | 0) + j;i = y;return;
  }function Cb(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0;do {
      if (e | 0) {
        n = b + 32 | 0;g = n;h = c[g >> 2] | 0;g = c[g + 4 >> 2] | 0;f = mc(h | 0, g | 0, 3) | 0;f = f & 63;if (f) {
          i = 64 - f | 0;j = b + 40 | 0;f = j + f | 0;if (i >>> 0 > e >>> 0) {
            tc(f | 0, d | 0, e | 0) | 0;b = qc(h | 0, g | 0, e << 3 | 0, 0) | 0;c[n >> 2] = b;c[n + 4 >> 2] = C;break;
          }tc(f | 0, d | 0, i | 0) | 0;m = qc(h | 0, g | 0, i << 3 | 0, 0) | 0;f = n;c[f >> 2] = m;c[f + 4 >> 2] = C;e = e - i | 0;f = 0;do {
            m = b + 40 + (f << 2) | 0;c[m >> 2] = sc(c[m >> 2] | 0) | 0;f = f + 1 | 0;
          } while ((f | 0) != 16);Bb(b, j, b);d = d + i | 0;
        }if (e >>> 0 > 63) {
          j = b + 40 | 0;l = e + -64 | 0;m = l & -64;k = m + 64 | 0;i = d;while (1) {
            f = j;g = i;h = f + 64 | 0;do {
              a[f >> 0] = a[g >> 0] | 0;f = f + 1 | 0;g = g + 1 | 0;
            } while ((f | 0) < (h | 0));f = 0;do {
              h = b + 40 + (f << 2) | 0;c[h >> 2] = sc(c[h >> 2] | 0) | 0;f = f + 1 | 0;
            } while ((f | 0) != 16);Bb(b, j, b);g = n;g = qc(c[g >> 2] | 0, c[g + 4 >> 2] | 0, 512, 0) | 0;h = n;c[h >> 2] = g;c[h + 4 >> 2] = C;e = e + -64 | 0;if (e >>> 0 <= 63) break;else i = i + 64 | 0;
          }d = d + k | 0;e = l - m | 0;
        }if (e | 0) {
          tc(b + 40 | 0, d | 0, e | 0) | 0;b = n;b = qc(c[b >> 2] | 0, c[b + 4 >> 2] | 0, e << 3 | 0, 0) | 0;c[n >> 2] = b;c[n + 4 >> 2] = C;
        }
      }
    } while (0);return;
  }function Db(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;if (d) {
      h = b + 32 | 0;f = h;f = mc(c[f >> 2] | 0, c[f + 4 >> 2] | 0, 3) | 0;f = f & 63;e = f + 1 | 0;g = b + 40 | 0;a[g + f >> 0] = -128;if (e >>> 0 > 56) {
        lc(g + e | 0, 0, f ^ 63 | 0) | 0;e = 0;do {
          f = b + 40 + (e << 2) | 0;c[f >> 2] = sc(c[f >> 2] | 0) | 0;e = e + 1 | 0;
        } while ((e | 0) != 16);Bb(b, g, b);e = 0;
      }lc(g + e | 0, 0, 56 - e | 0) | 0;e = 0;do {
        f = b + 40 + (e << 2) | 0;c[f >> 2] = sc(c[f >> 2] | 0) | 0;e = e + 1 | 0;
      } while ((e | 0) != 14);e = c[h >> 2] | 0;c[b + 96 >> 2] = c[h + 4 >> 2];c[b + 100 >> 2] = e;Bb(b, g, b);e = 0;do {
        h = b + (e << 2) | 0;c[h >> 2] = sc(c[h >> 2] | 0) | 0;e = e + 1 | 0;
      } while ((e | 0) != 8);e = d;f = b;g = e + 32 | 0;do {
        a[e >> 0] = a[f >> 0] | 0;e = e + 1 | 0;f = f + 1 | 0;
      } while ((e | 0) < (g | 0));
    }e = b;g = e + 104 | 0;do {
      c[e >> 2] = 0;e = e + 4 | 0;
    } while ((e | 0) < (g | 0));return;
  }function Eb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;g = i;i = i + 112 | 0;e = g;c[e >> 2] = c[9449];c[e + 4 >> 2] = c[9450];c[e + 8 >> 2] = c[9451];c[e + 12 >> 2] = c[9452];c[e + 16 >> 2] = c[9453];c[e + 20 >> 2] = c[9454];c[e + 24 >> 2] = c[9455];c[e + 28 >> 2] = c[9456];f = e + 32 | 0;h = f + 72 | 0;do {
      c[f >> 2] = 0;f = f + 4 | 0;
    } while ((f | 0) < (h | 0));Cb(e, a, b);Db(e, d);i = g;return;
  }function Fb(a) {
    a = a | 0;var b = 0,
        d = 0,
        e = 0;if (a | 0) {
      b = a;d = 8;e = b + 64 | 0;do {
        c[b >> 2] = c[d >> 2];b = b + 4 | 0;d = d + 4 | 0;
      } while ((b | 0) < (e | 0));lc(a + 64 | 0, 0, 144) | 0;
    }return;
  }function Gb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0,
        v = 0,
        w = 0,
        x = 0,
        y = 0,
        z = 0,
        A = 0,
        B = 0,
        D = 0,
        E = 0,
        F = 0,
        G = 0,
        H = 0,
        I = 0,
        J = 0,
        K = 0,
        L = 0,
        M = 0,
        N = 0,
        O = 0,
        P = 0,
        Q = 0,
        R = 0,
        S = 0,
        T = 0,
        U = 0,
        V = 0,
        W = 0,
        X = 0,
        Y = 0,
        Z = 0,
        _ = 0;L = i;i = i + 128 | 0;F = L;K = a;J = c[K >> 2] | 0;K = c[K + 4 >> 2] | 0;B = a + 8 | 0;w = B;D = a + 16 | 0;e = D;E = a + 24 | 0;f = E;G = a + 32 | 0;p = G;H = a + 40 | 0;q = H;I = a + 48 | 0;m = I;A = a + 56 | 0;h = A;j = 0;l = J;u = K;t = c[w >> 2] | 0;z = c[e >> 2] | 0;w = c[w + 4 >> 2] | 0;a = c[e + 4 >> 2] | 0;e = c[f >> 2] | 0;f = c[f + 4 >> 2] | 0;o = c[p >> 2] | 0;p = c[p + 4 >> 2] | 0;g = c[h >> 2] | 0;h = c[h + 4 >> 2] | 0;r = c[q >> 2] | 0;q = c[q + 4 >> 2] | 0;k = c[m >> 2] | 0;m = c[m + 4 >> 2] | 0;while (1) {
      v = mc(o | 0, p | 0, 14) | 0;N = C;x = nc(o | 0, p | 0, 50) | 0;N = N | C;y = mc(o | 0, p | 0, 18) | 0;O = C;M = nc(o | 0, p | 0, 46) | 0;O = N ^ (O | C);N = mc(o | 0, p | 0, 41) | 0;n = C;s = nc(o | 0, p | 0, 23) | 0;n = qc((v | x) ^ (y | M) ^ (N | s) | 0, O ^ (n | C) | 0, g | 0, h | 0) | 0;n = qc(n | 0, C | 0, k & ~o ^ r & o | 0, m & ~p ^ q & p | 0) | 0;O = 72 + (j << 3) | 0;O = qc(n | 0, C | 0, c[O >> 2] | 0, c[O + 4 >> 2] | 0) | 0;n = b;g = c[n >> 2] | 0;n = c[n + 4 >> 2] | 0;s = F + (j << 3) | 0;c[s >> 2] = g;c[s + 4 >> 2] = n;n = qc(O | 0, C | 0, g | 0, n | 0) | 0;g = C;O = mc(l | 0, u | 0, 28) | 0;s = C;N = nc(l | 0, u | 0, 36) | 0;s = s | C;M = mc(l | 0, u | 0, 34) | 0;y = C;h = nc(l | 0, u | 0, 30) | 0;y = s ^ (y | C);s = mc(l | 0, u | 0, 39) | 0;x = C;v = nc(l | 0, u | 0, 25) | 0;x = qc((O | N) ^ (M | h) ^ (s | v) | 0, y ^ (x | C) | 0, l & (z ^ t) ^ z & t | 0, u & (a ^ w) ^ a & w | 0) | 0;y = C;e = qc(n | 0, g | 0, e | 0, f | 0) | 0;f = C;g = qc(x | 0, y | 0, n | 0, g | 0) | 0;n = C;j = j + 1 | 0;if ((j | 0) == 16) {
        y = 16;x = e;v = f;s = p;p = g;j = t;h = u;g = w;b = z;break;
      } else {
        x = p;y = o;h = m;M = k;N = u;O = l;b = b + 8 | 0;l = g;u = n;o = e;p = f;m = q;k = r;q = x;r = y;g = M;f = a;e = z;a = w;w = N;z = t;t = O;
      }
    }while (1) {
      t = y;y = y + 1 | 0;T = F + ((y & 15) << 3) | 0;W = c[T >> 2] | 0;T = c[T + 4 >> 2] | 0;S = mc(W | 0, T | 0, 1) | 0;Q = C;R = nc(W | 0, T | 0, 63) | 0;Q = Q | C;V = mc(W | 0, T | 0, 8) | 0;O = C;U = nc(W | 0, T | 0, 56) | 0;O = O | C;T = mc(W | 0, T | 0, 7) | 0;Q = O ^ C ^ Q;O = F + ((t + 14 & 15) << 3) | 0;W = c[O >> 2] | 0;O = c[O + 4 >> 2] | 0;u = mc(W | 0, O | 0, 19) | 0;e = C;f = nc(W | 0, O | 0, 45) | 0;e = e | C;N = mc(W | 0, O | 0, 61) | 0;_ = C;w = nc(W | 0, O | 0, 3) | 0;_ = _ | C;O = mc(W | 0, O | 0, 6) | 0;e = _ ^ C ^ e;_ = mc(x | 0, v | 0, 14) | 0;W = C;Z = nc(x | 0, v | 0, 50) | 0;W = W | C;Y = mc(x | 0, v | 0, 18) | 0;P = C;X = nc(x | 0, v | 0, 46) | 0;P = W ^ (P | C);W = mc(x | 0, v | 0, 41) | 0;z = C;M = nc(x | 0, v | 0, 23) | 0;m = qc((_ | Z) ^ (Y | X) ^ (W | M) | 0, P ^ (z | C) | 0, k | 0, m | 0) | 0;m = qc(m | 0, C | 0, r & ~x ^ o & x | 0, q & ~v ^ s & v | 0) | 0;z = 72 + (t << 3) | 0;z = qc(m | 0, C | 0, c[z >> 2] | 0, c[z + 4 >> 2] | 0) | 0;m = C;P = F + ((t + 9 & 15) << 3) | 0;t = F + ((t & 15) << 3) | 0;M = t;k = c[M >> 2] | 0;M = c[M + 4 >> 2] | 0;P = qc((V | U) ^ T ^ (S | R) | 0, Q | 0, c[P >> 2] | 0, c[P + 4 >> 2] | 0) | 0;M = qc(P | 0, C | 0, k | 0, M | 0) | 0;e = qc(M | 0, C | 0, (N | w) ^ O ^ (u | f) | 0, e | 0) | 0;f = C;c[t >> 2] = e;c[t + 4 >> 2] = f;f = qc(z | 0, m | 0, e | 0, f | 0) | 0;e = C;m = mc(p | 0, n | 0, 28) | 0;z = C;t = nc(p | 0, n | 0, 36) | 0;z = z | C;u = mc(p | 0, n | 0, 34) | 0;O = C;w = nc(p | 0, n | 0, 30) | 0;O = z ^ (O | C);z = mc(p | 0, n | 0, 39) | 0;N = C;M = nc(p | 0, n | 0, 25) | 0;N = qc((m | t) ^ (u | w) ^ (z | M) | 0, O ^ (N | C) | 0, p & (j ^ l) ^ j & l | 0, n & (g ^ h) ^ g & h | 0) | 0;O = C;a = qc(f | 0, e | 0, b | 0, a | 0) | 0;b = C;e = qc(N | 0, O | 0, f | 0, e | 0) | 0;f = C;if ((y | 0) == 80) break;else {
        X = n;Y = p;Z = v;_ = x;m = q;k = r;x = a;v = b;p = e;n = f;a = g;b = j;g = h;h = X;j = l;l = Y;q = s;r = o;s = Z;o = _;
      }
    }_ = qc(J | 0, K | 0, e | 0, f | 0) | 0;Z = d;c[Z >> 2] = _;c[Z + 4 >> 2] = C;Z = B;Z = qc(c[Z >> 2] | 0, c[Z + 4 >> 2] | 0, p | 0, n | 0) | 0;_ = d + 8 | 0;c[_ >> 2] = Z;c[_ + 4 >> 2] = C;_ = D;_ = qc(c[_ >> 2] | 0, c[_ + 4 >> 2] | 0, l | 0, h | 0) | 0;Z = d + 16 | 0;c[Z >> 2] = _;c[Z + 4 >> 2] = C;Z = E;Z = qc(c[Z >> 2] | 0, c[Z + 4 >> 2] | 0, j | 0, g | 0) | 0;_ = d + 24 | 0;c[_ >> 2] = Z;c[_ + 4 >> 2] = C;_ = G;_ = qc(c[_ >> 2] | 0, c[_ + 4 >> 2] | 0, a | 0, b | 0) | 0;Z = d + 32 | 0;c[Z >> 2] = _;c[Z + 4 >> 2] = C;Z = H;Z = qc(c[Z >> 2] | 0, c[Z + 4 >> 2] | 0, x | 0, v | 0) | 0;_ = d + 40 | 0;c[_ >> 2] = Z;c[_ + 4 >> 2] = C;_ = I;_ = qc(c[_ >> 2] | 0, c[_ + 4 >> 2] | 0, o | 0, s | 0) | 0;Z = d + 48 | 0;c[Z >> 2] = _;c[Z + 4 >> 2] = C;Z = A;Z = qc(c[Z >> 2] | 0, c[Z + 4 >> 2] | 0, r | 0, q | 0) | 0;_ = d + 56 | 0;c[_ >> 2] = Z;c[_ + 4 >> 2] = C;i = L;return;
  }function Hb(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0;do {
      if (e | 0) {
        o = b + 64 | 0;g = o;h = c[g >> 2] | 0;g = c[g + 4 >> 2] | 0;f = mc(h | 0, g | 0, 3) | 0;f = f & 127;if (f) {
          i = 128 - f | 0;j = b + 80 | 0;f = j + f | 0;if (i >>> 0 > e >>> 0) {
            tc(f | 0, d | 0, e | 0) | 0;n = e << 3;m = qc(h | 0, g | 0, n | 0, 0) | 0;l = C;c[o >> 2] = m;c[o + 4 >> 2] = l;if (!(l >>> 0 < 0 | (l | 0) == 0 & m >>> 0 < n >>> 0)) break;o = b + 72 | 0;b = o;b = qc(c[b >> 2] | 0, c[b + 4 >> 2] | 0, 1, 0) | 0;c[o >> 2] = b;c[o + 4 >> 2] = C;break;
          }tc(f | 0, d | 0, i | 0) | 0;n = i << 3;m = qc(h | 0, g | 0, n | 0, 0) | 0;l = C;k = o;c[k >> 2] = m;c[k + 4 >> 2] = l;if (l >>> 0 < 0 | (l | 0) == 0 & m >>> 0 < n >>> 0) {
            n = b + 72 | 0;m = n;m = qc(c[m >> 2] | 0, c[m + 4 >> 2] | 0, 1, 0) | 0;c[n >> 2] = m;c[n + 4 >> 2] = C;
          }e = e - i | 0;f = 0;do {
            n = b + 80 + (f << 3) | 0;m = n;m = ma(c[m >> 2] | 0, c[m + 4 >> 2] | 0) | 0;c[n >> 2] = m;c[n + 4 >> 2] = C;f = f + 1 | 0;
          } while ((f | 0) != 16);Gb(b, j, b);d = d + i | 0;
        }if (e >>> 0 > 127) {
          j = b + 80 | 0;k = b + 72 | 0;m = e + -128 | 0;n = m & -128;l = n + 128 | 0;i = d;while (1) {
            f = j;g = i;h = f + 128 | 0;do {
              a[f >> 0] = a[g >> 0] | 0;f = f + 1 | 0;g = g + 1 | 0;
            } while ((f | 0) < (h | 0));f = 0;do {
              h = b + 80 + (f << 3) | 0;g = h;g = ma(c[g >> 2] | 0, c[g + 4 >> 2] | 0) | 0;c[h >> 2] = g;c[h + 4 >> 2] = C;f = f + 1 | 0;
            } while ((f | 0) != 16);Gb(b, j, b);g = o;h = c[g >> 2] | 0;g = c[g + 4 >> 2] | 0;p = qc(h | 0, g | 0, 1024, 0) | 0;f = o;c[f >> 2] = p;c[f + 4 >> 2] = C;if (g >>> 0 > 4294967295 | (g | 0) == -1 & h >>> 0 > 4294966271) {
              h = k;h = qc(c[h >> 2] | 0, c[h + 4 >> 2] | 0, 1, 0) | 0;p = k;c[p >> 2] = h;c[p + 4 >> 2] = C;
            }e = e + -128 | 0;if (e >>> 0 <= 127) break;else i = i + 128 | 0;
          }d = d + l | 0;e = m - n | 0;
        }if (e | 0 ? (tc(b + 80 | 0, d | 0, e | 0) | 0, p = e << 3, n = o, n = qc(c[n >> 2] | 0, c[n + 4 >> 2] | 0, p | 0, 0) | 0, m = C, o, c[o >> 2] = n, c[o + 4 >> 2] = m, m >>> 0 < 0 | (m | 0) == 0 & n >>> 0 < p >>> 0) : 0) {
          p = b + 72 | 0;o = p;o = qc(c[o >> 2] | 0, c[o + 4 >> 2] | 0, 1, 0) | 0;c[p >> 2] = o;c[p + 4 >> 2] = C;
        }
      }
    } while (0);return;
  }function Ib(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0;if (d) {
      h = b + 64 | 0;f = h;f = mc(c[f >> 2] | 0, c[f + 4 >> 2] | 0, 3) | 0;f = f & 127;e = f + 1 | 0;g = b + 80 | 0;a[g + f >> 0] = -128;if (e >>> 0 > 112) {
        lc(g + e | 0, 0, f ^ 127 | 0) | 0;e = 0;do {
          f = b + 80 + (e << 3) | 0;i = f;i = ma(c[i >> 2] | 0, c[i + 4 >> 2] | 0) | 0;c[f >> 2] = i;c[f + 4 >> 2] = C;e = e + 1 | 0;
        } while ((e | 0) != 16);Gb(b, g, b);e = 0;
      }lc(g + e | 0, 0, 112 - e | 0) | 0;e = 0;do {
        i = b + 80 + (e << 3) | 0;f = i;f = ma(c[f >> 2] | 0, c[f + 4 >> 2] | 0) | 0;c[i >> 2] = f;c[i + 4 >> 2] = C;e = e + 1 | 0;
      } while ((e | 0) != 14);f = b + 72 | 0;e = c[f + 4 >> 2] | 0;i = b + 192 | 0;c[i >> 2] = c[f >> 2];c[i + 4 >> 2] = e;i = c[h + 4 >> 2] | 0;e = b + 200 | 0;c[e >> 2] = c[h >> 2];c[e + 4 >> 2] = i;Gb(b, g, b);e = 0;do {
        i = b + (e << 3) | 0;h = i;h = ma(c[h >> 2] | 0, c[h + 4 >> 2] | 0) | 0;c[i >> 2] = h;c[i + 4 >> 2] = C;e = e + 1 | 0;
      } while ((e | 0) != 8);e = d;f = b;g = e + 64 | 0;do {
        a[e >> 0] = a[f >> 0] | 0;e = e + 1 | 0;f = f + 1 | 0;
      } while ((e | 0) < (g | 0));
    }lc(b | 0, 0, 208) | 0;return;
  }function Jb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0;g = i;i = i + 208 | 0;e = g;f = e;h = 8;j = f + 64 | 0;do {
      c[f >> 2] = c[h >> 2];f = f + 4 | 0;h = h + 4 | 0;
    } while ((f | 0) < (j | 0));lc(e + 64 | 0, 0, 144) | 0;Hb(e, a, b);Ib(e, d);i = g;return;
  }function Kb() {
    var a = 0,
        b = 0,
        d = 0;d = i;i = i + 16 | 0;b = d;a = c[9714] | 0;if (!a) {
      a = bc(38797, 38810) | 0;c[9714] = a;
    }if ((gc(b, 1, 4, a) | 0) == 4) {
      i = d;return c[b >> 2] | 0;
    } else pa(38812, 38828, 60, 38838);return 0;
  }function Lb(a) {
    a = a | 0;if (a >>> 0 >= 256) {
      if (a >>> 0 < 65536) a = 2;else a = a >>> 0 < 16777216 ? 3 : 4;
    } else a = 1;return a | 0;
  }function Mb(b, c) {
    b = b | 0;c = c | 0;var d = 0;if (b >>> 0 <= 16777215) {
      if (b >>> 0 <= 65535) {
        if (b >>> 0 > 255) d = 6;
      } else d = 4;
    } else {
      a[c >> 0] = b >>> 24;c = c + 1 | 0;d = 4;
    }if ((d | 0) == 4) {
      a[c >> 0] = b >>> 16;c = c + 1 | 0;d = 6;
    }if ((d | 0) == 6) {
      a[c >> 0] = b >>> 8;c = c + 1 | 0;
    }a[c >> 0] = b;return;
  }function Nb(a) {
    a = a | 0;var b = 0,
        d = 0;b = i;i = i + 16 | 0;d = b;c[d >> 2] = c[a + 60 >> 2];a = Qb(ha(6, d | 0) | 0) | 0;i = b;return a | 0;
  }function Ob(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0;m = i;i = i + 48 | 0;h = m + 16 | 0;g = m;f = m + 32 | 0;c[f >> 2] = d;j = f + 4 | 0;l = b + 48 | 0;n = c[l >> 2] | 0;c[j >> 2] = e - ((n | 0) != 0 & 1);k = b + 44 | 0;c[f + 8 >> 2] = c[k >> 2];c[f + 12 >> 2] = n;if (!(c[9715] | 0)) {
      c[h >> 2] = c[b + 60 >> 2];c[h + 4 >> 2] = f;c[h + 8 >> 2] = 2;f = Qb(qa(145, h | 0) | 0) | 0;
    } else {
      ga(1, b | 0);c[g >> 2] = c[b + 60 >> 2];c[g + 4 >> 2] = f;c[g + 8 >> 2] = 2;f = Qb(qa(145, g | 0) | 0) | 0;ba(0);
    }if ((f | 0) >= 1) {
      j = c[j >> 2] | 0;if (f >>> 0 > j >>> 0) {
        g = c[k >> 2] | 0;h = b + 4 | 0;c[h >> 2] = g;c[b + 8 >> 2] = g + (f - j);if (!(c[l >> 2] | 0)) f = e;else {
          c[h >> 2] = g + 1;a[d + (e + -1) >> 0] = a[g >> 0] | 0;f = e;
        }
      }
    } else {
      c[b >> 2] = c[b >> 2] | f & 48 ^ 16;c[b + 8 >> 2] = 0;c[b + 4 >> 2] = 0;
    }i = m;return f | 0;
  }function Pb(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0;f = i;i = i + 32 | 0;g = f;e = f + 20 | 0;c[g >> 2] = c[a + 60 >> 2];c[g + 4 >> 2] = 0;c[g + 8 >> 2] = b;c[g + 12 >> 2] = e;c[g + 16 >> 2] = d;if ((Qb(ja(140, g | 0) | 0) | 0) < 0) {
      c[e >> 2] = -1;a = -1;
    } else a = c[e >> 2] | 0;i = f;return a | 0;
  }function Qb(a) {
    a = a | 0;if (a >>> 0 > 4294963200) {
      c[(Rb() | 0) >> 2] = 0 - a;a = -1;
    }return a | 0;
  }function Rb() {
    var a = 0;if (!(c[9715] | 0)) a = 38904;else a = c[(uc() | 0) + 64 >> 2] | 0;return a | 0;
  }function Sb(a) {
    a = a | 0;if (!(c[a + 68 >> 2] | 0)) Tb(a);return;
  }function Tb(a) {
    a = a | 0;return;
  }function Ub(a, b, d) {
    a = a | 0;b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0;q = i;i = i + 48 | 0;n = q + 16 | 0;m = q;j = q + 32 | 0;o = a + 28 | 0;h = c[o >> 2] | 0;c[j >> 2] = h;p = a + 20 | 0;h = (c[p >> 2] | 0) - h | 0;c[j + 4 >> 2] = h;c[j + 8 >> 2] = b;c[j + 12 >> 2] = d;k = a + 60 | 0;l = a + 44 | 0;g = 2;b = h + d | 0;while (1) {
      if (!(c[9715] | 0)) {
        c[n >> 2] = c[k >> 2];c[n + 4 >> 2] = j;c[n + 8 >> 2] = g;f = Qb(ra(146, n | 0) | 0) | 0;
      } else {
        ga(2, a | 0);c[m >> 2] = c[k >> 2];c[m + 4 >> 2] = j;c[m + 8 >> 2] = g;f = Qb(ra(146, m | 0) | 0) | 0;ba(0);
      }if ((b | 0) == (f | 0)) {
        b = 6;break;
      }if ((f | 0) < 0) {
        b = 8;break;
      }b = b - f | 0;e = c[j + 4 >> 2] | 0;if (f >>> 0 <= e >>> 0) {
        if ((g | 0) == 2) {
          c[o >> 2] = (c[o >> 2] | 0) + f;g = 2;h = j;
        } else h = j;
      } else {
        h = c[l >> 2] | 0;c[o >> 2] = h;c[p >> 2] = h;f = f - e | 0;g = g + -1 | 0;h = j + 8 | 0;e = c[j + 12 >> 2] | 0;
      }c[h >> 2] = (c[h >> 2] | 0) + f;c[h + 4 >> 2] = e - f;j = h;
    }if ((b | 0) == 6) {
      n = c[l >> 2] | 0;c[a + 16 >> 2] = n + (c[a + 48 >> 2] | 0);a = n;c[o >> 2] = a;c[p >> 2] = a;
    } else if ((b | 0) == 8) {
      c[a + 16 >> 2] = 0;c[o >> 2] = 0;c[p >> 2] = 0;c[a >> 2] = c[a >> 2] | 32;if ((g | 0) == 2) d = 0;else d = d - (c[j + 4 >> 2] | 0) | 0;
    }i = q;return d | 0;
  }function Vb(a) {
    a = a | 0;if (!(c[a + 68 >> 2] | 0)) Tb(a);return;
  }function Wb(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0;g = i;i = i + 80 | 0;f = g;c[b + 36 >> 2] = 3;if ((c[b >> 2] & 64 | 0) == 0 ? (c[f >> 2] = c[b + 60 >> 2], c[f + 4 >> 2] = 21505, c[f + 8 >> 2] = g + 12, da(54, f | 0) | 0) : 0) a[b + 75 >> 0] = -1;f = Ub(b, d, e) | 0;i = g;return f | 0;
  }function Xb(b) {
    b = b | 0;var d = 0,
        e = 0;d = b + 74 | 0;e = a[d >> 0] | 0;a[d >> 0] = e + 255 | e;d = b + 20 | 0;e = b + 44 | 0;if ((c[d >> 2] | 0) >>> 0 > (c[e >> 2] | 0) >>> 0) va[c[b + 36 >> 2] & 7](b, 0, 0) | 0;c[b + 16 >> 2] = 0;c[b + 28 >> 2] = 0;c[d >> 2] = 0;d = c[b >> 2] | 0;if (d & 20) {
      if (!(d & 4)) d = -1;else {
        c[b >> 2] = d | 32;d = -1;
      }
    } else {
      d = c[e >> 2] | 0;c[b + 8 >> 2] = d;c[b + 4 >> 2] = d;d = 0;
    }return d | 0;
  }function Yb(a) {
    a = a | 0;return 0;
  }function Zb(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        i = 0;h = d & 255;f = (e | 0) != 0;a: do {
      if (f & (b & 3 | 0) != 0) {
        g = d & 255;while (1) {
          if ((a[b >> 0] | 0) == g << 24 >> 24) {
            i = 6;break a;
          }b = b + 1 | 0;e = e + -1 | 0;f = (e | 0) != 0;if (!(f & (b & 3 | 0) != 0)) {
            i = 5;break;
          }
        }
      } else i = 5;
    } while (0);if ((i | 0) == 5) if (f) i = 6;else e = 0;b: do {
      if ((i | 0) == 6) {
        g = d & 255;if ((a[b >> 0] | 0) != g << 24 >> 24) {
          f = R(h, 16843009) | 0;c: do {
            if (e >>> 0 > 3) while (1) {
              h = c[b >> 2] ^ f;if ((h & -2139062144 ^ -2139062144) & h + -16843009 | 0) break;b = b + 4 | 0;e = e + -4 | 0;if (e >>> 0 <= 3) {
                i = 11;break c;
              }
            } else i = 11;
          } while (0);if ((i | 0) == 11) if (!e) {
            e = 0;break;
          }while (1) {
            if ((a[b >> 0] | 0) == g << 24 >> 24) break b;b = b + 1 | 0;e = e + -1 | 0;if (!e) {
              e = 0;break;
            }
          }
        }
      }
    } while (0);return (e | 0 ? b : 0) | 0;
  }function _b(b) {
    b = b | 0;var d = 0,
        e = 0,
        f = 0;f = b;a: do {
      if (!(f & 3)) e = 4;else {
        d = f;while (1) {
          if (!(a[b >> 0] | 0)) {
            b = d;break a;
          }b = b + 1 | 0;d = b;if (!(d & 3)) {
            e = 4;break;
          }
        }
      }
    } while (0);if ((e | 0) == 4) {
      while (1) {
        d = c[b >> 2] | 0;if (!((d & -2139062144 ^ -2139062144) & d + -16843009)) b = b + 4 | 0;else break;
      }if ((d & 255) << 24 >> 24) do {
        b = b + 1 | 0;
      } while ((a[b >> 0] | 0) != 0);
    }return b - f | 0;
  }function $b(b, c) {
    b = b | 0;c = c | 0;b = ac(b, c) | 0;return ((a[b >> 0] | 0) == (c & 255) << 24 >> 24 ? b : 0) | 0;
  }function ac(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0;f = d & 255;a: do {
      if (!f) b = b + (_b(b) | 0) | 0;else {
        if (b & 3) {
          e = d & 255;do {
            g = a[b >> 0] | 0;if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24) break a;b = b + 1 | 0;
          } while ((b & 3 | 0) != 0);
        }f = R(f, 16843009) | 0;e = c[b >> 2] | 0;b: do {
          if (!((e & -2139062144 ^ -2139062144) & e + -16843009)) do {
            g = e ^ f;if ((g & -2139062144 ^ -2139062144) & g + -16843009 | 0) break b;b = b + 4 | 0;e = c[b >> 2] | 0;
          } while (!((e & -2139062144 ^ -2139062144) & e + -16843009 | 0));
        } while (0);e = d & 255;while (1) {
          g = a[b >> 0] | 0;if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24) break;else b = b + 1 | 0;
        }
      }
    } while (0);return b | 0;
  }function bc(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0;g = i;i = i + 32 | 0;f = g + 16 | 0;e = g;if (Zb(38847, a[d >> 0] | 0, 4) | 0) {
      h = cc(d) | 0 | 32768;c[e >> 2] = b;c[e + 4 >> 2] = h;c[e + 8 >> 2] = 438;e = Qb(ka(5, e | 0) | 0) | 0;if ((e | 0) >= 0) {
        b = dc(e, d) | 0;if (!b) {
          c[f >> 2] = e;ha(6, f | 0) | 0;b = 0;
        }
      } else b = 0;
    } else {
      c[(Rb() | 0) >> 2] = 22;b = 0;
    }i = g;return b | 0;
  }function cc(b) {
    b = b | 0;var c = 0,
        d = 0,
        e = 0;d = ($b(b, 43) | 0) == 0;c = a[b >> 0] | 0;d = d ? c << 24 >> 24 != 114 & 1 : 2;e = ($b(b, 120) | 0) == 0;d = e ? d : d | 128;b = ($b(b, 101) | 0) == 0;b = b ? d : d | 524288;b = c << 24 >> 24 == 114 ? b : b | 64;b = c << 24 >> 24 == 119 ? b | 512 : b;return (c << 24 >> 24 == 97 ? b | 1024 : b) | 0;
  }function dc(b, d) {
    b = b | 0;d = d | 0;var e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0;o = i;i = i + 112 | 0;n = o + 40 | 0;l = o + 24 | 0;k = o + 16 | 0;g = o;m = o + 52 | 0;f = a[d >> 0] | 0;if (Zb(38847, f << 24 >> 24, 4) | 0) {
      e = hc(1144) | 0;if (!e) e = 0;else {
        h = e;j = h + 112 | 0;do {
          c[h >> 2] = 0;h = h + 4 | 0;
        } while ((h | 0) < (j | 0));if (!($b(d, 43) | 0)) c[e >> 2] = f << 24 >> 24 == 114 ? 8 : 4;if ($b(d, 101) | 0) {
          c[g >> 2] = b;c[g + 4 >> 2] = 2;c[g + 8 >> 2] = 1;ca(221, g | 0) | 0;f = a[d >> 0] | 0;
        }if (f << 24 >> 24 == 97) {
          c[k >> 2] = b;c[k + 4 >> 2] = 3;f = ca(221, k | 0) | 0;if (!(f & 1024)) {
            c[l >> 2] = b;c[l + 4 >> 2] = 4;c[l + 8 >> 2] = f | 1024;ca(221, l | 0) | 0;
          }d = c[e >> 2] | 128;c[e >> 2] = d;
        } else d = c[e >> 2] | 0;c[e + 60 >> 2] = b;c[e + 44 >> 2] = e + 120;c[e + 48 >> 2] = 1024;f = e + 75 | 0;a[f >> 0] = -1;if ((d & 8 | 0) == 0 ? (c[n >> 2] = b, c[n + 4 >> 2] = 21505, c[n + 8 >> 2] = m, (da(54, n | 0) | 0) == 0) : 0) a[f >> 0] = 10;c[e + 32 >> 2] = 4;c[e + 36 >> 2] = 3;c[e + 40 >> 2] = 2;c[e + 12 >> 2] = 1;if (!(c[9716] | 0)) c[e + 76 >> 2] = -1;ea(38888);f = c[9721] | 0;c[e + 56 >> 2] = f;if (f | 0) c[f + 52 >> 2] = e;c[9721] = e;na(38888);
      }
    } else {
      c[(Rb() | 0) >> 2] = 22;e = 0;
    }i = o;return e | 0;
  }function ec(a) {
    a = a | 0;var b = 0,
        d = 0;do {
      if (a) {
        if ((c[a + 76 >> 2] | 0) <= -1) {
          b = fc(a) | 0;break;
        }d = (Yb(a) | 0) == 0;b = fc(a) | 0;if (!d) Tb(a);
      } else {
        if (!(c[9549] | 0)) b = 0;else b = ec(c[9549] | 0) | 0;ea(38888);a = c[9721] | 0;if (a) do {
          if ((c[a + 76 >> 2] | 0) > -1) d = Yb(a) | 0;else d = 0;if ((c[a + 20 >> 2] | 0) >>> 0 > (c[a + 28 >> 2] | 0) >>> 0) b = fc(a) | 0 | b;if (d | 0) Tb(a);a = c[a + 56 >> 2] | 0;
        } while ((a | 0) != 0);na(38888);
      }
    } while (0);return b | 0;
  }function fc(a) {
    a = a | 0;var b = 0,
        d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0;b = a + 20 | 0;h = a + 28 | 0;if ((c[b >> 2] | 0) >>> 0 > (c[h >> 2] | 0) >>> 0 ? (va[c[a + 36 >> 2] & 7](a, 0, 0) | 0, (c[b >> 2] | 0) == 0) : 0) a = -1;else {
      d = a + 4 | 0;e = c[d >> 2] | 0;f = a + 8 | 0;g = c[f >> 2] | 0;if (e >>> 0 < g >>> 0) va[c[a + 40 >> 2] & 7](a, e - g | 0, 1) | 0;c[a + 16 >> 2] = 0;c[h >> 2] = 0;c[b >> 2] = 0;c[f >> 2] = 0;c[d >> 2] = 0;a = 0;
    }return a | 0;
  }function gc(b, d, e, f) {
    b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0;k = R(e, d) | 0;if ((c[f + 76 >> 2] | 0) > -1) j = Yb(f) | 0;else j = 0;g = f + 74 | 0;i = a[g >> 0] | 0;a[g >> 0] = i + 255 | i;g = f + 4 | 0;i = c[g >> 2] | 0;h = (c[f + 8 >> 2] | 0) - i | 0;if ((h | 0) > 0) {
      h = h >>> 0 < k >>> 0 ? h : k;tc(b | 0, i | 0, h | 0) | 0;c[g >> 2] = i + h;g = k - h | 0;b = b + h | 0;
    } else g = k;a: do {
      if (!g) l = 13;else {
        i = f + 32 | 0;while (1) {
          if (Xb(f) | 0) break;h = va[c[i >> 2] & 7](f, b, g) | 0;if ((h + 1 | 0) >>> 0 < 2) break;g = g - h | 0;if (!g) {
            l = 13;break a;
          } else b = b + h | 0;
        }if (j | 0) Tb(f);e = ((k - g | 0) >>> 0) / (d >>> 0) | 0;
      }
    } while (0);if ((l | 0) == 13) if (j) Tb(f);return e | 0;
  }function hc(a) {
    a = a | 0;var b = 0,
        d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0,
        r = 0,
        s = 0,
        t = 0,
        u = 0,
        v = 0,
        w = 0,
        x = 0,
        y = 0,
        z = 0,
        A = 0,
        B = 0,
        C = 0,
        D = 0,
        E = 0,
        F = 0,
        G = 0,
        H = 0,
        I = 0,
        J = 0,
        K = 0,
        L = 0;L = i;i = i + 16 | 0;p = L;do {
      if (a >>> 0 < 245) {
        o = a >>> 0 < 11 ? 16 : a + 11 & -8;a = o >>> 3;t = c[9727] | 0;d = t >>> a;if (d & 3 | 0) {
          a = (d & 1 ^ 1) + a | 0;d = 38948 + (a << 1 << 2) | 0;e = d + 8 | 0;f = c[e >> 2] | 0;g = f + 8 | 0;h = c[g >> 2] | 0;do {
            if ((d | 0) != (h | 0)) {
              if (h >>> 0 < (c[9731] | 0) >>> 0) fa();b = h + 12 | 0;if ((c[b >> 2] | 0) == (f | 0)) {
                c[b >> 2] = d;c[e >> 2] = h;break;
              } else fa();
            } else c[9727] = t & ~(1 << a);
          } while (0);K = a << 3;c[f + 4 >> 2] = K | 3;K = f + K + 4 | 0;c[K >> 2] = c[K >> 2] | 1;K = g;i = L;return K | 0;
        }s = c[9729] | 0;if (o >>> 0 > s >>> 0) {
          if (d | 0) {
            j = 2 << a;a = d << a & (j | 0 - j);a = (a & 0 - a) + -1 | 0;j = a >>> 12 & 16;a = a >>> j;e = a >>> 5 & 8;a = a >>> e;g = a >>> 2 & 4;a = a >>> g;d = a >>> 1 & 2;a = a >>> d;b = a >>> 1 & 1;b = (e | j | g | d | b) + (a >>> b) | 0;a = 38948 + (b << 1 << 2) | 0;d = a + 8 | 0;g = c[d >> 2] | 0;j = g + 8 | 0;e = c[j >> 2] | 0;do {
              if ((a | 0) != (e | 0)) {
                if (e >>> 0 < (c[9731] | 0) >>> 0) fa();f = e + 12 | 0;if ((c[f >> 2] | 0) == (g | 0)) {
                  c[f >> 2] = a;c[d >> 2] = e;k = t;break;
                } else fa();
              } else {
                k = t & ~(1 << b);c[9727] = k;
              }
            } while (0);h = (b << 3) - o | 0;c[g + 4 >> 2] = o | 3;e = g + o | 0;c[e + 4 >> 2] = h | 1;c[e + h >> 2] = h;if (s | 0) {
              f = c[9732] | 0;b = s >>> 3;d = 38948 + (b << 1 << 2) | 0;b = 1 << b;if (k & b) {
                b = d + 8 | 0;a = c[b >> 2] | 0;if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                  l = a;m = b;
                }
              } else {
                c[9727] = k | b;l = d;m = d + 8 | 0;
              }c[m >> 2] = f;c[l + 12 >> 2] = f;c[f + 8 >> 2] = l;c[f + 12 >> 2] = d;
            }c[9729] = h;c[9732] = e;K = j;i = L;return K | 0;
          }l = c[9728] | 0;if (l) {
            a = (l & 0 - l) + -1 | 0;J = a >>> 12 & 16;a = a >>> J;I = a >>> 5 & 8;a = a >>> I;K = a >>> 2 & 4;a = a >>> K;j = a >>> 1 & 2;a = a >>> j;k = a >>> 1 & 1;k = c[39212 + ((I | J | K | j | k) + (a >>> k) << 2) >> 2] | 0;a = k;j = k;k = (c[k + 4 >> 2] & -8) - o | 0;while (1) {
              b = c[a + 16 >> 2] | 0;if (!b) {
                b = c[a + 20 >> 2] | 0;if (!b) break;
              }K = (c[b + 4 >> 2] & -8) - o | 0;J = K >>> 0 < k >>> 0;a = b;j = J ? b : j;k = J ? K : k;
            }f = c[9731] | 0;if (j >>> 0 < f >>> 0) fa();h = j + o | 0;if (j >>> 0 >= h >>> 0) fa();g = c[j + 24 >> 2] | 0;d = c[j + 12 >> 2] | 0;do {
              if ((d | 0) == (j | 0)) {
                a = j + 20 | 0;b = c[a >> 2] | 0;if (!b) {
                  a = j + 16 | 0;b = c[a >> 2] | 0;if (!b) {
                    n = 0;break;
                  }
                }while (1) {
                  d = b + 20 | 0;e = c[d >> 2] | 0;if (e | 0) {
                    b = e;a = d;continue;
                  }d = b + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
                    b = e;a = d;
                  }
                }if (a >>> 0 < f >>> 0) fa();else {
                  c[a >> 2] = 0;n = b;break;
                }
              } else {
                e = c[j + 8 >> 2] | 0;if (e >>> 0 < f >>> 0) fa();b = e + 12 | 0;if ((c[b >> 2] | 0) != (j | 0)) fa();a = d + 8 | 0;if ((c[a >> 2] | 0) == (j | 0)) {
                  c[b >> 2] = d;c[a >> 2] = e;n = d;break;
                } else fa();
              }
            } while (0);do {
              if (g | 0) {
                b = c[j + 28 >> 2] | 0;a = 39212 + (b << 2) | 0;if ((j | 0) == (c[a >> 2] | 0)) {
                  c[a >> 2] = n;if (!n) {
                    c[9728] = l & ~(1 << b);break;
                  }
                } else {
                  if (g >>> 0 < (c[9731] | 0) >>> 0) fa();b = g + 16 | 0;if ((c[b >> 2] | 0) == (j | 0)) c[b >> 2] = n;else c[g + 20 >> 2] = n;if (!n) break;
                }a = c[9731] | 0;if (n >>> 0 < a >>> 0) fa();c[n + 24 >> 2] = g;b = c[j + 16 >> 2] | 0;do {
                  if (b | 0) if (b >>> 0 < a >>> 0) fa();else {
                    c[n + 16 >> 2] = b;c[b + 24 >> 2] = n;break;
                  }
                } while (0);b = c[j + 20 >> 2] | 0;if (b | 0) if (b >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                  c[n + 20 >> 2] = b;c[b + 24 >> 2] = n;break;
                }
              }
            } while (0);if (k >>> 0 < 16) {
              K = k + o | 0;c[j + 4 >> 2] = K | 3;K = j + K + 4 | 0;c[K >> 2] = c[K >> 2] | 1;
            } else {
              c[j + 4 >> 2] = o | 3;c[h + 4 >> 2] = k | 1;c[h + k >> 2] = k;if (s | 0) {
                e = c[9732] | 0;b = s >>> 3;d = 38948 + (b << 1 << 2) | 0;b = 1 << b;if (t & b) {
                  b = d + 8 | 0;a = c[b >> 2] | 0;if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                    q = a;r = b;
                  }
                } else {
                  c[9727] = t | b;q = d;r = d + 8 | 0;
                }c[r >> 2] = e;c[q + 12 >> 2] = e;c[e + 8 >> 2] = q;c[e + 12 >> 2] = d;
              }c[9729] = k;c[9732] = h;
            }K = j + 8 | 0;i = L;return K | 0;
          }
        }
      } else if (a >>> 0 <= 4294967231) {
        a = a + 11 | 0;o = a & -8;l = c[9728] | 0;if (l) {
          e = 0 - o | 0;a = a >>> 8;if (a) {
            if (o >>> 0 > 16777215) k = 31;else {
              r = (a + 1048320 | 0) >>> 16 & 8;D = a << r;q = (D + 520192 | 0) >>> 16 & 4;D = D << q;k = (D + 245760 | 0) >>> 16 & 2;k = 14 - (q | r | k) + (D << k >>> 15) | 0;k = o >>> (k + 7 | 0) & 1 | k << 1;
            }
          } else k = 0;a = c[39212 + (k << 2) >> 2] | 0;a: do {
            if (!a) {
              d = 0;f = 0;D = 86;
            } else {
              f = 0;j = a;h = o << ((k | 0) == 31 ? 0 : 25 - (k >>> 1) | 0);d = 0;while (1) {
                a = (c[j + 4 >> 2] & -8) - o | 0;if (a >>> 0 < e >>> 0) if (!a) {
                  a = j;e = 0;d = j;D = 90;break a;
                } else {
                  f = j;e = a;
                }a = c[j + 20 >> 2] | 0;j = c[j + 16 + (h >>> 31 << 2) >> 2] | 0;d = (a | 0) == 0 | (a | 0) == (j | 0) ? d : a;a = (j | 0) == 0;if (a) {
                  D = 86;break;
                } else h = h << (a & 1 ^ 1);
              }
            }
          } while (0);if ((D | 0) == 86) {
            if ((d | 0) == 0 & (f | 0) == 0) {
              a = 2 << k;a = l & (a | 0 - a);if (!a) break;r = (a & 0 - a) + -1 | 0;m = r >>> 12 & 16;r = r >>> m;k = r >>> 5 & 8;r = r >>> k;n = r >>> 2 & 4;r = r >>> n;q = r >>> 1 & 2;r = r >>> q;d = r >>> 1 & 1;d = c[39212 + ((k | m | n | q | d) + (r >>> d) << 2) >> 2] | 0;
            }if (!d) {
              k = f;j = e;
            } else {
              a = f;D = 90;
            }
          }if ((D | 0) == 90) while (1) {
            D = 0;r = (c[d + 4 >> 2] & -8) - o | 0;f = r >>> 0 < e >>> 0;e = f ? r : e;a = f ? d : a;f = c[d + 16 >> 2] | 0;if (f | 0) {
              d = f;D = 90;continue;
            }d = c[d + 20 >> 2] | 0;if (!d) {
              k = a;j = e;break;
            } else D = 90;
          }if ((k | 0) != 0 ? j >>> 0 < ((c[9729] | 0) - o | 0) >>> 0 : 0) {
            f = c[9731] | 0;if (k >>> 0 < f >>> 0) fa();h = k + o | 0;if (k >>> 0 >= h >>> 0) fa();g = c[k + 24 >> 2] | 0;d = c[k + 12 >> 2] | 0;do {
              if ((d | 0) == (k | 0)) {
                a = k + 20 | 0;b = c[a >> 2] | 0;if (!b) {
                  a = k + 16 | 0;b = c[a >> 2] | 0;if (!b) {
                    s = 0;break;
                  }
                }while (1) {
                  d = b + 20 | 0;e = c[d >> 2] | 0;if (e | 0) {
                    b = e;a = d;continue;
                  }d = b + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
                    b = e;a = d;
                  }
                }if (a >>> 0 < f >>> 0) fa();else {
                  c[a >> 2] = 0;s = b;break;
                }
              } else {
                e = c[k + 8 >> 2] | 0;if (e >>> 0 < f >>> 0) fa();b = e + 12 | 0;if ((c[b >> 2] | 0) != (k | 0)) fa();a = d + 8 | 0;if ((c[a >> 2] | 0) == (k | 0)) {
                  c[b >> 2] = d;c[a >> 2] = e;s = d;break;
                } else fa();
              }
            } while (0);do {
              if (g) {
                b = c[k + 28 >> 2] | 0;a = 39212 + (b << 2) | 0;if ((k | 0) == (c[a >> 2] | 0)) {
                  c[a >> 2] = s;if (!s) {
                    t = l & ~(1 << b);c[9728] = t;break;
                  }
                } else {
                  if (g >>> 0 < (c[9731] | 0) >>> 0) fa();b = g + 16 | 0;if ((c[b >> 2] | 0) == (k | 0)) c[b >> 2] = s;else c[g + 20 >> 2] = s;if (!s) {
                    t = l;break;
                  }
                }a = c[9731] | 0;if (s >>> 0 < a >>> 0) fa();c[s + 24 >> 2] = g;b = c[k + 16 >> 2] | 0;do {
                  if (b | 0) if (b >>> 0 < a >>> 0) fa();else {
                    c[s + 16 >> 2] = b;c[b + 24 >> 2] = s;break;
                  }
                } while (0);b = c[k + 20 >> 2] | 0;if (b) {
                  if (b >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                    c[s + 20 >> 2] = b;c[b + 24 >> 2] = s;t = l;break;
                  }
                } else t = l;
              } else t = l;
            } while (0);do {
              if (j >>> 0 >= 16) {
                c[k + 4 >> 2] = o | 3;c[h + 4 >> 2] = j | 1;c[h + j >> 2] = j;b = j >>> 3;if (j >>> 0 < 256) {
                  d = 38948 + (b << 1 << 2) | 0;a = c[9727] | 0;b = 1 << b;if (a & b) {
                    b = d + 8 | 0;a = c[b >> 2] | 0;if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                      B = a;C = b;
                    }
                  } else {
                    c[9727] = a | b;B = d;C = d + 8 | 0;
                  }c[C >> 2] = h;c[B + 12 >> 2] = h;c[h + 8 >> 2] = B;c[h + 12 >> 2] = d;break;
                }b = j >>> 8;if (b) {
                  if (j >>> 0 > 16777215) b = 31;else {
                    J = (b + 1048320 | 0) >>> 16 & 8;K = b << J;I = (K + 520192 | 0) >>> 16 & 4;K = K << I;b = (K + 245760 | 0) >>> 16 & 2;b = 14 - (I | J | b) + (K << b >>> 15) | 0;b = j >>> (b + 7 | 0) & 1 | b << 1;
                  }
                } else b = 0;d = 39212 + (b << 2) | 0;c[h + 28 >> 2] = b;a = h + 16 | 0;c[a + 4 >> 2] = 0;c[a >> 2] = 0;a = 1 << b;if (!(t & a)) {
                  c[9728] = t | a;c[d >> 2] = h;c[h + 24 >> 2] = d;c[h + 12 >> 2] = h;c[h + 8 >> 2] = h;break;
                }a = j << ((b | 0) == 31 ? 0 : 25 - (b >>> 1) | 0);e = c[d >> 2] | 0;while (1) {
                  if ((c[e + 4 >> 2] & -8 | 0) == (j | 0)) {
                    D = 148;break;
                  }d = e + 16 + (a >>> 31 << 2) | 0;b = c[d >> 2] | 0;if (!b) {
                    D = 145;break;
                  } else {
                    a = a << 1;e = b;
                  }
                }if ((D | 0) == 145) {
                  if (d >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                    c[d >> 2] = h;c[h + 24 >> 2] = e;c[h + 12 >> 2] = h;c[h + 8 >> 2] = h;break;
                  }
                } else if ((D | 0) == 148) {
                  b = e + 8 | 0;a = c[b >> 2] | 0;K = c[9731] | 0;if (a >>> 0 >= K >>> 0 & e >>> 0 >= K >>> 0) {
                    c[a + 12 >> 2] = h;c[b >> 2] = h;c[h + 8 >> 2] = a;c[h + 12 >> 2] = e;c[h + 24 >> 2] = 0;break;
                  } else fa();
                }
              } else {
                K = j + o | 0;c[k + 4 >> 2] = K | 3;K = k + K + 4 | 0;c[K >> 2] = c[K >> 2] | 1;
              }
            } while (0);K = k + 8 | 0;i = L;return K | 0;
          }
        }
      } else o = -1;
    } while (0);d = c[9729] | 0;if (d >>> 0 >= o >>> 0) {
      b = d - o | 0;a = c[9732] | 0;if (b >>> 0 > 15) {
        K = a + o | 0;c[9732] = K;c[9729] = b;c[K + 4 >> 2] = b | 1;c[K + b >> 2] = b;c[a + 4 >> 2] = o | 3;
      } else {
        c[9729] = 0;c[9732] = 0;c[a + 4 >> 2] = d | 3;K = a + d + 4 | 0;c[K >> 2] = c[K >> 2] | 1;
      }K = a + 8 | 0;i = L;return K | 0;
    }j = c[9730] | 0;if (j >>> 0 > o >>> 0) {
      I = j - o | 0;c[9730] = I;K = c[9733] | 0;J = K + o | 0;c[9733] = J;c[J + 4 >> 2] = I | 1;c[K + 4 >> 2] = o | 3;K = K + 8 | 0;i = L;return K | 0;
    }if (!(c[9845] | 0)) {
      c[9847] = 4096;c[9846] = 4096;c[9848] = -1;c[9849] = -1;c[9850] = 0;c[9838] = 0;a = p & -16 ^ 1431655768;c[p >> 2] = a;c[9845] = a;a = 4096;
    } else a = c[9847] | 0;k = o + 48 | 0;l = o + 47 | 0;h = a + l | 0;f = 0 - a | 0;m = h & f;if (m >>> 0 <= o >>> 0) {
      K = 0;i = L;return K | 0;
    }a = c[9837] | 0;if (a | 0 ? (B = c[9835] | 0, C = B + m | 0, C >>> 0 <= B >>> 0 | C >>> 0 > a >>> 0) : 0) {
      K = 0;i = L;return K | 0;
    }b: do {
      if (!(c[9838] & 4)) {
        d = c[9733] | 0;c: do {
          if (d) {
            e = 39356;while (1) {
              a = c[e >> 2] | 0;if (a >>> 0 <= d >>> 0 ? (u = e + 4 | 0, (a + (c[u >> 2] | 0) | 0) >>> 0 > d >>> 0) : 0) break;a = c[e + 8 >> 2] | 0;if (!a) {
                D = 172;break c;
              } else e = a;
            }d = h - j & f;if (d >>> 0 < 2147483647) {
              a = rc(d | 0) | 0;if ((a | 0) == ((c[e >> 2] | 0) + (c[u >> 2] | 0) | 0)) {
                if ((a | 0) != (-1 | 0)) {
                  h = d;g = a;D = 190;break b;
                }
              } else {
                b = d;D = 180;
              }
            }
          } else D = 172;
        } while (0);do {
          if (((D | 0) == 172 ? (g = rc(0) | 0, (g | 0) != (-1 | 0)) : 0) ? (b = g, v = c[9846] | 0, w = v + -1 | 0, b = ((w & b | 0) == 0 ? 0 : (w + b & 0 - v) - b | 0) + m | 0, v = c[9835] | 0, w = b + v | 0, b >>> 0 > o >>> 0 & b >>> 0 < 2147483647) : 0) {
            C = c[9837] | 0;if (C | 0 ? w >>> 0 <= v >>> 0 | w >>> 0 > C >>> 0 : 0) break;a = rc(b | 0) | 0;if ((a | 0) == (g | 0)) {
              h = b;D = 190;break b;
            } else D = 180;
          }
        } while (0);d: do {
          if ((D | 0) == 180) {
            d = 0 - b | 0;do {
              if (k >>> 0 > b >>> 0 & (b >>> 0 < 2147483647 & (a | 0) != (-1 | 0)) ? (x = c[9847] | 0, x = l - b + x & 0 - x, x >>> 0 < 2147483647) : 0) if ((rc(x | 0) | 0) == (-1 | 0)) {
                rc(d | 0) | 0;break d;
              } else {
                b = x + b | 0;break;
              }
            } while (0);if ((a | 0) != (-1 | 0)) {
              h = b;g = a;D = 190;break b;
            }
          }
        } while (0);c[9838] = c[9838] | 4;D = 187;
      } else D = 187;
    } while (0);if ((((D | 0) == 187 ? m >>> 0 < 2147483647 : 0) ? (A = rc(m | 0) | 0, y = rc(0) | 0, A >>> 0 < y >>> 0 & ((A | 0) != (-1 | 0) & (y | 0) != (-1 | 0))) : 0) ? (z = y - A | 0, z >>> 0 > (o + 40 | 0) >>> 0) : 0) {
      h = z;g = A;D = 190;
    }if ((D | 0) == 190) {
      b = (c[9835] | 0) + h | 0;c[9835] = b;if (b >>> 0 > (c[9836] | 0) >>> 0) c[9836] = b;l = c[9733] | 0;do {
        if (l) {
          b = 39356;while (1) {
            a = c[b >> 2] | 0;d = b + 4 | 0;e = c[d >> 2] | 0;if ((g | 0) == (a + e | 0)) {
              D = 200;break;
            }f = c[b + 8 >> 2] | 0;if (!f) break;else b = f;
          }if (((D | 0) == 200 ? (c[b + 12 >> 2] & 8 | 0) == 0 : 0) ? l >>> 0 < g >>> 0 & l >>> 0 >= a >>> 0 : 0) {
            c[d >> 2] = e + h;K = l + 8 | 0;K = (K & 7 | 0) == 0 ? 0 : 0 - K & 7;J = l + K | 0;K = h - K + (c[9730] | 0) | 0;c[9733] = J;c[9730] = K;c[J + 4 >> 2] = K | 1;c[J + K + 4 >> 2] = 40;c[9734] = c[9849];break;
          }b = c[9731] | 0;if (g >>> 0 < b >>> 0) {
            c[9731] = g;j = g;
          } else j = b;a = g + h | 0;b = 39356;while (1) {
            if ((c[b >> 2] | 0) == (a | 0)) {
              D = 208;break;
            }b = c[b + 8 >> 2] | 0;if (!b) {
              a = 39356;break;
            }
          }if ((D | 0) == 208) if (!(c[b + 12 >> 2] & 8)) {
            c[b >> 2] = g;n = b + 4 | 0;c[n >> 2] = (c[n >> 2] | 0) + h;n = g + 8 | 0;n = g + ((n & 7 | 0) == 0 ? 0 : 0 - n & 7) | 0;b = a + 8 | 0;b = a + ((b & 7 | 0) == 0 ? 0 : 0 - b & 7) | 0;m = n + o | 0;k = b - n - o | 0;c[n + 4 >> 2] = o | 3;do {
              if ((b | 0) != (l | 0)) {
                if ((b | 0) == (c[9732] | 0)) {
                  K = (c[9729] | 0) + k | 0;c[9729] = K;c[9732] = m;c[m + 4 >> 2] = K | 1;c[m + K >> 2] = K;break;
                }a = c[b + 4 >> 2] | 0;if ((a & 3 | 0) == 1) {
                  h = a & -8;f = a >>> 3;e: do {
                    if (a >>> 0 >= 256) {
                      g = c[b + 24 >> 2] | 0;e = c[b + 12 >> 2] | 0;do {
                        if ((e | 0) == (b | 0)) {
                          e = b + 16 | 0;d = e + 4 | 0;a = c[d >> 2] | 0;if (!a) {
                            a = c[e >> 2] | 0;if (!a) {
                              I = 0;break;
                            } else d = e;
                          }while (1) {
                            e = a + 20 | 0;f = c[e >> 2] | 0;if (f | 0) {
                              a = f;d = e;continue;
                            }e = a + 16 | 0;f = c[e >> 2] | 0;if (!f) break;else {
                              a = f;d = e;
                            }
                          }if (d >>> 0 < j >>> 0) fa();else {
                            c[d >> 2] = 0;I = a;break;
                          }
                        } else {
                          f = c[b + 8 >> 2] | 0;if (f >>> 0 < j >>> 0) fa();a = f + 12 | 0;if ((c[a >> 2] | 0) != (b | 0)) fa();d = e + 8 | 0;if ((c[d >> 2] | 0) == (b | 0)) {
                            c[a >> 2] = e;c[d >> 2] = f;I = e;break;
                          } else fa();
                        }
                      } while (0);if (!g) break;a = c[b + 28 >> 2] | 0;d = 39212 + (a << 2) | 0;do {
                        if ((b | 0) != (c[d >> 2] | 0)) {
                          if (g >>> 0 < (c[9731] | 0) >>> 0) fa();a = g + 16 | 0;if ((c[a >> 2] | 0) == (b | 0)) c[a >> 2] = I;else c[g + 20 >> 2] = I;if (!I) break e;
                        } else {
                          c[d >> 2] = I;if (I | 0) break;c[9728] = c[9728] & ~(1 << a);break e;
                        }
                      } while (0);e = c[9731] | 0;if (I >>> 0 < e >>> 0) fa();c[I + 24 >> 2] = g;a = b + 16 | 0;d = c[a >> 2] | 0;do {
                        if (d | 0) if (d >>> 0 < e >>> 0) fa();else {
                          c[I + 16 >> 2] = d;c[d + 24 >> 2] = I;break;
                        }
                      } while (0);a = c[a + 4 >> 2] | 0;if (!a) break;if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                        c[I + 20 >> 2] = a;c[a + 24 >> 2] = I;break;
                      }
                    } else {
                      d = c[b + 8 >> 2] | 0;e = c[b + 12 >> 2] | 0;a = 38948 + (f << 1 << 2) | 0;do {
                        if ((d | 0) != (a | 0)) {
                          if (d >>> 0 < j >>> 0) fa();if ((c[d + 12 >> 2] | 0) == (b | 0)) break;fa();
                        }
                      } while (0);if ((e | 0) == (d | 0)) {
                        c[9727] = c[9727] & ~(1 << f);break;
                      }do {
                        if ((e | 0) == (a | 0)) F = e + 8 | 0;else {
                          if (e >>> 0 < j >>> 0) fa();a = e + 8 | 0;if ((c[a >> 2] | 0) == (b | 0)) {
                            F = a;break;
                          }fa();
                        }
                      } while (0);c[d + 12 >> 2] = e;c[F >> 2] = d;
                    }
                  } while (0);b = b + h | 0;f = h + k | 0;
                } else f = k;b = b + 4 | 0;c[b >> 2] = c[b >> 2] & -2;c[m + 4 >> 2] = f | 1;c[m + f >> 2] = f;b = f >>> 3;if (f >>> 0 < 256) {
                  d = 38948 + (b << 1 << 2) | 0;a = c[9727] | 0;b = 1 << b;do {
                    if (!(a & b)) {
                      c[9727] = a | b;J = d;K = d + 8 | 0;
                    } else {
                      b = d + 8 | 0;a = c[b >> 2] | 0;if (a >>> 0 >= (c[9731] | 0) >>> 0) {
                        J = a;K = b;break;
                      }fa();
                    }
                  } while (0);c[K >> 2] = m;c[J + 12 >> 2] = m;c[m + 8 >> 2] = J;c[m + 12 >> 2] = d;break;
                }b = f >>> 8;do {
                  if (!b) b = 0;else {
                    if (f >>> 0 > 16777215) {
                      b = 31;break;
                    }J = (b + 1048320 | 0) >>> 16 & 8;K = b << J;I = (K + 520192 | 0) >>> 16 & 4;K = K << I;b = (K + 245760 | 0) >>> 16 & 2;b = 14 - (I | J | b) + (K << b >>> 15) | 0;b = f >>> (b + 7 | 0) & 1 | b << 1;
                  }
                } while (0);e = 39212 + (b << 2) | 0;c[m + 28 >> 2] = b;a = m + 16 | 0;c[a + 4 >> 2] = 0;c[a >> 2] = 0;a = c[9728] | 0;d = 1 << b;if (!(a & d)) {
                  c[9728] = a | d;c[e >> 2] = m;c[m + 24 >> 2] = e;c[m + 12 >> 2] = m;c[m + 8 >> 2] = m;break;
                }a = f << ((b | 0) == 31 ? 0 : 25 - (b >>> 1) | 0);e = c[e >> 2] | 0;while (1) {
                  if ((c[e + 4 >> 2] & -8 | 0) == (f | 0)) {
                    D = 278;break;
                  }d = e + 16 + (a >>> 31 << 2) | 0;b = c[d >> 2] | 0;if (!b) {
                    D = 275;break;
                  } else {
                    a = a << 1;e = b;
                  }
                }if ((D | 0) == 275) {
                  if (d >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                    c[d >> 2] = m;c[m + 24 >> 2] = e;c[m + 12 >> 2] = m;c[m + 8 >> 2] = m;break;
                  }
                } else if ((D | 0) == 278) {
                  b = e + 8 | 0;a = c[b >> 2] | 0;K = c[9731] | 0;if (a >>> 0 >= K >>> 0 & e >>> 0 >= K >>> 0) {
                    c[a + 12 >> 2] = m;c[b >> 2] = m;c[m + 8 >> 2] = a;c[m + 12 >> 2] = e;c[m + 24 >> 2] = 0;break;
                  } else fa();
                }
              } else {
                K = (c[9730] | 0) + k | 0;c[9730] = K;c[9733] = m;c[m + 4 >> 2] = K | 1;
              }
            } while (0);K = n + 8 | 0;i = L;return K | 0;
          } else a = 39356;while (1) {
            b = c[a >> 2] | 0;if (b >>> 0 <= l >>> 0 ? (E = b + (c[a + 4 >> 2] | 0) | 0, E >>> 0 > l >>> 0) : 0) break;a = c[a + 8 >> 2] | 0;
          }f = E + -47 | 0;a = f + 8 | 0;a = f + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;f = l + 16 | 0;a = a >>> 0 < f >>> 0 ? l : a;b = a + 8 | 0;d = g + 8 | 0;d = (d & 7 | 0) == 0 ? 0 : 0 - d & 7;K = g + d | 0;d = h + -40 - d | 0;c[9733] = K;c[9730] = d;c[K + 4 >> 2] = d | 1;c[K + d + 4 >> 2] = 40;c[9734] = c[9849];d = a + 4 | 0;c[d >> 2] = 27;c[b >> 2] = c[9839];c[b + 4 >> 2] = c[9840];c[b + 8 >> 2] = c[9841];c[b + 12 >> 2] = c[9842];c[9839] = g;c[9840] = h;c[9842] = 0;c[9841] = b;b = a + 24 | 0;do {
            b = b + 4 | 0;c[b >> 2] = 7;
          } while ((b + 4 | 0) >>> 0 < E >>> 0);if ((a | 0) != (l | 0)) {
            g = a - l | 0;c[d >> 2] = c[d >> 2] & -2;c[l + 4 >> 2] = g | 1;c[a >> 2] = g;b = g >>> 3;if (g >>> 0 < 256) {
              d = 38948 + (b << 1 << 2) | 0;a = c[9727] | 0;b = 1 << b;if (a & b) {
                b = d + 8 | 0;a = c[b >> 2] | 0;if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                  G = a;H = b;
                }
              } else {
                c[9727] = a | b;G = d;H = d + 8 | 0;
              }c[H >> 2] = l;c[G + 12 >> 2] = l;c[l + 8 >> 2] = G;c[l + 12 >> 2] = d;break;
            }b = g >>> 8;if (b) {
              if (g >>> 0 > 16777215) d = 31;else {
                J = (b + 1048320 | 0) >>> 16 & 8;K = b << J;I = (K + 520192 | 0) >>> 16 & 4;K = K << I;d = (K + 245760 | 0) >>> 16 & 2;d = 14 - (I | J | d) + (K << d >>> 15) | 0;d = g >>> (d + 7 | 0) & 1 | d << 1;
              }
            } else d = 0;e = 39212 + (d << 2) | 0;c[l + 28 >> 2] = d;c[l + 20 >> 2] = 0;c[f >> 2] = 0;b = c[9728] | 0;a = 1 << d;if (!(b & a)) {
              c[9728] = b | a;c[e >> 2] = l;c[l + 24 >> 2] = e;c[l + 12 >> 2] = l;c[l + 8 >> 2] = l;break;
            }a = g << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);e = c[e >> 2] | 0;while (1) {
              if ((c[e + 4 >> 2] & -8 | 0) == (g | 0)) {
                D = 304;break;
              }d = e + 16 + (a >>> 31 << 2) | 0;b = c[d >> 2] | 0;if (!b) {
                D = 301;break;
              } else {
                a = a << 1;e = b;
              }
            }if ((D | 0) == 301) {
              if (d >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                c[d >> 2] = l;c[l + 24 >> 2] = e;c[l + 12 >> 2] = l;c[l + 8 >> 2] = l;break;
              }
            } else if ((D | 0) == 304) {
              b = e + 8 | 0;a = c[b >> 2] | 0;K = c[9731] | 0;if (a >>> 0 >= K >>> 0 & e >>> 0 >= K >>> 0) {
                c[a + 12 >> 2] = l;c[b >> 2] = l;c[l + 8 >> 2] = a;c[l + 12 >> 2] = e;c[l + 24 >> 2] = 0;break;
              } else fa();
            }
          }
        } else {
          K = c[9731] | 0;if ((K | 0) == 0 | g >>> 0 < K >>> 0) c[9731] = g;c[9839] = g;c[9840] = h;c[9842] = 0;c[9736] = c[9845];c[9735] = -1;b = 0;do {
            K = 38948 + (b << 1 << 2) | 0;c[K + 12 >> 2] = K;c[K + 8 >> 2] = K;b = b + 1 | 0;
          } while ((b | 0) != 32);K = g + 8 | 0;K = (K & 7 | 0) == 0 ? 0 : 0 - K & 7;J = g + K | 0;K = h + -40 - K | 0;c[9733] = J;c[9730] = K;c[J + 4 >> 2] = K | 1;c[J + K + 4 >> 2] = 40;c[9734] = c[9849];
        }
      } while (0);b = c[9730] | 0;if (b >>> 0 > o >>> 0) {
        I = b - o | 0;c[9730] = I;K = c[9733] | 0;J = K + o | 0;c[9733] = J;c[J + 4 >> 2] = I | 1;c[K + 4 >> 2] = o | 3;K = K + 8 | 0;i = L;return K | 0;
      }
    }c[(Rb() | 0) >> 2] = 12;K = 0;i = L;return K | 0;
  }function ic(a) {
    a = a | 0;var b = 0,
        d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0,
        i = 0,
        j = 0,
        k = 0,
        l = 0,
        m = 0,
        n = 0,
        o = 0,
        p = 0,
        q = 0;if (!a) return;d = a + -8 | 0;h = c[9731] | 0;if (d >>> 0 < h >>> 0) fa();a = c[a + -4 >> 2] | 0;b = a & 3;if ((b | 0) == 1) fa();e = a & -8;n = d + e | 0;do {
      if (!(a & 1)) {
        a = c[d >> 2] | 0;if (!b) return;k = d + (0 - a) | 0;j = a + e | 0;if (k >>> 0 < h >>> 0) fa();if ((k | 0) == (c[9732] | 0)) {
          a = n + 4 | 0;b = c[a >> 2] | 0;if ((b & 3 | 0) != 3) {
            q = k;f = j;break;
          }c[9729] = j;c[a >> 2] = b & -2;c[k + 4 >> 2] = j | 1;c[k + j >> 2] = j;return;
        }e = a >>> 3;if (a >>> 0 < 256) {
          b = c[k + 8 >> 2] | 0;d = c[k + 12 >> 2] | 0;a = 38948 + (e << 1 << 2) | 0;if ((b | 0) != (a | 0)) {
            if (b >>> 0 < h >>> 0) fa();if ((c[b + 12 >> 2] | 0) != (k | 0)) fa();
          }if ((d | 0) == (b | 0)) {
            c[9727] = c[9727] & ~(1 << e);q = k;f = j;break;
          }if ((d | 0) != (a | 0)) {
            if (d >>> 0 < h >>> 0) fa();a = d + 8 | 0;if ((c[a >> 2] | 0) == (k | 0)) g = a;else fa();
          } else g = d + 8 | 0;c[b + 12 >> 2] = d;c[g >> 2] = b;q = k;f = j;break;
        }g = c[k + 24 >> 2] | 0;d = c[k + 12 >> 2] | 0;do {
          if ((d | 0) == (k | 0)) {
            d = k + 16 | 0;b = d + 4 | 0;a = c[b >> 2] | 0;if (!a) {
              a = c[d >> 2] | 0;if (!a) {
                i = 0;break;
              } else b = d;
            }while (1) {
              d = a + 20 | 0;e = c[d >> 2] | 0;if (e | 0) {
                a = e;b = d;continue;
              }d = a + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
                a = e;b = d;
              }
            }if (b >>> 0 < h >>> 0) fa();else {
              c[b >> 2] = 0;i = a;break;
            }
          } else {
            e = c[k + 8 >> 2] | 0;if (e >>> 0 < h >>> 0) fa();a = e + 12 | 0;if ((c[a >> 2] | 0) != (k | 0)) fa();b = d + 8 | 0;if ((c[b >> 2] | 0) == (k | 0)) {
              c[a >> 2] = d;c[b >> 2] = e;i = d;break;
            } else fa();
          }
        } while (0);if (g) {
          a = c[k + 28 >> 2] | 0;b = 39212 + (a << 2) | 0;if ((k | 0) == (c[b >> 2] | 0)) {
            c[b >> 2] = i;if (!i) {
              c[9728] = c[9728] & ~(1 << a);q = k;f = j;break;
            }
          } else {
            if (g >>> 0 < (c[9731] | 0) >>> 0) fa();a = g + 16 | 0;if ((c[a >> 2] | 0) == (k | 0)) c[a >> 2] = i;else c[g + 20 >> 2] = i;if (!i) {
              q = k;f = j;break;
            }
          }d = c[9731] | 0;if (i >>> 0 < d >>> 0) fa();c[i + 24 >> 2] = g;a = k + 16 | 0;b = c[a >> 2] | 0;do {
            if (b | 0) if (b >>> 0 < d >>> 0) fa();else {
              c[i + 16 >> 2] = b;c[b + 24 >> 2] = i;break;
            }
          } while (0);a = c[a + 4 >> 2] | 0;if (a) {
            if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
              c[i + 20 >> 2] = a;c[a + 24 >> 2] = i;q = k;f = j;break;
            }
          } else {
            q = k;f = j;
          }
        } else {
          q = k;f = j;
        }
      } else {
        q = d;f = e;
      }
    } while (0);if (q >>> 0 >= n >>> 0) fa();a = n + 4 | 0;b = c[a >> 2] | 0;if (!(b & 1)) fa();if (!(b & 2)) {
      if ((n | 0) == (c[9733] | 0)) {
        p = (c[9730] | 0) + f | 0;c[9730] = p;c[9733] = q;c[q + 4 >> 2] = p | 1;if ((q | 0) != (c[9732] | 0)) return;c[9732] = 0;c[9729] = 0;return;
      }if ((n | 0) == (c[9732] | 0)) {
        p = (c[9729] | 0) + f | 0;c[9729] = p;c[9732] = q;c[q + 4 >> 2] = p | 1;c[q + p >> 2] = p;return;
      }f = (b & -8) + f | 0;e = b >>> 3;do {
        if (b >>> 0 >= 256) {
          g = c[n + 24 >> 2] | 0;a = c[n + 12 >> 2] | 0;do {
            if ((a | 0) == (n | 0)) {
              d = n + 16 | 0;b = d + 4 | 0;a = c[b >> 2] | 0;if (!a) {
                a = c[d >> 2] | 0;if (!a) {
                  m = 0;break;
                } else b = d;
              }while (1) {
                d = a + 20 | 0;e = c[d >> 2] | 0;if (e | 0) {
                  a = e;b = d;continue;
                }d = a + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
                  a = e;b = d;
                }
              }if (b >>> 0 < (c[9731] | 0) >>> 0) fa();else {
                c[b >> 2] = 0;m = a;break;
              }
            } else {
              b = c[n + 8 >> 2] | 0;if (b >>> 0 < (c[9731] | 0) >>> 0) fa();d = b + 12 | 0;if ((c[d >> 2] | 0) != (n | 0)) fa();e = a + 8 | 0;if ((c[e >> 2] | 0) == (n | 0)) {
                c[d >> 2] = a;c[e >> 2] = b;m = a;break;
              } else fa();
            }
          } while (0);if (g | 0) {
            a = c[n + 28 >> 2] | 0;b = 39212 + (a << 2) | 0;if ((n | 0) == (c[b >> 2] | 0)) {
              c[b >> 2] = m;if (!m) {
                c[9728] = c[9728] & ~(1 << a);break;
              }
            } else {
              if (g >>> 0 < (c[9731] | 0) >>> 0) fa();a = g + 16 | 0;if ((c[a >> 2] | 0) == (n | 0)) c[a >> 2] = m;else c[g + 20 >> 2] = m;if (!m) break;
            }d = c[9731] | 0;if (m >>> 0 < d >>> 0) fa();c[m + 24 >> 2] = g;a = n + 16 | 0;b = c[a >> 2] | 0;do {
              if (b | 0) if (b >>> 0 < d >>> 0) fa();else {
                c[m + 16 >> 2] = b;c[b + 24 >> 2] = m;break;
              }
            } while (0);a = c[a + 4 >> 2] | 0;if (a | 0) if (a >>> 0 < (c[9731] | 0) >>> 0) fa();else {
              c[m + 20 >> 2] = a;c[a + 24 >> 2] = m;break;
            }
          }
        } else {
          b = c[n + 8 >> 2] | 0;d = c[n + 12 >> 2] | 0;a = 38948 + (e << 1 << 2) | 0;if ((b | 0) != (a | 0)) {
            if (b >>> 0 < (c[9731] | 0) >>> 0) fa();if ((c[b + 12 >> 2] | 0) != (n | 0)) fa();
          }if ((d | 0) == (b | 0)) {
            c[9727] = c[9727] & ~(1 << e);break;
          }if ((d | 0) != (a | 0)) {
            if (d >>> 0 < (c[9731] | 0) >>> 0) fa();a = d + 8 | 0;if ((c[a >> 2] | 0) == (n | 0)) l = a;else fa();
          } else l = d + 8 | 0;c[b + 12 >> 2] = d;c[l >> 2] = b;
        }
      } while (0);c[q + 4 >> 2] = f | 1;c[q + f >> 2] = f;if ((q | 0) == (c[9732] | 0)) {
        c[9729] = f;return;
      }
    } else {
      c[a >> 2] = b & -2;c[q + 4 >> 2] = f | 1;c[q + f >> 2] = f;
    }a = f >>> 3;if (f >>> 0 < 256) {
      d = 38948 + (a << 1 << 2) | 0;b = c[9727] | 0;a = 1 << a;if (b & a) {
        a = d + 8 | 0;b = c[a >> 2] | 0;if (b >>> 0 < (c[9731] | 0) >>> 0) fa();else {
          o = b;p = a;
        }
      } else {
        c[9727] = b | a;o = d;p = d + 8 | 0;
      }c[p >> 2] = q;c[o + 12 >> 2] = q;c[q + 8 >> 2] = o;c[q + 12 >> 2] = d;return;
    }a = f >>> 8;if (a) {
      if (f >>> 0 > 16777215) a = 31;else {
        o = (a + 1048320 | 0) >>> 16 & 8;p = a << o;n = (p + 520192 | 0) >>> 16 & 4;p = p << n;a = (p + 245760 | 0) >>> 16 & 2;a = 14 - (n | o | a) + (p << a >>> 15) | 0;a = f >>> (a + 7 | 0) & 1 | a << 1;
      }
    } else a = 0;e = 39212 + (a << 2) | 0;c[q + 28 >> 2] = a;c[q + 20 >> 2] = 0;c[q + 16 >> 2] = 0;b = c[9728] | 0;d = 1 << a;do {
      if (b & d) {
        b = f << ((a | 0) == 31 ? 0 : 25 - (a >>> 1) | 0);e = c[e >> 2] | 0;while (1) {
          if ((c[e + 4 >> 2] & -8 | 0) == (f | 0)) {
            a = 130;break;
          }d = e + 16 + (b >>> 31 << 2) | 0;a = c[d >> 2] | 0;if (!a) {
            a = 127;break;
          } else {
            b = b << 1;e = a;
          }
        }if ((a | 0) == 127) {
          if (d >>> 0 < (c[9731] | 0) >>> 0) fa();else {
            c[d >> 2] = q;c[q + 24 >> 2] = e;c[q + 12 >> 2] = q;c[q + 8 >> 2] = q;break;
          }
        } else if ((a | 0) == 130) {
          a = e + 8 | 0;b = c[a >> 2] | 0;p = c[9731] | 0;if (b >>> 0 >= p >>> 0 & e >>> 0 >= p >>> 0) {
            c[b + 12 >> 2] = q;c[a >> 2] = q;c[q + 8 >> 2] = b;c[q + 12 >> 2] = e;c[q + 24 >> 2] = 0;break;
          } else fa();
        }
      } else {
        c[9728] = b | d;c[e >> 2] = q;c[q + 24 >> 2] = e;c[q + 12 >> 2] = q;c[q + 8 >> 2] = q;
      }
    } while (0);q = (c[9735] | 0) + -1 | 0;c[9735] = q;if (!q) a = 39364;else return;while (1) {
      a = c[a >> 2] | 0;if (!a) break;else a = a + 8 | 0;
    }c[9735] = -1;return;
  }function jc() {}function kc(a, b, c, d) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;d = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;return (C = d, a - c >>> 0 | 0) | 0;
  }function lc(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0,
        g = 0,
        h = 0,
        i = 0;f = b + e | 0;if ((e | 0) >= 20) {
      d = d & 255;h = b & 3;i = d | d << 8 | d << 16 | d << 24;g = f & ~3;if (h) {
        h = b + 4 - h | 0;while ((b | 0) < (h | 0)) {
          a[b >> 0] = d;b = b + 1 | 0;
        }
      }while ((b | 0) < (g | 0)) {
        c[b >> 2] = i;b = b + 4 | 0;
      }
    }while ((b | 0) < (f | 0)) {
      a[b >> 0] = d;b = b + 1 | 0;
    }return b - e | 0;
  }function mc(a, b, c) {
    a = a | 0;b = b | 0;c = c | 0;if ((c | 0) < 32) {
      C = b >>> c;return a >>> c | (b & (1 << c) - 1) << 32 - c;
    }C = 0;return b >>> c - 32 | 0;
  }function nc(a, b, c) {
    a = a | 0;b = b | 0;c = c | 0;if ((c | 0) < 32) {
      C = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c;return a << c;
    }C = a << c - 32;return 0;
  }function oc(a, b) {
    a = a | 0;b = b | 0;var c = 0,
        d = 0,
        e = 0,
        f = 0;f = a & 65535;e = b & 65535;c = R(e, f) | 0;d = a >>> 16;a = (c >>> 16) + (R(e, d) | 0) | 0;e = b >>> 16;b = R(e, f) | 0;return (C = (a >>> 16) + (R(e, d) | 0) + (((a & 65535) + b | 0) >>> 16) | 0, a + b << 16 | c & 65535 | 0) | 0;
  }function pc(a, b, c, d) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;var e = 0,
        f = 0;e = a;f = c;c = oc(e, f) | 0;a = C;return (C = (R(b, f) | 0) + (R(d, e) | 0) + a | a & 0, c | 0 | 0) | 0;
  }function qc(a, b, c, d) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;c = a + c >>> 0;return (C = b + d + (c >>> 0 < a >>> 0 | 0) >>> 0, c | 0) | 0;
  }function rc(a) {
    a = a | 0;var b = 0,
        d = 0;d = a + 15 & -16 | 0;b = c[k >> 2] | 0;a = b + d | 0;if ((d | 0) > 0 & (a | 0) < (b | 0) | (a | 0) < 0) {
      Z() | 0;sa(12);return -1;
    }c[k >> 2] = a;if ((a | 0) > (Y() | 0) ? (X() | 0) == 0 : 0) {
      sa(12);c[k >> 2] = b;return -1;
    }return b | 0;
  }function sc(a) {
    a = a | 0;return (a & 255) << 24 | (a >> 8 & 255) << 16 | (a >> 16 & 255) << 8 | a >>> 24 | 0;
  }function tc(b, d, e) {
    b = b | 0;d = d | 0;e = e | 0;var f = 0;if ((e | 0) >= 4096) return la(b | 0, d | 0, e | 0) | 0;f = b | 0;if ((b & 3) == (d & 3)) {
      while (b & 3) {
        if (!e) return f | 0;a[b >> 0] = a[d >> 0] | 0;b = b + 1 | 0;d = d + 1 | 0;e = e - 1 | 0;
      }while ((e | 0) >= 4) {
        c[b >> 2] = c[d >> 2];b = b + 4 | 0;d = d + 4 | 0;e = e - 4 | 0;
      }
    }while ((e | 0) > 0) {
      a[b >> 0] = a[d >> 0] | 0;b = b + 1 | 0;d = d + 1 | 0;e = e - 1 | 0;
    }return f | 0;
  }function uc() {
    return 0;
  }function vc(a, b) {
    a = a | 0;b = b | 0;return ua[a & 1](b | 0) | 0;
  }function wc(a, b, c, d) {
    a = a | 0;b = b | 0;c = c | 0;d = d | 0;return va[a & 7](b | 0, c | 0, d | 0) | 0;
  }function xc(a, b) {
    a = a | 0;b = b | 0;wa[a & 3](b | 0);
  }function yc(a) {
    a = a | 0;V(0);return 0;
  }function zc(a, b, c) {
    a = a | 0;b = b | 0;c = c | 0;V(1);return 0;
  }function Ac(a) {
    a = a | 0;V(2);
  }

  // EMSCRIPTEN_END_FUNCS
  var ua = [yc, Nb];var va = [zc, Wb, Pb, Ub, Ob, zc, zc, zc];var wa = [Ac, Sb, Vb, Ac];return { ___muldsi3: oc, _sbrk: rc, _i64Subtract: kc, _free: ic, _ecdsa_read_pubkey: lb, _i64Add: qc, _pthread_self: uc, _memset: lc, _malloc: hc, _memcpy: tc, _llvm_bswap_i32: sc, ___muldi3: pc, _bitshift64Lshr: mc, _fflush: ec, _hdnode_public_ckd_address_optimized: ub, ___errno_location: Rb, _bitshift64Shl: nc, runPostSets: jc, stackAlloc: xa, stackSave: ya, stackRestore: za, establishStackSpace: Aa, setThrew: Ba, setTempRet0: Ca, getTempRet0: Da, dynCall_ii: vc, dynCall_iiii: wc, dynCall_vi: xc };
}(

// EMSCRIPTEN_END_ASM
e.Ia, e.Ja, buffer),
    kc = e.___muldsi3 = Z.___muldsi3,
    E = e._malloc = Z._malloc,
    db = e._i64Subtract = Z._i64Subtract,
    Ga = e._free = Z._free;e.runPostSets = Z.runPostSets;
var sc = e._ecdsa_read_pubkey = Z._ecdsa_read_pubkey,
    mc = e._i64Add = Z._i64Add,
    rc = e._pthread_self = Z._pthread_self,
    eb = e._memset = Z._memset,
    nc = e._sbrk = Z._sbrk,
    qc = e._memcpy = Z._memcpy;e.___errno_location = Z.___errno_location;var lc = e.___muldi3 = Z.___muldi3,
    gb = e._bitshift64Lshr = Z._bitshift64Lshr;e._fflush = Z._fflush;var tc = e._hdnode_public_ckd_address_optimized = Z._hdnode_public_ckd_address_optimized,
    pc = e._llvm_bswap_i32 = Z._llvm_bswap_i32,
    hb = e._bitshift64Shl = Z._bitshift64Shl;e.dynCall_ii = Z.dynCall_ii;
e.dynCall_iiii = Z.dynCall_iiii;e.dynCall_vi = Z.dynCall_vi;t.P = Z.stackAlloc;t.Q = Z.stackSave;t.I = Z.stackRestore;t.cd = Z.establishStackSpace;t.Wa = Z.setTempRet0;t.Na = Z.getTempRet0;function ga(a) {
  this.name = "ExitStatus";this.message = "Program terminated with exit(" + a + ")";this.status = a;
}ga.prototype = Error();ga.prototype.constructor = ga;var uc = null,
    $a = function vc() {
  e.calledRun || wc();e.calledRun || ($a = vc);
};
e.callMain = e.ad = function (a) {
  function b() {
    for (var a = 0; 3 > a; a++) {
      d.push(0);
    }
  }a = a || [];za || (za = !0, Qa(Sa));var c = a.length + 1,
      d = [D(Xa(e.thisProgram), "i8", 0)];b();for (var f = 0; f < c - 1; f += 1) {
    d.push(D(Xa(a[f]), "i8", 0)), b();
  }d.push(0);d = D(d, "i32", 0);try {
    var g = e._main(c, d, 0);xc(g, !0);
  } catch (h) {
    if (!(h instanceof ga)) if ("SimulateInfiniteLoop" == h) e.noExitRuntime = !0;else throw h && "object" === (typeof h === "undefined" ? "undefined" : _typeof(h)) && h.stack && e.ba("exception thrown: " + [h, h.stack]), h;
  } finally {}
};
function wc(a) {
  function b() {
    if (!e.calledRun && (e.calledRun = !0, !ja)) {
      za || (za = !0, Qa(Sa));Qa(Ta);if (e.onRuntimeInitialized) e.onRuntimeInitialized();e._main && yc && e.callMain(a);if (e.postRun) for ("function" == typeof e.postRun && (e.postRun = [e.postRun]); e.postRun.length;) {
        Wa(e.postRun.shift());
      }Qa(Ua);
    }
  }a = a || e.arguments;null === uc && (uc = Date.now());if (!(0 < Ya)) {
    if (e.preRun) for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length;) {
      Va(e.preRun.shift());
    }Qa(Ra);0 < Ya || e.calledRun || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function () {
      setTimeout(function () {
        e.setStatus("");
      }, 1);b();
    }, 1)) : b());
  }
}e.run = e.run = wc;function xc(a, b) {
  if (!b || !e.noExitRuntime) {
    if (!e.noExitRuntime && (ja = !0, p = void 0, Qa(J), e.onExit)) e.onExit(a);m ? process.exit(a) : ca && "function" === typeof quit && quit(a);throw new ga(a);
  }
}e.exit = e.exit = xc;var zc = [];
function z(a) {
  void 0 !== a ? (e.print(a), e.ba(a), a = JSON.stringify(a)) : a = "";ja = !0;var b = "abort(" + a + ") at " + Ha() + "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";zc && zc.forEach(function (c) {
    b = c(b, a);
  });throw b;
}e.abort = e.abort = z;if (e.preInit) for ("function" == typeof e.preInit && (e.preInit = [e.preInit]); 0 < e.preInit.length;) {
  e.preInit.pop()();
}var yc = !0;e.noInitialRun && (yc = !1);wc();F = e.HEAPU8;
var E = e._malloc,
    tc = e._hdnode_public_ckd_address_optimized,
    sc = e._ecdsa_read_pubkey,
    B = e.Pointer_stringify,
    Ac = E(72),
    Bc = E(33),
    Cc = E(32),
    Dc = E(60);function Ec(a) {
  var b = new Uint8Array(33);b.set(a.public_key, 0);F.set(b, Bc);b = new Uint8Array(32);b.set(a.chain_code, 0);F.set(b, Cc);sc(0, Bc, Ac);
}function Fc(a, b, c) {
  tc(Ac, Cc, a, b, Dc, 60, c);return B(Dc);
}function Gc(a, b, c, d, f) {
  var g = [];Ec(a);for (a = b; a <= c; a++) {
    g.push(Fc(a, d, f));
  }return g;
}"undefined" !== typeof module && (module.exports = { serializeNode: Ec, deriveAddress: Fc, deriveAddressRange: Gc });
function Hc(a) {
  a = a.data;var b = a.type;switch (b) {case "deriveAddressRange":
      b = Gc(a.node, a.firstIndex, a.lastIndex, a.version, !!a.segwit);self.postMessage({ addresses: b, firstIndex: a.firstIndex, lastIndex: a.lastIndex });break;default:
      throw Error("Unknown message type: " + b);}
}l && (self.onmessage = Hc);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(0).Buffer))

/***/ })
/******/ ]);
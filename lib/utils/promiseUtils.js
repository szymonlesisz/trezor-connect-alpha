'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.errorHandler = exports.ALERT_FIRMWARE_IS_OLD = exports.ALERT_DEVICE_IS_EMPTY = exports.ALERT_DEVICE_IS_BOOTLOADER = exports.ALERT_NO_CONNECTED_DEVICES = exports.ALERT_NO_TRASPORT = exports.FIRMWARE_IS_OLD = exports.DEVICE_IS_EMPTY = exports.DEVICE_IS_BOOTLOADER = exports.NO_CONNECTED_DEVICES = exports.NO_TRANSPORT = exports.resolveAfter = undefined;

var resolveAfter = exports.resolveAfter = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(msec, value) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return new Promise(function (resolve) {
                            _windowOrGlobal2.default.setTimeout(resolve, msec, value);
                        });

                    case 2:
                        return _context.abrupt('return', _context.sent);

                    case 3:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function resolveAfter(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();

// TODO: all errors and alerts should be stored in one file and translated

var _windowOrGlobal = require('window-or-global');

var _windowOrGlobal2 = _interopRequireDefault(_windowOrGlobal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var SIGN_IDENTITY_CANCELLED = new Error('Sign identity cancelled');

var NO_TRANSPORT = exports.NO_TRANSPORT = new Error('No trezor.js transport is available');
var NO_CONNECTED_DEVICES = exports.NO_CONNECTED_DEVICES = new Error('No connected devices');
var DEVICE_IS_BOOTLOADER = exports.DEVICE_IS_BOOTLOADER = new Error('Connected device is in bootloader mode');
var DEVICE_IS_EMPTY = exports.DEVICE_IS_EMPTY = new Error('Connected device is not initialized');
var FIRMWARE_IS_OLD = exports.FIRMWARE_IS_OLD = new Error('Firmware of connected device is too old');

var ALERT_NO_TRASPORT = exports.ALERT_NO_TRASPORT = 'alert_no_trasport';
var ALERT_NO_CONNECTED_DEVICES = exports.ALERT_NO_CONNECTED_DEVICES = 'alert_no_connected_device';
var ALERT_DEVICE_IS_BOOTLOADER = exports.ALERT_DEVICE_IS_BOOTLOADER = 'alert_device_is_bootloader';
var ALERT_DEVICE_IS_EMPTY = exports.ALERT_DEVICE_IS_EMPTY = 'alert_device_is_empty';
var ALERT_FIRMWARE_IS_OLD = exports.ALERT_FIRMWARE_IS_OLD = 'alert_firmware_is_old';

var errorHandler = exports.errorHandler = function errorHandler(callback, emit) {
    return function (error) {
        var never = new Promise(function () {});

        // console.log("ErrorHandler", error, error.code, error.message)
        console.log("ErrorHandler", callback, emit, error.code);

        // Errors generated by TREZOR ('Failure' messages)
        switch (error.code) {
            case 'Failure_PinInvalid':
                //case 'Failure_PinCancelled' :
                return resolveAfter(2500).then(callback);
            case 'Failure_ActionCancelled':
                return resolveAfter(300);

            case 'Failure_InvalidSignature':
                return resolveAfter(300);
        }

        // Errors generated by trezor-link ???
        switch (error.message) {
            case 'Device released or disconnected':
                console.log("++++here dev disconnected!!!!");
                return resolveAfter(300);

            case 'Transfer failed.':
                console.log("++++here session stolen!!!!");
                return resolveAfter(300);
        }

        // Errors generated by channel
        switch (error) {
            case NO_TRANSPORT:
                callback(ALERT_NO_TRASPORT);
                return never;
            case NO_CONNECTED_DEVICES:
                // looping case
                emit(ALERT_NO_CONNECTED_DEVICES);
                return resolveAfter(500).then(callback);
            case DEVICE_IS_BOOTLOADER:
                callback(ALERT_DEVICE_IS_BOOTLOADER);
                return never;
            case DEVICE_IS_EMPTY:
                callback(ALERT_DEVICE_IS_EMPTY);
                return never;
            case FIRMWARE_IS_OLD:
                callback(ALERT_FIRMWARE_IS_OLD);
                return never;

            // handle unrecognized error
            // - Transfer failed.
            // - Device released or disconnected
            default:
                console.error("Error handler: unrecognized error", error.code, error);
                return never;
        }

        // switch (error) { // application errors

        //     case SIGN_IDENTITY_CANCELLED:
        //         console.log("O TUU!")
        //         return never;

        //     case NO_TRANSPORT:
        //         showAlert('#alert_transport_missing');
        //         return never;

        //     case DEVICE_IS_EMPTY:
        //         showAlert('#alert_device_empty');
        //         return never;

        //     case FIRMWARE_IS_OLD:
        //         showAlert('#alert_firmware_old');
        //         return never;

        //     case NO_CONNECTED_DEVICES:
        //         showAlert('#alert_connect');
        //         return resolveAfter(500).then(retry);

        //     case DEVICE_IS_BOOTLOADER:
        //         showAlert('#alert_reconnect');
        //         return resolveAfter(500).then(retry);

        //     case INSUFFICIENT_FUNDS:
        //         showAlert('#alert_insufficient_funds');
        //         return resolveAfter(2500).then(retry);
        // }


        throw error;
    };
};